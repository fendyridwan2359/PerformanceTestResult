/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 40487.0, "minX": 0.0, "maxY": 91501.0, "series": [{"data": [[0.0, 40487.0], [0.1, 78645.0], [0.2, 78673.0], [0.3, 78709.0], [0.4, 78713.0], [0.5, 78725.0], [0.6, 78737.0], [0.7, 78740.0], [0.8, 78746.0], [0.9, 78756.0], [1.0, 78766.0], [1.1, 78772.0], [1.2, 78780.0], [1.3, 78786.0], [1.4, 78788.0], [1.5, 78793.0], [1.6, 78816.0], [1.7, 78835.0], [1.8, 78837.0], [1.9, 78859.0], [2.0, 78870.0], [2.1, 78883.0], [2.2, 78911.0], [2.3, 78921.0], [2.4, 78945.0], [2.5, 78979.0], [2.6, 79012.0], [2.7, 79031.0], [2.8, 79037.0], [2.9, 79040.0], [3.0, 79043.0], [3.1, 79044.0], [3.2, 79047.0], [3.3, 79067.0], [3.4, 79069.0], [3.5, 79070.0], [3.6, 79074.0], [3.7, 79077.0], [3.8, 79080.0], [3.9, 79083.0], [4.0, 79086.0], [4.1, 79093.0], [4.2, 79096.0], [4.3, 79097.0], [4.4, 79102.0], [4.5, 79103.0], [4.6, 79108.0], [4.7, 79109.0], [4.8, 79111.0], [4.9, 79113.0], [5.0, 79116.0], [5.1, 79118.0], [5.2, 79119.0], [5.3, 79122.0], [5.4, 79125.0], [5.5, 79125.0], [5.6, 79128.0], [5.7, 79131.0], [5.8, 79132.0], [5.9, 79135.0], [6.0, 79137.0], [6.1, 79138.0], [6.2, 79141.0], [6.3, 79142.0], [6.4, 79143.0], [6.5, 79143.0], [6.6, 79146.0], [6.7, 79147.0], [6.8, 79148.0], [6.9, 79151.0], [7.0, 79154.0], [7.1, 79155.0], [7.2, 79158.0], [7.3, 79161.0], [7.4, 79163.0], [7.5, 79167.0], [7.6, 79167.0], [7.7, 79168.0], [7.8, 79169.0], [7.9, 79172.0], [8.0, 79176.0], [8.1, 79179.0], [8.2, 79179.0], [8.3, 79180.0], [8.4, 79184.0], [8.5, 79185.0], [8.6, 79187.0], [8.7, 79190.0], [8.8, 79193.0], [8.9, 79195.0], [9.0, 79198.0], [9.1, 79202.0], [9.2, 79202.0], [9.3, 79202.0], [9.4, 79204.0], [9.5, 79205.0], [9.6, 79206.0], [9.7, 79208.0], [9.8, 79209.0], [9.9, 79213.0], [10.0, 79219.0], [10.1, 79223.0], [10.2, 79226.0], [10.3, 79229.0], [10.4, 79232.0], [10.5, 79235.0], [10.6, 79241.0], [10.7, 79245.0], [10.8, 79248.0], [10.9, 79251.0], [11.0, 79258.0], [11.1, 79264.0], [11.2, 79267.0], [11.3, 79267.0], [11.4, 79268.0], [11.5, 79271.0], [11.6, 79274.0], [11.7, 79277.0], [11.8, 79278.0], [11.9, 79280.0], [12.0, 79286.0], [12.1, 79289.0], [12.2, 79290.0], [12.3, 79292.0], [12.4, 79297.0], [12.5, 79297.0], [12.6, 79298.0], [12.7, 79304.0], [12.8, 79307.0], [12.9, 79310.0], [13.0, 79312.0], [13.1, 79320.0], [13.2, 79322.0], [13.3, 79324.0], [13.4, 79325.0], [13.5, 79328.0], [13.6, 79334.0], [13.7, 79336.0], [13.8, 79338.0], [13.9, 79339.0], [14.0, 79351.0], [14.1, 79360.0], [14.2, 79361.0], [14.3, 79366.0], [14.4, 79372.0], [14.5, 79379.0], [14.6, 79391.0], [14.7, 79392.0], [14.8, 79410.0], [14.9, 79414.0], [15.0, 79421.0], [15.1, 79433.0], [15.2, 79436.0], [15.3, 79441.0], [15.4, 79443.0], [15.5, 79448.0], [15.6, 79456.0], [15.7, 79458.0], [15.8, 79459.0], [15.9, 79461.0], [16.0, 79468.0], [16.1, 79469.0], [16.2, 79477.0], [16.3, 79482.0], [16.4, 79484.0], [16.5, 79491.0], [16.6, 79498.0], [16.7, 79505.0], [16.8, 79508.0], [16.9, 79515.0], [17.0, 79519.0], [17.1, 79523.0], [17.2, 79524.0], [17.3, 79527.0], [17.4, 79529.0], [17.5, 79529.0], [17.6, 79531.0], [17.7, 79534.0], [17.8, 79538.0], [17.9, 79539.0], [18.0, 79541.0], [18.1, 79542.0], [18.2, 79544.0], [18.3, 79551.0], [18.4, 79555.0], [18.5, 79557.0], [18.6, 79561.0], [18.7, 79568.0], [18.8, 79572.0], [18.9, 79576.0], [19.0, 79581.0], [19.1, 79583.0], [19.2, 79587.0], [19.3, 79590.0], [19.4, 79599.0], [19.5, 79602.0], [19.6, 79606.0], [19.7, 79607.0], [19.8, 79622.0], [19.9, 79629.0], [20.0, 79634.0], [20.1, 79637.0], [20.2, 79639.0], [20.3, 79641.0], [20.4, 79657.0], [20.5, 79662.0], [20.6, 79666.0], [20.7, 79674.0], [20.8, 79679.0], [20.9, 79681.0], [21.0, 79685.0], [21.1, 79689.0], [21.2, 79696.0], [21.3, 79705.0], [21.4, 79707.0], [21.5, 79712.0], [21.6, 79715.0], [21.7, 79722.0], [21.8, 79724.0], [21.9, 79727.0], [22.0, 79736.0], [22.1, 79746.0], [22.2, 79760.0], [22.3, 79769.0], [22.4, 79776.0], [22.5, 79782.0], [22.6, 79788.0], [22.7, 79797.0], [22.8, 79809.0], [22.9, 79826.0], [23.0, 79827.0], [23.1, 79839.0], [23.2, 79850.0], [23.3, 79864.0], [23.4, 79868.0], [23.5, 79871.0], [23.6, 79871.0], [23.7, 79874.0], [23.8, 79885.0], [23.9, 79891.0], [24.0, 79897.0], [24.1, 79902.0], [24.2, 79904.0], [24.3, 79910.0], [24.4, 79915.0], [24.5, 79916.0], [24.6, 79928.0], [24.7, 79933.0], [24.8, 79935.0], [24.9, 79945.0], [25.0, 79948.0], [25.1, 79955.0], [25.2, 79956.0], [25.3, 79959.0], [25.4, 79965.0], [25.5, 79969.0], [25.6, 79977.0], [25.7, 79978.0], [25.8, 79983.0], [25.9, 79986.0], [26.0, 79988.0], [26.1, 79991.0], [26.2, 79993.0], [26.3, 79994.0], [26.4, 79995.0], [26.5, 79998.0], [26.6, 80004.0], [26.7, 80005.0], [26.8, 80013.0], [26.9, 80015.0], [27.0, 80017.0], [27.1, 80023.0], [27.2, 80028.0], [27.3, 80032.0], [27.4, 80042.0], [27.5, 80044.0], [27.6, 80047.0], [27.7, 80051.0], [27.8, 80059.0], [27.9, 80063.0], [28.0, 80066.0], [28.1, 80072.0], [28.2, 80078.0], [28.3, 80083.0], [28.4, 80085.0], [28.5, 80086.0], [28.6, 80088.0], [28.7, 80101.0], [28.8, 80111.0], [28.9, 80124.0], [29.0, 80129.0], [29.1, 80131.0], [29.2, 80138.0], [29.3, 80173.0], [29.4, 80190.0], [29.5, 80196.0], [29.6, 80207.0], [29.7, 80212.0], [29.8, 80216.0], [29.9, 80220.0], [30.0, 80229.0], [30.1, 80245.0], [30.2, 80253.0], [30.3, 80275.0], [30.4, 80292.0], [30.5, 80300.0], [30.6, 80308.0], [30.7, 80318.0], [30.8, 80346.0], [30.9, 80349.0], [31.0, 80359.0], [31.1, 80364.0], [31.2, 80375.0], [31.3, 80382.0], [31.4, 80385.0], [31.5, 80404.0], [31.6, 80410.0], [31.7, 80414.0], [31.8, 80420.0], [31.9, 80429.0], [32.0, 80433.0], [32.1, 80436.0], [32.2, 80442.0], [32.3, 80450.0], [32.4, 80453.0], [32.5, 80454.0], [32.6, 80458.0], [32.7, 80459.0], [32.8, 80461.0], [32.9, 80464.0], [33.0, 80465.0], [33.1, 80469.0], [33.2, 80473.0], [33.3, 80475.0], [33.4, 80481.0], [33.5, 80485.0], [33.6, 80488.0], [33.7, 80497.0], [33.8, 80502.0], [33.9, 80504.0], [34.0, 80525.0], [34.1, 80530.0], [34.2, 80531.0], [34.3, 80536.0], [34.4, 80542.0], [34.5, 80543.0], [34.6, 80549.0], [34.7, 80566.0], [34.8, 80570.0], [34.9, 80572.0], [35.0, 80579.0], [35.1, 80583.0], [35.2, 80588.0], [35.3, 80591.0], [35.4, 80593.0], [35.5, 80603.0], [35.6, 80611.0], [35.7, 80620.0], [35.8, 80626.0], [35.9, 80637.0], [36.0, 80695.0], [36.1, 80699.0], [36.2, 80712.0], [36.3, 80742.0], [36.4, 80744.0], [36.5, 80748.0], [36.6, 80756.0], [36.7, 80767.0], [36.8, 80777.0], [36.9, 80779.0], [37.0, 80784.0], [37.1, 80785.0], [37.2, 80788.0], [37.3, 80794.0], [37.4, 80801.0], [37.5, 80817.0], [37.6, 80848.0], [37.7, 80854.0], [37.8, 80858.0], [37.9, 80866.0], [38.0, 80870.0], [38.1, 80872.0], [38.2, 80873.0], [38.3, 80874.0], [38.4, 80880.0], [38.5, 80881.0], [38.6, 80885.0], [38.7, 80889.0], [38.8, 80893.0], [38.9, 80898.0], [39.0, 80907.0], [39.1, 80910.0], [39.2, 80917.0], [39.3, 80920.0], [39.4, 80924.0], [39.5, 80928.0], [39.6, 80933.0], [39.7, 80937.0], [39.8, 80939.0], [39.9, 80948.0], [40.0, 80952.0], [40.1, 80957.0], [40.2, 80965.0], [40.3, 80966.0], [40.4, 80969.0], [40.5, 80978.0], [40.6, 80980.0], [40.7, 80982.0], [40.8, 80983.0], [40.9, 80989.0], [41.0, 80992.0], [41.1, 80994.0], [41.2, 80996.0], [41.3, 81001.0], [41.4, 81014.0], [41.5, 81019.0], [41.6, 81035.0], [41.7, 81040.0], [41.8, 81041.0], [41.9, 81047.0], [42.0, 81049.0], [42.1, 81056.0], [42.2, 81067.0], [42.3, 81080.0], [42.4, 81081.0], [42.5, 81090.0], [42.6, 81095.0], [42.7, 81100.0], [42.8, 81114.0], [42.9, 81117.0], [43.0, 81122.0], [43.1, 81131.0], [43.2, 81136.0], [43.3, 81138.0], [43.4, 81149.0], [43.5, 81151.0], [43.6, 81153.0], [43.7, 81156.0], [43.8, 81167.0], [43.9, 81168.0], [44.0, 81179.0], [44.1, 81179.0], [44.2, 81187.0], [44.3, 81190.0], [44.4, 81194.0], [44.5, 81205.0], [44.6, 81223.0], [44.7, 81226.0], [44.8, 81238.0], [44.9, 81246.0], [45.0, 81269.0], [45.1, 81281.0], [45.2, 81307.0], [45.3, 81345.0], [45.4, 81354.0], [45.5, 81364.0], [45.6, 81367.0], [45.7, 81381.0], [45.8, 81387.0], [45.9, 81390.0], [46.0, 81397.0], [46.1, 81402.0], [46.2, 81404.0], [46.3, 81414.0], [46.4, 81418.0], [46.5, 81563.0], [46.6, 81568.0], [46.7, 81569.0], [46.8, 81573.0], [46.9, 81575.0], [47.0, 81576.0], [47.1, 81580.0], [47.2, 81583.0], [47.3, 81589.0], [47.4, 81590.0], [47.5, 81591.0], [47.6, 81597.0], [47.7, 81635.0], [47.8, 81722.0], [47.9, 81747.0], [48.0, 81754.0], [48.1, 81863.0], [48.2, 81881.0], [48.3, 81915.0], [48.4, 81915.0], [48.5, 81921.0], [48.6, 81926.0], [48.7, 81928.0], [48.8, 81943.0], [48.9, 81948.0], [49.0, 82000.0], [49.1, 82023.0], [49.2, 82027.0], [49.3, 82048.0], [49.4, 82069.0], [49.5, 82070.0], [49.6, 82071.0], [49.7, 82072.0], [49.8, 82073.0], [49.9, 82076.0], [50.0, 82077.0], [50.1, 82078.0], [50.2, 82080.0], [50.3, 82081.0], [50.4, 82082.0], [50.5, 82084.0], [50.6, 82087.0], [50.7, 82089.0], [50.8, 82091.0], [50.9, 82092.0], [51.0, 82093.0], [51.1, 82095.0], [51.2, 82095.0], [51.3, 82095.0], [51.4, 82096.0], [51.5, 82098.0], [51.6, 82098.0], [51.7, 82099.0], [51.8, 82099.0], [51.9, 82102.0], [52.0, 82102.0], [52.1, 82105.0], [52.2, 82106.0], [52.3, 82106.0], [52.4, 82108.0], [52.5, 82108.0], [52.6, 82109.0], [52.7, 82110.0], [52.8, 82112.0], [52.9, 82114.0], [53.0, 82114.0], [53.1, 82115.0], [53.2, 82117.0], [53.3, 82117.0], [53.4, 82123.0], [53.5, 82167.0], [53.6, 82173.0], [53.7, 82176.0], [53.8, 82177.0], [53.9, 82180.0], [54.0, 82182.0], [54.1, 82190.0], [54.2, 82202.0], [54.3, 82205.0], [54.4, 82208.0], [54.5, 82211.0], [54.6, 82214.0], [54.7, 82219.0], [54.8, 82221.0], [54.9, 82224.0], [55.0, 82225.0], [55.1, 82226.0], [55.2, 82227.0], [55.3, 82229.0], [55.4, 82230.0], [55.5, 82231.0], [55.6, 82231.0], [55.7, 82232.0], [55.8, 82234.0], [55.9, 82235.0], [56.0, 82236.0], [56.1, 82241.0], [56.2, 82241.0], [56.3, 82242.0], [56.4, 82244.0], [56.5, 82247.0], [56.6, 82250.0], [56.7, 82251.0], [56.8, 82254.0], [56.9, 82256.0], [57.0, 82267.0], [57.1, 82269.0], [57.2, 82275.0], [57.3, 82276.0], [57.4, 82281.0], [57.5, 82282.0], [57.6, 82284.0], [57.7, 82285.0], [57.8, 82285.0], [57.9, 82288.0], [58.0, 82289.0], [58.1, 82291.0], [58.2, 82292.0], [58.3, 82298.0], [58.4, 82303.0], [58.5, 82307.0], [58.6, 82325.0], [58.7, 82329.0], [58.8, 82334.0], [58.9, 82338.0], [59.0, 82339.0], [59.1, 82340.0], [59.2, 82341.0], [59.3, 82347.0], [59.4, 82347.0], [59.5, 82348.0], [59.6, 82349.0], [59.7, 82352.0], [59.8, 82352.0], [59.9, 82355.0], [60.0, 82359.0], [60.1, 82361.0], [60.2, 82364.0], [60.3, 82364.0], [60.4, 82369.0], [60.5, 82369.0], [60.6, 82370.0], [60.7, 82372.0], [60.8, 82375.0], [60.9, 82375.0], [61.0, 82375.0], [61.1, 82376.0], [61.2, 82378.0], [61.3, 82379.0], [61.4, 82379.0], [61.5, 82380.0], [61.6, 82383.0], [61.7, 82384.0], [61.8, 82384.0], [61.9, 82385.0], [62.0, 82385.0], [62.1, 82386.0], [62.2, 82387.0], [62.3, 82388.0], [62.4, 82390.0], [62.5, 82391.0], [62.6, 82393.0], [62.7, 82394.0], [62.8, 82395.0], [62.9, 82396.0], [63.0, 82397.0], [63.1, 82399.0], [63.2, 82400.0], [63.3, 82401.0], [63.4, 82401.0], [63.5, 82402.0], [63.6, 82403.0], [63.7, 82404.0], [63.8, 82406.0], [63.9, 82406.0], [64.0, 82407.0], [64.1, 82407.0], [64.2, 82408.0], [64.3, 82408.0], [64.4, 82409.0], [64.5, 82410.0], [64.6, 82410.0], [64.7, 82412.0], [64.8, 82413.0], [64.9, 82416.0], [65.0, 82418.0], [65.1, 82422.0], [65.2, 82423.0], [65.3, 82430.0], [65.4, 82455.0], [65.5, 82489.0], [65.6, 82490.0], [65.7, 82496.0], [65.8, 82500.0], [65.9, 82503.0], [66.0, 82511.0], [66.1, 82513.0], [66.2, 82515.0], [66.3, 82515.0], [66.4, 82520.0], [66.5, 82523.0], [66.6, 82527.0], [66.7, 82536.0], [66.8, 82537.0], [66.9, 82561.0], [67.0, 82563.0], [67.1, 82565.0], [67.2, 82565.0], [67.3, 82572.0], [67.4, 82574.0], [67.5, 82574.0], [67.6, 82576.0], [67.7, 82580.0], [67.8, 82582.0], [67.9, 82584.0], [68.0, 82586.0], [68.1, 82587.0], [68.2, 82589.0], [68.3, 82592.0], [68.4, 82594.0], [68.5, 82602.0], [68.6, 82604.0], [68.7, 82606.0], [68.8, 82607.0], [68.9, 82609.0], [69.0, 82613.0], [69.1, 82617.0], [69.2, 82617.0], [69.3, 82622.0], [69.4, 82626.0], [69.5, 82626.0], [69.6, 82633.0], [69.7, 82636.0], [69.8, 82638.0], [69.9, 82639.0], [70.0, 82649.0], [70.1, 82656.0], [70.2, 82663.0], [70.3, 82700.0], [70.4, 82710.0], [70.5, 82710.0], [70.6, 82711.0], [70.7, 82719.0], [70.8, 82729.0], [70.9, 82737.0], [71.0, 82740.0], [71.1, 82742.0], [71.2, 82743.0], [71.3, 82762.0], [71.4, 82768.0], [71.5, 82770.0], [71.6, 82774.0], [71.7, 82787.0], [71.8, 82790.0], [71.9, 82804.0], [72.0, 82806.0], [72.1, 82806.0], [72.2, 82807.0], [72.3, 82812.0], [72.4, 82813.0], [72.5, 82817.0], [72.6, 82823.0], [72.7, 82833.0], [72.8, 82834.0], [72.9, 82838.0], [73.0, 82843.0], [73.1, 82846.0], [73.2, 82850.0], [73.3, 82853.0], [73.4, 82855.0], [73.5, 82861.0], [73.6, 82872.0], [73.7, 82885.0], [73.8, 82889.0], [73.9, 82890.0], [74.0, 82892.0], [74.1, 82907.0], [74.2, 82912.0], [74.3, 82912.0], [74.4, 82916.0], [74.5, 82917.0], [74.6, 82920.0], [74.7, 82922.0], [74.8, 82927.0], [74.9, 82964.0], [75.0, 82988.0], [75.1, 82992.0], [75.2, 82997.0], [75.3, 82999.0], [75.4, 83002.0], [75.5, 83004.0], [75.6, 83009.0], [75.7, 83010.0], [75.8, 83015.0], [75.9, 83020.0], [76.0, 83023.0], [76.1, 83027.0], [76.2, 83032.0], [76.3, 83035.0], [76.4, 83037.0], [76.5, 83039.0], [76.6, 83043.0], [76.7, 83046.0], [76.8, 83049.0], [76.9, 83055.0], [77.0, 83061.0], [77.1, 83067.0], [77.2, 83076.0], [77.3, 83082.0], [77.4, 83092.0], [77.5, 83101.0], [77.6, 83114.0], [77.7, 83123.0], [77.8, 83142.0], [77.9, 83147.0], [78.0, 83149.0], [78.1, 83149.0], [78.2, 83151.0], [78.3, 83157.0], [78.4, 83157.0], [78.5, 83159.0], [78.6, 83175.0], [78.7, 83179.0], [78.8, 83185.0], [78.9, 83186.0], [79.0, 83191.0], [79.1, 83193.0], [79.2, 83193.0], [79.3, 83202.0], [79.4, 83206.0], [79.5, 83211.0], [79.6, 83218.0], [79.7, 83220.0], [79.8, 83221.0], [79.9, 83223.0], [80.0, 83228.0], [80.1, 83229.0], [80.2, 83233.0], [80.3, 83245.0], [80.4, 83248.0], [80.5, 83251.0], [80.6, 83252.0], [80.7, 83255.0], [80.8, 83256.0], [80.9, 83259.0], [81.0, 83280.0], [81.1, 83334.0], [81.2, 83405.0], [81.3, 83494.0], [81.4, 83496.0], [81.5, 83506.0], [81.6, 83521.0], [81.7, 83525.0], [81.8, 83526.0], [81.9, 83526.0], [82.0, 83528.0], [82.1, 83532.0], [82.2, 83534.0], [82.3, 83534.0], [82.4, 83536.0], [82.5, 83538.0], [82.6, 83538.0], [82.7, 83540.0], [82.8, 83543.0], [82.9, 83547.0], [83.0, 83551.0], [83.1, 83553.0], [83.2, 83556.0], [83.3, 83556.0], [83.4, 83557.0], [83.5, 83558.0], [83.6, 83561.0], [83.7, 83562.0], [83.8, 83563.0], [83.9, 83564.0], [84.0, 83565.0], [84.1, 83567.0], [84.2, 83567.0], [84.3, 83567.0], [84.4, 83571.0], [84.5, 83577.0], [84.6, 83579.0], [84.7, 83603.0], [84.8, 83620.0], [84.9, 83634.0], [85.0, 83712.0], [85.1, 83723.0], [85.2, 83732.0], [85.3, 83758.0], [85.4, 83762.0], [85.5, 83784.0], [85.6, 83797.0], [85.7, 83820.0], [85.8, 83848.0], [85.9, 83865.0], [86.0, 83886.0], [86.1, 83894.0], [86.2, 83895.0], [86.3, 83898.0], [86.4, 83907.0], [86.5, 83919.0], [86.6, 83924.0], [86.7, 83926.0], [86.8, 83929.0], [86.9, 83929.0], [87.0, 83930.0], [87.1, 83933.0], [87.2, 83935.0], [87.3, 83940.0], [87.4, 83944.0], [87.5, 83945.0], [87.6, 83955.0], [87.7, 83958.0], [87.8, 83963.0], [87.9, 83964.0], [88.0, 83968.0], [88.1, 83973.0], [88.2, 83983.0], [88.3, 83992.0], [88.4, 83993.0], [88.5, 83998.0], [88.6, 84002.0], [88.7, 84003.0], [88.8, 84005.0], [88.9, 84007.0], [89.0, 84008.0], [89.1, 84011.0], [89.2, 84014.0], [89.3, 84016.0], [89.4, 84022.0], [89.5, 84023.0], [89.6, 84029.0], [89.7, 84033.0], [89.8, 84040.0], [89.9, 84049.0], [90.0, 84052.0], [90.1, 84055.0], [90.2, 84058.0], [90.3, 84063.0], [90.4, 84064.0], [90.5, 84066.0], [90.6, 84070.0], [90.7, 84072.0], [90.8, 84074.0], [90.9, 84075.0], [91.0, 84079.0], [91.1, 84082.0], [91.2, 84083.0], [91.3, 84084.0], [91.4, 84092.0], [91.5, 84099.0], [91.6, 84101.0], [91.7, 84109.0], [91.8, 84117.0], [91.9, 84122.0], [92.0, 84134.0], [92.1, 84145.0], [92.2, 84150.0], [92.3, 84163.0], [92.4, 84169.0], [92.5, 84174.0], [92.6, 84178.0], [92.7, 84195.0], [92.8, 84212.0], [92.9, 84217.0], [93.0, 84238.0], [93.1, 84262.0], [93.2, 84264.0], [93.3, 84266.0], [93.4, 84271.0], [93.5, 84273.0], [93.6, 84284.0], [93.7, 84292.0], [93.8, 84292.0], [93.9, 84298.0], [94.0, 84305.0], [94.1, 84310.0], [94.2, 84315.0], [94.3, 84316.0], [94.4, 84321.0], [94.5, 84331.0], [94.6, 84332.0], [94.7, 84345.0], [94.8, 84351.0], [94.9, 84358.0], [95.0, 84366.0], [95.1, 84383.0], [95.2, 84388.0], [95.3, 84391.0], [95.4, 84409.0], [95.5, 84415.0], [95.6, 84425.0], [95.7, 84435.0], [95.8, 84446.0], [95.9, 84481.0], [96.0, 85677.0], [96.1, 86243.0], [96.2, 86941.0], [96.3, 87262.0], [96.4, 87324.0], [96.5, 87391.0], [96.6, 87434.0], [96.7, 87613.0], [96.8, 87701.0], [96.9, 87843.0], [97.0, 87891.0], [97.1, 87956.0], [97.2, 87982.0], [97.3, 88027.0], [97.4, 88126.0], [97.5, 88131.0], [97.6, 88143.0], [97.7, 88154.0], [97.8, 88196.0], [97.9, 88217.0], [98.0, 88234.0], [98.1, 88286.0], [98.2, 88364.0], [98.3, 88449.0], [98.4, 88506.0], [98.5, 88625.0], [98.6, 88903.0], [98.7, 88997.0], [98.8, 89170.0], [98.9, 89327.0], [99.0, 89359.0], [99.1, 89432.0], [99.2, 90093.0], [99.3, 90192.0], [99.4, 90317.0], [99.5, 90377.0], [99.6, 90421.0], [99.7, 90443.0], [99.8, 90497.0], [99.9, 90813.0]], "isOverall": false, "label": "Play Video", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 40400.0, "maxY": 95.0, "series": [{"data": [[81500.0, 25.0], [78700.0, 24.0], [79500.0, 55.0], [79100.0, 95.0], [80700.0, 25.0], [80300.0, 20.0], [79900.0, 49.0], [81900.0, 15.0], [81100.0, 36.0], [83500.0, 65.0], [83900.0, 44.0], [83100.0, 36.0], [82300.0, 95.0], [82700.0, 31.0], [84300.0, 28.0], [84700.0, 1.0], [87900.0, 5.0], [86300.0, 1.0], [87100.0, 1.0], [89100.0, 1.0], [88700.0, 1.0], [87500.0, 1.0], [88300.0, 2.0], [90300.0, 3.0], [90700.0, 1.0], [91500.0, 1.0], [78600.0, 5.0], [81000.0, 29.0], [79400.0, 39.0], [79000.0, 36.0], [79800.0, 27.0], [80600.0, 13.0], [80200.0, 18.0], [81400.0, 8.0], [81800.0, 3.0], [83400.0, 5.0], [83800.0, 14.0], [83000.0, 43.0], [82200.0, 84.0], [82600.0, 36.0], [84200.0, 24.0], [86200.0, 1.0], [87800.0, 3.0], [88600.0, 1.0], [87400.0, 2.0], [88200.0, 5.0], [89400.0, 1.0], [89000.0, 1.0], [90200.0, 1.0], [81300.0, 17.0], [78900.0, 8.0], [79300.0, 41.0], [79700.0, 29.0], [80100.0, 18.0], [80500.0, 35.0], [81700.0, 7.0], [80900.0, 46.0], [83700.0, 13.0], [83300.0, 2.0], [82100.0, 47.0], [82500.0, 54.0], [82900.0, 26.0], [84100.0, 23.0], [89700.0, 1.0], [87300.0, 3.0], [86900.0, 1.0], [89300.0, 5.0], [90100.0, 1.0], [88100.0, 10.0], [88900.0, 3.0], [87700.0, 2.0], [88500.0, 2.0], [40400.0, 1.0], [81200.0, 14.0], [78800.0, 13.0], [79600.0, 37.0], [79200.0, 71.0], [80800.0, 32.0], [80400.0, 45.0], [80000.0, 43.0], [81600.0, 1.0], [82800.0, 44.0], [82000.0, 57.0], [82400.0, 53.0], [83200.0, 36.0], [83600.0, 6.0], [84000.0, 61.0], [85600.0, 1.0], [86000.0, 1.0], [84400.0, 12.0], [87200.0, 2.0], [88000.0, 2.0], [87600.0, 2.0], [90000.0, 2.0], [88400.0, 3.0], [90400.0, 6.0], [90800.0, 1.0]], "isOverall": false, "label": "Play Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 91500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 26.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1974.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1974.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 26.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1171.6743371685839, "minX": 1.57139412E12, "maxY": 2000.0, "series": [{"data": [[1.57139412E12, 2000.0], [1.57139418E12, 1171.6743371685839]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139418E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 40487.0, "minX": 1.0, "maxY": 91501.0, "series": [{"data": [[2.0, 90813.0], [3.0, 90422.0], [4.0, 90702.0], [5.0, 90470.0], [6.0, 90377.0], [7.0, 90497.0], [8.0, 90421.0], [9.0, 90408.0], [10.0, 90443.0], [11.0, 90099.0], [12.0, 90274.0], [13.0, 90093.0], [14.0, 90360.0], [15.0, 90317.0], [16.0, 88286.0], [17.0, 88711.0], [18.0, 90192.0], [19.0, 89359.0], [20.0, 89329.0], [21.0, 88226.0], [22.0, 89706.0], [23.0, 89367.0], [24.0, 89327.0], [25.0, 89170.0], [26.0, 88279.0], [27.0, 87550.0], [28.0, 89432.0], [29.0, 89325.0], [30.0, 87434.0], [31.0, 87701.0], [33.0, 88506.0], [32.0, 87403.0], [35.0, 88449.0], [34.0, 88480.0], [37.0, 88514.0], [36.0, 88438.0], [39.0, 88364.0], [38.0, 87613.0], [41.0, 88987.0], [40.0, 89022.0], [43.0, 88131.0], [42.0, 88316.0], [44.0, 88997.0], [47.0, 87891.0], [46.0, 87849.5], [49.0, 88196.0], [48.0, 88903.0], [51.0, 88234.0], [50.0, 87867.0], [53.0, 88196.0], [52.0, 88217.0], [55.0, 88147.0], [54.0, 88174.0], [57.0, 88154.0], [56.0, 88132.0], [59.0, 88131.0], [58.0, 87982.0], [60.0, 88126.0], [63.0, 88027.0], [62.0, 87876.5], [67.0, 88143.0], [66.0, 87843.0], [65.0, 88301.5], [71.0, 86941.0], [70.0, 87987.0], [69.0, 87324.0], [68.0, 87264.0], [75.0, 87356.0], [74.0, 86031.0], [73.0, 87115.0], [72.0, 87956.0], [79.0, 85677.0], [78.0, 86386.0], [77.0, 87262.0], [76.0, 87391.0], [81.0, 84358.0], [80.0, 86243.0], [87.0, 84298.0], [86.0, 84364.0], [85.0, 84476.0], [91.0, 84417.0], [90.0, 84717.0], [94.0, 84415.0], [92.0, 84417.0], [99.0, 84031.5], [97.0, 84441.0], [96.0, 84379.75], [101.0, 84262.0], [100.0, 84008.0], [106.0, 83982.0], [105.0, 84109.66666666667], [104.0, 83992.0], [109.0, 83944.0], [108.0, 83943.5], [119.0, 83940.0], [118.0, 83965.0], [117.0, 83935.0], [123.0, 83948.0], [122.0, 83964.0], [120.0, 83940.0], [127.0, 84178.0], [126.0, 84352.0], [125.0, 84032.25], [135.0, 83848.0], [134.0, 84170.0], [133.0, 84169.0], [129.0, 83784.0], [128.0, 84166.0], [141.0, 84083.0], [138.0, 84120.0], [136.0, 84092.0], [149.0, 84300.5], [147.0, 84186.42857142857], [159.0, 84169.5], [157.0, 84110.0], [156.0, 84091.66666666667], [153.0, 84220.5], [166.0, 84206.0], [165.0, 84074.0], [163.0, 84075.0], [162.0, 84128.0], [160.0, 84351.0], [175.0, 84053.0], [174.0, 84014.0], [173.0, 84016.0], [172.0, 84432.0], [171.0, 84166.5], [170.0, 84212.0], [182.0, 84207.0], [181.0, 84068.5], [176.0, 84010.0], [191.0, 84195.0], [188.0, 84315.5], [187.0, 84058.0], [185.0, 84341.25], [184.0, 84321.0], [199.0, 84062.33333333333], [196.0, 84123.75], [195.0, 84131.5], [192.0, 84316.0], [206.0, 84023.0], [205.0, 84029.0], [204.0, 84163.0], [203.0, 84022.0], [202.0, 82272.0], [201.0, 84292.0], [200.0, 84298.0], [215.0, 83598.0], [214.0, 84120.16666666666], [211.0, 83620.0], [210.0, 84309.0], [223.0, 84332.0], [222.0, 83145.5], [220.0, 84002.0], [219.0, 83989.0], [217.0, 84292.0], [225.0, 84270.0], [224.0, 84271.0], [238.0, 83779.83333333334], [236.0, 83556.0], [235.0, 84331.0], [234.0, 84266.0], [247.0, 83215.0], [246.0, 83551.0], [244.0, 83693.33333333333], [243.0, 83554.0], [242.0, 83209.0], [240.0, 83908.75], [255.0, 82527.0], [254.0, 83178.0], [251.0, 82511.0], [249.0, 83495.5], [264.0, 82848.33333333333], [261.0, 82411.0], [260.0, 82366.0], [258.0, 82390.0], [257.0, 82872.5], [317.0, 82318.5], [307.0, 82325.0], [350.0, 83670.0], [349.0, 83384.66666666667], [347.0, 82765.33333333333], [346.0, 84070.0], [341.0, 83010.0], [344.0, 82594.375], [345.0, 82998.81081081077], [367.0, 83212.0], [366.0, 82341.33333333333], [355.0, 83529.0], [354.0, 82312.0], [353.0, 83975.0], [352.0, 82337.33333333333], [363.0, 82384.5], [362.0, 84018.0], [361.0, 82384.0], [360.0, 82939.33333333333], [359.0, 83996.5], [357.0, 82379.0], [356.0, 82312.0], [381.0, 82115.0], [383.0, 82916.33333333333], [380.0, 83455.5], [379.0, 82916.0], [378.0, 82404.0], [376.0, 82745.66666666667], [374.0, 82391.0], [373.0, 83512.33333333333], [371.0, 82397.0], [370.0, 82408.0], [369.0, 83225.5], [399.0, 82813.0], [398.0, 83206.0], [393.0, 83211.0], [392.0, 82117.0], [391.0, 83636.5], [390.0, 82410.0], [389.0, 82950.66666666667], [388.0, 82413.0], [385.0, 82669.0], [412.0, 82095.0], [411.0, 82834.0], [409.0, 82567.66666666667], [408.0, 82400.0], [406.0, 83202.0], [404.0, 83456.0], [402.0, 82093.0], [400.0, 82685.0], [478.0, 82407.0], [477.0, 82515.0], [475.0, 82182.75], [473.0, 82099.0], [471.0, 82579.33333333333], [470.0, 83024.21212121214], [469.0, 82411.61538461538], [483.0, 82393.0], [493.0, 82774.8], [494.0, 82409.0], [492.0, 82407.0], [490.0, 82403.5], [489.0, 82404.5], [487.0, 82245.0], [486.0, 82407.0], [485.0, 82097.0], [482.0, 82407.0], [481.0, 82919.66666666667], [480.0, 82259.5], [511.0, 82762.0], [510.0, 83107.5], [506.0, 82855.0], [505.0, 82386.0], [504.0, 82631.0], [503.0, 82387.0], [501.0, 82881.0], [500.0, 83101.33333333333], [497.0, 83080.0], [542.0, 83847.5], [543.0, 83897.0], [540.0, 82811.33333333333], [538.0, 83843.5], [535.0, 83042.0], [531.0, 83792.28571428571], [529.0, 83924.0], [522.0, 83049.0], [518.0, 82375.0], [517.0, 82910.0], [514.0, 82830.0], [512.0, 82369.0], [521.0, 83168.0], [563.0, 82840.33333333333], [573.0, 83579.0], [575.0, 82584.0], [560.0, 83097.0], [572.0, 83795.0], [571.0, 83817.0], [570.0, 83214.0], [551.0, 82876.0], [548.0, 83179.33333333333], [547.0, 83895.0], [544.0, 82340.0], [559.0, 82565.5], [556.0, 82806.0], [552.0, 83885.0], [567.0, 82276.0], [566.0, 82740.0], [565.0, 82555.0], [601.0, 82308.0], [594.0, 83634.0], [607.0, 82091.0], [606.0, 82560.5], [605.0, 82642.0], [591.0, 82487.0], [576.0, 82258.0], [578.0, 82846.0], [577.0, 82850.0], [580.0, 83732.0], [579.0, 83749.0], [583.0, 83251.5], [581.0, 82820.0], [588.0, 82729.0], [587.0, 83194.5], [585.0, 82737.0], [584.0, 82757.0], [598.0, 82117.0], [597.0, 82651.0], [596.0, 82863.5], [593.0, 82106.0], [592.0, 82742.0], [614.0, 82078.0], [612.0, 82339.5], [610.0, 82102.0], [609.0, 82673.5], [767.0, 82763.0], [766.0, 83064.0], [765.0, 83577.0], [763.0, 83555.5], [761.0, 83553.66666666667], [749.0, 82072.0], [798.0, 83253.33333333333], [799.0, 82499.33333333333], [784.0, 83405.0], [796.0, 82414.0], [795.0, 82101.0], [794.0, 82098.0], [792.0, 82434.0], [783.0, 82087.0], [772.0, 83558.0], [770.0, 82567.33333333333], [775.0, 83065.33333333333], [773.0, 82076.0], [782.0, 82077.0], [779.0, 82823.5], [776.0, 82194.0], [790.0, 82971.2], [787.0, 82091.0], [786.0, 82817.5], [785.0, 82815.0], [817.0, 82596.0], [830.0, 82241.0], [831.0, 82294.5], [816.0, 82393.0], [829.0, 82973.0], [828.0, 82503.99122807015], [824.0, 82866.0], [807.0, 82146.33333333333], [806.0, 82626.0], [805.0, 82175.0], [803.0, 82796.66666666667], [802.0, 82617.0], [800.0, 82165.0], [814.0, 82500.4], [813.0, 82626.33333333333], [811.0, 82413.5], [810.0, 82613.0], [823.0, 82617.0], [821.0, 82615.0], [818.0, 82390.0], [862.0, 83228.0], [863.0, 83052.0], [860.0, 83191.0], [859.0, 83251.0], [858.0, 83235.0], [857.0, 83229.75], [847.0, 83530.0], [834.0, 82944.0], [832.0, 82298.0], [836.0, 82300.0], [835.0, 82936.5], [838.0, 83524.0], [837.0, 83526.0], [846.0, 82353.0], [845.0, 83062.5], [843.0, 82356.5], [840.0, 83536.5], [853.0, 83177.0], [851.0, 83259.0], [850.0, 83251.5], [848.0, 83334.0], [882.0, 83114.0], [892.0, 82907.0], [894.0, 83082.0], [881.0, 83125.0], [880.0, 83101.0], [891.0, 83066.0], [889.0, 83076.0], [888.0, 83120.0], [871.0, 83184.0], [866.0, 83177.0], [865.0, 83211.0], [864.0, 83230.0], [878.0, 83157.0], [877.0, 83149.0], [876.0, 83175.0], [875.0, 83176.0], [873.0, 83187.0], [872.0, 83185.0], [887.0, 83123.0], [886.0, 83098.33333333333], [884.0, 83127.0], [915.0, 83000.0], [926.0, 82792.66666666667], [927.0, 82891.0], [914.0, 83048.0], [912.0, 83016.0], [923.0, 82921.5], [921.0, 82964.0], [920.0, 82995.0], [903.0, 82998.0], [901.0, 83039.0], [898.0, 83015.0], [897.0, 82970.5], [910.0, 83029.5], [908.0, 83004.0], [907.0, 83009.0], [904.0, 83016.5], [918.0, 82992.0], [917.0, 83032.2], [916.0, 82975.0], [947.0, 82714.5], [958.0, 82602.0], [957.0, 82652.66666666667], [954.0, 82648.66666666667], [934.0, 82772.0], [933.0, 82838.0], [932.0, 82853.0], [931.0, 82855.0], [930.0, 82839.0], [929.0, 82808.0], [928.0, 82830.0], [951.0, 82711.0], [950.0, 82693.5], [948.0, 82661.0], [945.0, 82766.16666666667], [939.0, 82787.0], [938.0, 82768.0], [937.0, 82433.0], [936.0, 82766.5], [987.0, 82396.33333333333], [991.0, 82410.0], [990.0, 82352.0], [988.0, 82385.0], [985.0, 82375.0], [984.0, 82393.0], [983.0, 82328.5], [974.0, 82455.0], [961.0, 82583.0], [960.0, 82573.0], [965.0, 82210.0], [962.0, 82564.0], [967.0, 82562.0], [966.0, 82560.0], [973.0, 82430.0], [972.0, 82554.75], [971.0, 82574.0], [970.0, 82552.5], [1019.0, 82075.33333333333], [1022.0, 81635.0], [1023.0, 81943.0], [1021.0, 81998.0], [1017.0, 82018.0], [1016.0, 81901.5], [1015.0, 82219.0], [1013.0, 82216.0], [1004.0, 82251.0], [995.0, 82392.66666666667], [993.0, 82336.5], [997.0, 82384.0], [996.0, 82367.66666666667], [999.0, 82403.0], [998.0, 82407.25], [1003.0, 82364.0], [1002.0, 82327.0], [1001.0, 82332.5], [1061.0, 82000.0], [1077.0, 81580.0], [1080.0, 81400.4], [1058.0, 81756.0], [1057.0, 82022.5], [1060.0, 81915.0], [1059.0, 81825.0], [1063.0, 81590.5], [1065.0, 81573.0], [1064.0, 81583.0], [1069.0, 81589.0], [1067.0, 81573.66666666667], [1079.0, 81221.0], [1078.0, 81570.0], [1076.0, 81575.0], [1074.0, 81586.0], [1073.0, 81174.5], [1072.0, 81563.0], [1055.0, 81710.5], [1030.0, 80373.0], [1029.0, 81901.0], [1028.0, 81881.0], [1027.0, 81722.0], [1026.0, 82008.0], [1024.0, 81973.0], [1054.0, 81556.42857142857], [1052.0, 81409.0], [1053.0, 81141.0], [1071.0, 81568.0], [1070.0, 81747.0], [1146.0, 80536.0], [1151.0, 81403.5], [1121.0, 81294.5], [1124.0, 81417.0], [1122.0, 81364.0], [1128.0, 80786.66666666667], [1125.0, 81367.5], [1133.0, 80536.66666666667], [1132.0, 81001.0], [1149.0, 80614.25], [1147.0, 80043.0], [1145.0, 79843.0], [1143.0, 81223.5], [1142.0, 81115.0], [1141.0, 80051.0], [1140.0, 81281.0], [1139.0, 80662.5], [1136.0, 80036.66666666667], [1119.0, 79985.0], [1117.0, 79920.0], [1116.0, 81345.0], [1115.0, 81149.0], [1113.0, 81383.0], [1109.0, 81383.0], [1187.0, 79809.66666666667], [1192.0, 80606.75], [1190.0, 80599.0], [1188.0, 80825.0], [1163.0, 80385.0], [1162.0, 80891.25], [1158.0, 81328.5], [1157.0, 80253.0], [1156.0, 81397.0], [1154.0, 80487.0], [1153.0, 80764.33333333333], [1388.0, 80348.0], [1466.0, 80190.16666666667], [1467.0, 80044.0], [1464.0, 80330.66666666667], [1461.0, 80803.0], [1460.0, 79843.0], [1457.0, 79904.0], [1454.0, 80579.0], [1452.0, 81367.0], [1451.0, 81321.0], [1974.0, 79812.5], [1976.0, 79934.76190476194], [1977.0, 79795.86666666668], [1978.0, 79849.59859154928], [1979.0, 79339.0], [1980.0, 79886.66666666667], [1982.0, 79681.0], [1983.0, 79617.0], [1956.0, 79115.0], [1953.0, 79133.0], [1973.0, 79915.0], [1972.0, 81205.0], [1970.0, 79156.0], [1968.0, 80880.0], [1948.0, 80036.58620689658], [1949.0, 79895.83125], [1950.0, 79451.66666666666], [1965.0, 79617.5], [1964.0, 79109.0], [1961.0, 80228.5], [1960.0, 79871.0], [2000.0, 40487.0], [1999.0, 78947.41666666666], [1994.0, 79681.0], [1987.0, 79518.16666666666], [1986.0, 79635.17808219176], [1985.0, 79047.0], [1.0, 91501.0]], "isOverall": false, "label": "Play Video", "isController": false}, {"data": [[1172.0885000000007, 81751.3529999999]], "isOverall": false, "label": "Play Video-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5.683333333333334, "minX": 1.57139412E12, "maxY": 12956.033333333333, "series": [{"data": [[1.57139412E12, 5.683333333333334], [1.57139418E12, 12339.45]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57139412E12, 6.566666666666666], [1.57139418E12, 12956.033333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139418E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 40487.0, "minX": 1.57139412E12, "maxY": 81771.995497749, "series": [{"data": [[1.57139412E12, 40487.0], [1.57139418E12, 81771.995497749]], "isOverall": false, "label": "Play Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139418E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 40486.0, "minX": 1.57139412E12, "maxY": 80629.87643821904, "series": [{"data": [[1.57139412E12, 40486.0], [1.57139418E12, 80629.87643821904]], "isOverall": false, "label": "Play Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139418E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 144.0, "minX": 1.57139412E12, "maxY": 1092.7413706853436, "series": [{"data": [[1.57139412E12, 144.0], [1.57139418E12, 1092.7413706853436]], "isOverall": false, "label": "Play Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139418E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 40487.0, "minX": 1.57139412E12, "maxY": 91501.0, "series": [{"data": [[1.57139412E12, 40487.0], [1.57139418E12, 91501.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57139412E12, 40487.0], [1.57139418E12, 78642.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57139412E12, 40487.0], [1.57139418E12, 84005.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57139412E12, 40487.0], [1.57139418E12, 89003.5]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57139412E12, 40487.0], [1.57139418E12, 84292.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139418E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 65994.0, "minX": 1.0, "maxY": 90145.5, "series": [{"data": [[1.0, 65994.0], [16.0, 90145.5], [35.0, 88196.0], [151.0, 82839.0], [598.0, 82567.0], [9.0, 87356.0], [620.0, 79625.0], [174.0, 84099.0], [375.0, 80531.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 84358.0], [16.0, 89379.5], [35.0, 87980.0], [9.0, 87219.5], [3.0, 86243.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 620.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 90145.5, "series": [{"data": [[1.0, 65993.5], [16.0, 90145.5], [35.0, 88196.0], [151.0, 82839.0], [598.0, 82567.0], [9.0, 87356.0], [620.0, 79624.0], [174.0, 84099.0], [375.0, 80531.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [16.0, 0.0], [35.0, 0.0], [9.0, 0.0], [3.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 620.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.57139406E12, "maxY": 33.333333333333336, "series": [{"data": [[1.57139406E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139406E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.57139412E12, "maxY": 32.88333333333333, "series": [{"data": [[1.57139412E12, 0.016666666666666666], [1.57139418E12, 32.88333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.57139418E12, 0.43333333333333335]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139418E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.57139412E12, "maxY": 32.88333333333333, "series": [{"data": [[1.57139418E12, 0.43333333333333335]], "isOverall": false, "label": "Play Video-failure", "isController": false}, {"data": [[1.57139412E12, 0.016666666666666666], [1.57139418E12, 32.88333333333333]], "isOverall": false, "label": "Play Video-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139418E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.57139412E12, "maxY": 32.88333333333333, "series": [{"data": [[1.57139412E12, 0.016666666666666666], [1.57139418E12, 32.88333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.57139418E12, 0.43333333333333335]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139418E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

