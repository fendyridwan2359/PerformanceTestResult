/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1324.0, "minX": 0.0, "maxY": 12269.0, "series": [{"data": [[0.0, 1324.0], [0.1, 1325.0], [0.2, 1330.0], [0.3, 1330.0], [0.4, 1338.0], [0.5, 1342.0], [0.6, 1346.0], [0.7, 1347.0], [0.8, 1348.0], [0.9, 1351.0], [1.0, 1353.0], [1.1, 1354.0], [1.2, 1357.0], [1.3, 1359.0], [1.4, 1359.0], [1.5, 1366.0], [1.6, 1367.0], [1.7, 1370.0], [1.8, 1370.0], [1.9, 1375.0], [2.0, 1375.0], [2.1, 1376.0], [2.2, 1383.0], [2.3, 1383.0], [2.4, 1383.0], [2.5, 1385.0], [2.6, 1389.0], [2.7, 1390.0], [2.8, 1393.0], [2.9, 1397.0], [3.0, 1400.0], [3.1, 1401.0], [3.2, 1404.0], [3.3, 1405.0], [3.4, 1412.0], [3.5, 1415.0], [3.6, 1417.0], [3.7, 1419.0], [3.8, 1420.0], [3.9, 1422.0], [4.0, 1425.0], [4.1, 1429.0], [4.2, 1430.0], [4.3, 1432.0], [4.4, 1439.0], [4.5, 1446.0], [4.6, 1453.0], [4.7, 1460.0], [4.8, 1464.0], [4.9, 1464.0], [5.0, 1465.0], [5.1, 1469.0], [5.2, 1469.0], [5.3, 1469.0], [5.4, 1470.0], [5.5, 1470.0], [5.6, 1470.0], [5.7, 1471.0], [5.8, 1472.0], [5.9, 1472.0], [6.0, 1475.0], [6.1, 1476.0], [6.2, 1478.0], [6.3, 1478.0], [6.4, 1478.0], [6.5, 1478.0], [6.6, 1480.0], [6.7, 1481.0], [6.8, 1481.0], [6.9, 1484.0], [7.0, 1484.0], [7.1, 1484.0], [7.2, 1488.0], [7.3, 1490.0], [7.4, 1490.0], [7.5, 1490.0], [7.6, 1493.0], [7.7, 1495.0], [7.8, 1496.0], [7.9, 1496.0], [8.0, 1497.0], [8.1, 1504.0], [8.2, 1504.0], [8.3, 1504.0], [8.4, 1515.0], [8.5, 1515.0], [8.6, 1515.0], [8.7, 1515.0], [8.8, 1517.0], [8.9, 1520.0], [9.0, 1522.0], [9.1, 1528.0], [9.2, 1531.0], [9.3, 1531.0], [9.4, 1535.0], [9.5, 1540.0], [9.6, 1544.0], [9.7, 1547.0], [9.8, 1548.0], [9.9, 1565.0], [10.0, 1571.0], [10.1, 1581.0], [10.2, 1586.0], [10.3, 1616.0], [10.4, 1621.0], [10.5, 1639.0], [10.6, 1659.0], [10.7, 1667.0], [10.8, 1680.0], [10.9, 1692.0], [11.0, 1730.0], [11.1, 1732.0], [11.2, 1772.0], [11.3, 1775.0], [11.4, 1781.0], [11.5, 1803.0], [11.6, 1910.0], [11.7, 1914.0], [11.8, 1915.0], [11.9, 1918.0], [12.0, 1920.0], [12.1, 1920.0], [12.2, 1921.0], [12.3, 1921.0], [12.4, 1924.0], [12.5, 1927.0], [12.6, 1929.0], [12.7, 1930.0], [12.8, 1934.0], [12.9, 1936.0], [13.0, 1936.0], [13.1, 1942.0], [13.2, 1944.0], [13.3, 1945.0], [13.4, 1947.0], [13.5, 1950.0], [13.6, 1951.0], [13.7, 1953.0], [13.8, 1954.0], [13.9, 1959.0], [14.0, 1960.0], [14.1, 1965.0], [14.2, 1966.0], [14.3, 1966.0], [14.4, 1975.0], [14.5, 1976.0], [14.6, 1977.0], [14.7, 1978.0], [14.8, 1996.0], [14.9, 2000.0], [15.0, 2017.0], [15.1, 2029.0], [15.2, 2040.0], [15.3, 2041.0], [15.4, 2047.0], [15.5, 2050.0], [15.6, 2052.0], [15.7, 2057.0], [15.8, 2076.0], [15.9, 2164.0], [16.0, 2177.0], [16.1, 2181.0], [16.2, 2258.0], [16.3, 2262.0], [16.4, 2262.0], [16.5, 2324.0], [16.6, 2335.0], [16.7, 2409.0], [16.8, 2460.0], [16.9, 2646.0], [17.0, 2710.0], [17.1, 2726.0], [17.2, 2746.0], [17.3, 2765.0], [17.4, 2893.0], [17.5, 2894.0], [17.6, 2901.0], [17.7, 2922.0], [17.8, 2925.0], [17.9, 2926.0], [18.0, 2932.0], [18.1, 2934.0], [18.2, 2935.0], [18.3, 2936.0], [18.4, 2936.0], [18.5, 2937.0], [18.6, 2939.0], [18.7, 2939.0], [18.8, 2940.0], [18.9, 2943.0], [19.0, 2976.0], [19.1, 2999.0], [19.2, 3010.0], [19.3, 3027.0], [19.4, 3053.0], [19.5, 3066.0], [19.6, 3075.0], [19.7, 3206.0], [19.8, 3253.0], [19.9, 3286.0], [20.0, 3294.0], [20.1, 3299.0], [20.2, 3303.0], [20.3, 3303.0], [20.4, 3314.0], [20.5, 3314.0], [20.6, 3324.0], [20.7, 3337.0], [20.8, 3341.0], [20.9, 3373.0], [21.0, 3400.0], [21.1, 3415.0], [21.2, 3415.0], [21.3, 3420.0], [21.4, 3424.0], [21.5, 3430.0], [21.6, 3431.0], [21.7, 3432.0], [21.8, 3433.0], [21.9, 3438.0], [22.0, 3442.0], [22.1, 3443.0], [22.2, 3446.0], [22.3, 3448.0], [22.4, 3454.0], [22.5, 3461.0], [22.6, 3462.0], [22.7, 3463.0], [22.8, 3473.0], [22.9, 3475.0], [23.0, 3475.0], [23.1, 3476.0], [23.2, 3481.0], [23.3, 3485.0], [23.4, 3486.0], [23.5, 3489.0], [23.6, 3491.0], [23.7, 3492.0], [23.8, 3495.0], [23.9, 3506.0], [24.0, 3511.0], [24.1, 3515.0], [24.2, 3519.0], [24.3, 3520.0], [24.4, 3524.0], [24.5, 3525.0], [24.6, 3528.0], [24.7, 3531.0], [24.8, 3533.0], [24.9, 3538.0], [25.0, 3547.0], [25.1, 3548.0], [25.2, 3550.0], [25.3, 3552.0], [25.4, 3555.0], [25.5, 3555.0], [25.6, 3560.0], [25.7, 3562.0], [25.8, 3567.0], [25.9, 3573.0], [26.0, 3576.0], [26.1, 3582.0], [26.2, 3604.0], [26.3, 3618.0], [26.4, 3621.0], [26.5, 3626.0], [26.6, 3628.0], [26.7, 3629.0], [26.8, 3634.0], [26.9, 3639.0], [27.0, 3644.0], [27.1, 3645.0], [27.2, 3655.0], [27.3, 3655.0], [27.4, 3663.0], [27.5, 3678.0], [27.6, 3679.0], [27.7, 3683.0], [27.8, 3686.0], [27.9, 3687.0], [28.0, 3695.0], [28.1, 3699.0], [28.2, 3710.0], [28.3, 3711.0], [28.4, 3714.0], [28.5, 3728.0], [28.6, 3729.0], [28.7, 3731.0], [28.8, 3731.0], [28.9, 3735.0], [29.0, 3736.0], [29.1, 3740.0], [29.2, 3741.0], [29.3, 3741.0], [29.4, 3743.0], [29.5, 3753.0], [29.6, 3756.0], [29.7, 3757.0], [29.8, 3763.0], [29.9, 3772.0], [30.0, 3779.0], [30.1, 3780.0], [30.2, 3780.0], [30.3, 3788.0], [30.4, 3790.0], [30.5, 3794.0], [30.6, 3796.0], [30.7, 3798.0], [30.8, 3798.0], [30.9, 3803.0], [31.0, 3864.0], [31.1, 3871.0], [31.2, 3882.0], [31.3, 3884.0], [31.4, 3894.0], [31.5, 3897.0], [31.6, 3897.0], [31.7, 3900.0], [31.8, 3903.0], [31.9, 3908.0], [32.0, 3908.0], [32.1, 3910.0], [32.2, 3910.0], [32.3, 3912.0], [32.4, 3913.0], [32.5, 3928.0], [32.6, 3929.0], [32.7, 3929.0], [32.8, 3930.0], [32.9, 3931.0], [33.0, 3938.0], [33.1, 3943.0], [33.2, 3947.0], [33.3, 3947.0], [33.4, 3950.0], [33.5, 3953.0], [33.6, 3960.0], [33.7, 3970.0], [33.8, 3972.0], [33.9, 3980.0], [34.0, 3983.0], [34.1, 3986.0], [34.2, 3987.0], [34.3, 3989.0], [34.4, 3996.0], [34.5, 3998.0], [34.6, 4002.0], [34.7, 4013.0], [34.8, 4029.0], [34.9, 4030.0], [35.0, 4031.0], [35.1, 4033.0], [35.2, 4036.0], [35.3, 4036.0], [35.4, 4037.0], [35.5, 4038.0], [35.6, 4039.0], [35.7, 4056.0], [35.8, 4057.0], [35.9, 4059.0], [36.0, 4060.0], [36.1, 4067.0], [36.2, 4070.0], [36.3, 4079.0], [36.4, 4092.0], [36.5, 4092.0], [36.6, 4104.0], [36.7, 4105.0], [36.8, 4108.0], [36.9, 4111.0], [37.0, 4120.0], [37.1, 4120.0], [37.2, 4122.0], [37.3, 4126.0], [37.4, 4133.0], [37.5, 4139.0], [37.6, 4152.0], [37.7, 4154.0], [37.8, 4158.0], [37.9, 4168.0], [38.0, 4169.0], [38.1, 4171.0], [38.2, 4206.0], [38.3, 4212.0], [38.4, 4213.0], [38.5, 4215.0], [38.6, 4217.0], [38.7, 4225.0], [38.8, 4232.0], [38.9, 4235.0], [39.0, 4235.0], [39.1, 4240.0], [39.2, 4240.0], [39.3, 4244.0], [39.4, 4253.0], [39.5, 4255.0], [39.6, 4258.0], [39.7, 4258.0], [39.8, 4259.0], [39.9, 4263.0], [40.0, 4263.0], [40.1, 4264.0], [40.2, 4266.0], [40.3, 4267.0], [40.4, 4269.0], [40.5, 4269.0], [40.6, 4269.0], [40.7, 4273.0], [40.8, 4275.0], [40.9, 4278.0], [41.0, 4280.0], [41.1, 4283.0], [41.2, 4309.0], [41.3, 4309.0], [41.4, 4312.0], [41.5, 4314.0], [41.6, 4316.0], [41.7, 4319.0], [41.8, 4321.0], [41.9, 4322.0], [42.0, 4327.0], [42.1, 4330.0], [42.2, 4331.0], [42.3, 4332.0], [42.4, 4334.0], [42.5, 4334.0], [42.6, 4336.0], [42.7, 4342.0], [42.8, 4342.0], [42.9, 4346.0], [43.0, 4347.0], [43.1, 4349.0], [43.2, 4353.0], [43.3, 4357.0], [43.4, 4358.0], [43.5, 4359.0], [43.6, 4360.0], [43.7, 4362.0], [43.8, 4365.0], [43.9, 4368.0], [44.0, 4375.0], [44.1, 4379.0], [44.2, 4385.0], [44.3, 4387.0], [44.4, 4388.0], [44.5, 4393.0], [44.6, 4394.0], [44.7, 4402.0], [44.8, 4405.0], [44.9, 4413.0], [45.0, 4424.0], [45.1, 4425.0], [45.2, 4442.0], [45.3, 4456.0], [45.4, 4461.0], [45.5, 4464.0], [45.6, 4465.0], [45.7, 4477.0], [45.8, 4484.0], [45.9, 4505.0], [46.0, 4516.0], [46.1, 4602.0], [46.2, 4604.0], [46.3, 4653.0], [46.4, 4688.0], [46.5, 4779.0], [46.6, 4826.0], [46.7, 4835.0], [46.8, 4838.0], [46.9, 4838.0], [47.0, 4846.0], [47.1, 4868.0], [47.2, 4879.0], [47.3, 4890.0], [47.4, 4906.0], [47.5, 4925.0], [47.6, 4928.0], [47.7, 4938.0], [47.8, 4939.0], [47.9, 4944.0], [48.0, 4945.0], [48.1, 4952.0], [48.2, 4956.0], [48.3, 4956.0], [48.4, 4957.0], [48.5, 4958.0], [48.6, 4962.0], [48.7, 4963.0], [48.8, 4976.0], [48.9, 4989.0], [49.0, 5006.0], [49.1, 5007.0], [49.2, 5010.0], [49.3, 5016.0], [49.4, 5020.0], [49.5, 5024.0], [49.6, 5028.0], [49.7, 5028.0], [49.8, 5039.0], [49.9, 5054.0], [50.0, 5072.0], [50.1, 5081.0], [50.2, 5081.0], [50.3, 5089.0], [50.4, 5100.0], [50.5, 5105.0], [50.6, 5108.0], [50.7, 5115.0], [50.8, 5136.0], [50.9, 5152.0], [51.0, 5157.0], [51.1, 5184.0], [51.2, 5200.0], [51.3, 5235.0], [51.4, 5251.0], [51.5, 5261.0], [51.6, 5273.0], [51.7, 5279.0], [51.8, 5295.0], [51.9, 5296.0], [52.0, 5304.0], [52.1, 5311.0], [52.2, 5313.0], [52.3, 5324.0], [52.4, 5328.0], [52.5, 5338.0], [52.6, 5338.0], [52.7, 5348.0], [52.8, 5352.0], [52.9, 5354.0], [53.0, 5355.0], [53.1, 5358.0], [53.2, 5362.0], [53.3, 5363.0], [53.4, 5368.0], [53.5, 5382.0], [53.6, 5412.0], [53.7, 5413.0], [53.8, 5422.0], [53.9, 5423.0], [54.0, 5429.0], [54.1, 5437.0], [54.2, 5438.0], [54.3, 5444.0], [54.4, 5444.0], [54.5, 5448.0], [54.6, 5449.0], [54.7, 5451.0], [54.8, 5454.0], [54.9, 5461.0], [55.0, 5466.0], [55.1, 5471.0], [55.2, 5486.0], [55.3, 5491.0], [55.4, 5495.0], [55.5, 5503.0], [55.6, 5504.0], [55.7, 5509.0], [55.8, 5515.0], [55.9, 5517.0], [56.0, 5523.0], [56.1, 5525.0], [56.2, 5529.0], [56.3, 5530.0], [56.4, 5532.0], [56.5, 5533.0], [56.6, 5536.0], [56.7, 5536.0], [56.8, 5540.0], [56.9, 5545.0], [57.0, 5546.0], [57.1, 5553.0], [57.2, 5562.0], [57.3, 5563.0], [57.4, 5564.0], [57.5, 5566.0], [57.6, 5574.0], [57.7, 5575.0], [57.8, 5576.0], [57.9, 5577.0], [58.0, 5580.0], [58.1, 5581.0], [58.2, 5591.0], [58.3, 5598.0], [58.4, 5609.0], [58.5, 5612.0], [58.6, 5613.0], [58.7, 5616.0], [58.8, 5619.0], [58.9, 5635.0], [59.0, 5646.0], [59.1, 5653.0], [59.2, 5675.0], [59.3, 5678.0], [59.4, 5679.0], [59.5, 5690.0], [59.6, 5691.0], [59.7, 5692.0], [59.8, 5711.0], [59.9, 5719.0], [60.0, 5728.0], [60.1, 5735.0], [60.2, 5754.0], [60.3, 5756.0], [60.4, 5768.0], [60.5, 5773.0], [60.6, 5780.0], [60.7, 5802.0], [60.8, 5816.0], [60.9, 5817.0], [61.0, 5817.0], [61.1, 5828.0], [61.2, 5832.0], [61.3, 5834.0], [61.4, 5839.0], [61.5, 5844.0], [61.6, 5862.0], [61.7, 5864.0], [61.8, 5866.0], [61.9, 5870.0], [62.0, 5871.0], [62.1, 5879.0], [62.2, 5879.0], [62.3, 5885.0], [62.4, 5891.0], [62.5, 5897.0], [62.6, 5902.0], [62.7, 5914.0], [62.8, 5925.0], [62.9, 5929.0], [63.0, 5931.0], [63.1, 5936.0], [63.2, 5938.0], [63.3, 5944.0], [63.4, 5950.0], [63.5, 5954.0], [63.6, 5965.0], [63.7, 5966.0], [63.8, 5975.0], [63.9, 5979.0], [64.0, 5980.0], [64.1, 5986.0], [64.2, 5986.0], [64.3, 5987.0], [64.4, 5988.0], [64.5, 5990.0], [64.6, 5991.0], [64.7, 5995.0], [64.8, 5997.0], [64.9, 5999.0], [65.0, 5999.0], [65.1, 6007.0], [65.2, 6009.0], [65.3, 6010.0], [65.4, 6012.0], [65.5, 6020.0], [65.6, 6032.0], [65.7, 6039.0], [65.8, 6045.0], [65.9, 6046.0], [66.0, 6047.0], [66.1, 6073.0], [66.2, 6080.0], [66.3, 6085.0], [66.4, 6105.0], [66.5, 6107.0], [66.6, 6109.0], [66.7, 6128.0], [66.8, 6129.0], [66.9, 6134.0], [67.0, 6134.0], [67.1, 6146.0], [67.2, 6149.0], [67.3, 6150.0], [67.4, 6152.0], [67.5, 6163.0], [67.6, 6181.0], [67.7, 6183.0], [67.8, 6191.0], [67.9, 6193.0], [68.0, 6197.0], [68.1, 6201.0], [68.2, 6216.0], [68.3, 6219.0], [68.4, 6228.0], [68.5, 6228.0], [68.6, 6245.0], [68.7, 6247.0], [68.8, 6265.0], [68.9, 6273.0], [69.0, 6280.0], [69.1, 6281.0], [69.2, 6294.0], [69.3, 6296.0], [69.4, 6297.0], [69.5, 6297.0], [69.6, 6303.0], [69.7, 6304.0], [69.8, 6310.0], [69.9, 6318.0], [70.0, 6336.0], [70.1, 6339.0], [70.2, 6341.0], [70.3, 6346.0], [70.4, 6351.0], [70.5, 6354.0], [70.6, 6360.0], [70.7, 6367.0], [70.8, 6380.0], [70.9, 6385.0], [71.0, 6387.0], [71.1, 6390.0], [71.2, 6397.0], [71.3, 6398.0], [71.4, 6403.0], [71.5, 6404.0], [71.6, 6405.0], [71.7, 6406.0], [71.8, 6408.0], [71.9, 6411.0], [72.0, 6416.0], [72.1, 6424.0], [72.2, 6426.0], [72.3, 6426.0], [72.4, 6429.0], [72.5, 6430.0], [72.6, 6432.0], [72.7, 6432.0], [72.8, 6434.0], [72.9, 6436.0], [73.0, 6437.0], [73.1, 6441.0], [73.2, 6447.0], [73.3, 6448.0], [73.4, 6451.0], [73.5, 6456.0], [73.6, 6457.0], [73.7, 6458.0], [73.8, 6464.0], [73.9, 6465.0], [74.0, 6467.0], [74.1, 6471.0], [74.2, 6473.0], [74.3, 6476.0], [74.4, 6476.0], [74.5, 6491.0], [74.6, 6498.0], [74.7, 6503.0], [74.8, 6503.0], [74.9, 6505.0], [75.0, 6507.0], [75.1, 6508.0], [75.2, 6512.0], [75.3, 6513.0], [75.4, 6516.0], [75.5, 6520.0], [75.6, 6524.0], [75.7, 6524.0], [75.8, 6525.0], [75.9, 6525.0], [76.0, 6526.0], [76.1, 6531.0], [76.2, 6533.0], [76.3, 6538.0], [76.4, 6538.0], [76.5, 6539.0], [76.6, 6546.0], [76.7, 6555.0], [76.8, 6559.0], [76.9, 6561.0], [77.0, 6561.0], [77.1, 6564.0], [77.2, 6570.0], [77.3, 6578.0], [77.4, 6584.0], [77.5, 6594.0], [77.6, 6596.0], [77.7, 6596.0], [77.8, 6601.0], [77.9, 6607.0], [78.0, 6610.0], [78.1, 6610.0], [78.2, 6611.0], [78.3, 6616.0], [78.4, 6621.0], [78.5, 6644.0], [78.6, 6645.0], [78.7, 6649.0], [78.8, 6657.0], [78.9, 6658.0], [79.0, 6659.0], [79.1, 6659.0], [79.2, 6659.0], [79.3, 6659.0], [79.4, 6668.0], [79.5, 6671.0], [79.6, 6671.0], [79.7, 6675.0], [79.8, 6679.0], [79.9, 6679.0], [80.0, 6682.0], [80.1, 6686.0], [80.2, 6697.0], [80.3, 6697.0], [80.4, 6698.0], [80.5, 6698.0], [80.6, 6700.0], [80.7, 6708.0], [80.8, 6709.0], [80.9, 6710.0], [81.0, 6713.0], [81.1, 6714.0], [81.2, 6717.0], [81.3, 6728.0], [81.4, 6738.0], [81.5, 6739.0], [81.6, 6742.0], [81.7, 6742.0], [81.8, 6743.0], [81.9, 6743.0], [82.0, 6746.0], [82.1, 6746.0], [82.2, 6753.0], [82.3, 6755.0], [82.4, 6755.0], [82.5, 6762.0], [82.6, 6765.0], [82.7, 6765.0], [82.8, 6768.0], [82.9, 6778.0], [83.0, 6779.0], [83.1, 6785.0], [83.2, 6788.0], [83.3, 6789.0], [83.4, 6791.0], [83.5, 6799.0], [83.6, 6799.0], [83.7, 6802.0], [83.8, 6804.0], [83.9, 6806.0], [84.0, 6811.0], [84.1, 6814.0], [84.2, 6816.0], [84.3, 6819.0], [84.4, 6825.0], [84.5, 6828.0], [84.6, 6834.0], [84.7, 6839.0], [84.8, 6839.0], [84.9, 6840.0], [85.0, 6848.0], [85.1, 6853.0], [85.2, 6854.0], [85.3, 6880.0], [85.4, 6922.0], [85.5, 7003.0], [85.6, 7042.0], [85.7, 7088.0], [85.8, 7111.0], [85.9, 7112.0], [86.0, 7113.0], [86.1, 7132.0], [86.2, 7139.0], [86.3, 7141.0], [86.4, 7142.0], [86.5, 7145.0], [86.6, 7169.0], [86.7, 7169.0], [86.8, 7178.0], [86.9, 7182.0], [87.0, 7268.0], [87.1, 7318.0], [87.2, 7328.0], [87.3, 7336.0], [87.4, 7350.0], [87.5, 7396.0], [87.6, 7421.0], [87.7, 7435.0], [87.8, 7435.0], [87.9, 7453.0], [88.0, 7454.0], [88.1, 7460.0], [88.2, 7472.0], [88.3, 7476.0], [88.4, 7486.0], [88.5, 7496.0], [88.6, 7556.0], [88.7, 7560.0], [88.8, 7561.0], [88.9, 7573.0], [89.0, 7580.0], [89.1, 7588.0], [89.2, 7593.0], [89.3, 7597.0], [89.4, 7604.0], [89.5, 7619.0], [89.6, 7622.0], [89.7, 7626.0], [89.8, 7631.0], [89.9, 7632.0], [90.0, 7633.0], [90.1, 7649.0], [90.2, 7650.0], [90.3, 7651.0], [90.4, 7656.0], [90.5, 7659.0], [90.6, 7659.0], [90.7, 7665.0], [90.8, 7689.0], [90.9, 7706.0], [91.0, 7718.0], [91.1, 7730.0], [91.2, 7778.0], [91.3, 7801.0], [91.4, 7808.0], [91.5, 7809.0], [91.6, 7813.0], [91.7, 7837.0], [91.8, 7842.0], [91.9, 7847.0], [92.0, 7898.0], [92.1, 7979.0], [92.2, 7994.0], [92.3, 8033.0], [92.4, 8085.0], [92.5, 8093.0], [92.6, 8154.0], [92.7, 8205.0], [92.8, 8206.0], [92.9, 8238.0], [93.0, 8321.0], [93.1, 8380.0], [93.2, 8393.0], [93.3, 8401.0], [93.4, 8405.0], [93.5, 8405.0], [93.6, 8431.0], [93.7, 8437.0], [93.8, 8459.0], [93.9, 8479.0], [94.0, 8486.0], [94.1, 8488.0], [94.2, 8500.0], [94.3, 8501.0], [94.4, 8536.0], [94.5, 8570.0], [94.6, 8576.0], [94.7, 8605.0], [94.8, 8635.0], [94.9, 8684.0], [95.0, 8722.0], [95.1, 8786.0], [95.2, 8870.0], [95.3, 8877.0], [95.4, 8927.0], [95.5, 8946.0], [95.6, 8962.0], [95.7, 8981.0], [95.8, 9027.0], [95.9, 9031.0], [96.0, 9109.0], [96.1, 9117.0], [96.2, 9122.0], [96.3, 9142.0], [96.4, 9196.0], [96.5, 9208.0], [96.6, 9273.0], [96.7, 9305.0], [96.8, 9415.0], [96.9, 9423.0], [97.0, 9440.0], [97.1, 9516.0], [97.2, 9752.0], [97.3, 9800.0], [97.4, 9973.0], [97.5, 10028.0], [97.6, 10036.0], [97.7, 10045.0], [97.8, 10348.0], [97.9, 10398.0], [98.0, 10440.0], [98.1, 10473.0], [98.2, 10487.0], [98.3, 10497.0], [98.4, 10501.0], [98.5, 10554.0], [98.6, 10567.0], [98.7, 10669.0], [98.8, 10705.0], [98.9, 10716.0], [99.0, 10726.0], [99.1, 10767.0], [99.2, 10807.0], [99.3, 10814.0], [99.4, 11205.0], [99.5, 11277.0], [99.6, 11299.0], [99.7, 11331.0], [99.8, 11346.0], [99.9, 12269.0]], "isOverall": false, "label": "Access Animation Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1300.0, "maxY": 52.0, "series": [{"data": [[1300.0, 29.0], [1400.0, 52.0], [1500.0, 22.0], [1600.0, 7.0], [1700.0, 5.0], [1800.0, 1.0], [1900.0, 33.0], [2000.0, 10.0], [2100.0, 3.0], [2300.0, 2.0], [2200.0, 3.0], [2400.0, 2.0], [2600.0, 1.0], [2700.0, 4.0], [2800.0, 2.0], [2900.0, 15.0], [3000.0, 5.0], [3200.0, 5.0], [3300.0, 8.0], [3400.0, 29.0], [3500.0, 23.0], [3600.0, 20.0], [3700.0, 27.0], [3800.0, 8.0], [3900.0, 29.0], [4000.0, 20.0], [4100.0, 16.0], [4200.0, 30.0], [4300.0, 35.0], [4400.0, 12.0], [4600.0, 4.0], [4500.0, 2.0], [4800.0, 8.0], [4700.0, 1.0], [4900.0, 16.0], [5000.0, 14.0], [5100.0, 8.0], [5200.0, 8.0], [5300.0, 16.0], [5400.0, 19.0], [5500.0, 29.0], [5600.0, 14.0], [5700.0, 9.0], [5800.0, 19.0], [5900.0, 25.0], [6000.0, 13.0], [6100.0, 17.0], [6200.0, 15.0], [6300.0, 18.0], [6400.0, 33.0], [6500.0, 31.0], [6600.0, 29.0], [6700.0, 31.0], [6800.0, 17.0], [6900.0, 1.0], [7000.0, 3.0], [7100.0, 12.0], [7200.0, 1.0], [7300.0, 5.0], [7400.0, 10.0], [7500.0, 8.0], [7600.0, 15.0], [7700.0, 4.0], [7800.0, 8.0], [7900.0, 2.0], [8000.0, 3.0], [8100.0, 1.0], [8200.0, 3.0], [8300.0, 3.0], [8400.0, 9.0], [8500.0, 5.0], [8600.0, 3.0], [8700.0, 2.0], [8800.0, 2.0], [8900.0, 4.0], [9000.0, 2.0], [9100.0, 5.0], [9200.0, 2.0], [9300.0, 1.0], [9400.0, 3.0], [9500.0, 1.0], [9700.0, 1.0], [9800.0, 1.0], [9900.0, 1.0], [10000.0, 3.0], [10300.0, 2.0], [10400.0, 4.0], [10500.0, 3.0], [10600.0, 1.0], [10700.0, 4.0], [10800.0, 2.0], [11200.0, 3.0], [11300.0, 2.0], [12200.0, 1.0]], "isOverall": false, "label": "Access Animation Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 12200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 81.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 919.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 81.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 919.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 500.9970000000007, "minX": 1.57139556E12, "maxY": 500.9970000000007, "series": [{"data": [[1.57139556E12, 500.9970000000007]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139556E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1324.0, "minX": 1.0, "maxY": 12269.0, "series": [{"data": [[3.0, 11338.5], [4.0, 11299.0], [5.0, 11277.0], [6.0, 11205.0], [7.0, 10807.0], [8.0, 10814.0], [9.0, 10473.0], [10.0, 10767.0], [11.0, 10487.0], [12.0, 10726.0], [13.0, 10716.0], [14.0, 10398.0], [15.0, 10705.0], [16.0, 10669.0], [17.0, 10567.0], [18.0, 10554.0], [19.0, 10501.0], [20.0, 10497.0], [21.0, 10440.0], [22.0, 9752.0], [23.0, 10348.0], [24.0, 10028.0], [25.0, 10045.0], [26.0, 10036.0], [27.0, 9440.0], [28.0, 9973.0], [29.0, 9800.0], [30.0, 9516.0], [31.0, 9423.0], [33.0, 9305.0], [32.0, 9415.0], [34.0, 9273.0], [37.0, 9122.0], [36.0, 9202.0], [39.0, 8861.0], [41.0, 9109.0], [40.0, 9142.0], [43.0, 9031.0], [42.0, 8635.0], [45.0, 8981.0], [44.0, 9027.0], [47.0, 8927.0], [46.0, 8962.0], [49.0, 8877.0], [48.0, 8946.0], [51.0, 8459.0], [50.0, 8870.0], [53.0, 8722.0], [52.0, 8786.0], [55.0, 8576.0], [54.0, 8684.0], [57.0, 8536.0], [56.0, 8570.0], [59.0, 8500.5], [61.0, 8486.0], [60.0, 8488.0], [63.0, 8479.0], [62.0, 7898.0], [67.0, 8405.0], [66.0, 8437.0], [65.0, 8405.0], [64.0, 8431.0], [71.0, 7809.0], [70.0, 8393.0], [69.0, 8380.0], [68.0, 8401.0], [75.0, 8206.0], [74.0, 8205.0], [73.0, 8238.0], [72.0, 8321.0], [79.0, 8093.0], [78.0, 8085.0], [77.0, 8154.0], [76.0, 7597.0], [83.0, 7593.0], [82.0, 7979.0], [81.0, 7994.0], [80.0, 8033.0], [87.0, 7813.0], [86.0, 7847.0], [85.0, 7837.0], [84.0, 7842.0], [90.0, 7808.0], [89.0, 7472.0], [88.0, 7801.0], [95.0, 7718.0], [94.0, 7730.0], [93.0, 7328.0], [92.0, 7557.0], [98.0, 7659.0], [97.0, 7697.5], [107.0, 7631.0], [106.0, 7629.5], [104.0, 7655.0], [111.0, 7604.0], [110.0, 7619.0], [109.0, 7627.0], [115.0, 7573.0], [114.0, 7560.0], [113.0, 7561.0], [112.0, 7588.0], [119.0, 7476.0], [118.0, 7113.0], [117.0, 7580.0], [116.0, 7556.0], [122.0, 7460.0], [121.0, 7491.0], [127.0, 7435.0], [126.0, 7435.0], [125.0, 7453.0], [124.0, 7402.0], [135.0, 7182.0], [134.0, 6607.0], [133.0, 6765.0], [132.0, 6789.0], [131.0, 7268.0], [130.0, 7318.0], [129.0, 7396.0], [128.0, 7421.0], [143.0, 7141.0], [142.0, 6765.0], [141.0, 6947.333333333333], [138.0, 6840.0], [137.0, 7169.0], [136.0, 7178.0], [151.0, 7088.0], [150.0, 7111.0], [149.0, 7112.0], [148.0, 7132.0], [147.0, 6539.0], [146.0, 7142.0], [145.0, 7139.0], [144.0, 7145.0], [159.0, 6561.0], [158.0, 6561.0], [157.0, 6922.0], [156.0, 6513.0], [155.0, 6533.0], [154.0, 7003.0], [153.0, 7042.0], [152.0, 6601.0], [166.0, 6841.0], [164.0, 6825.0], [163.0, 6503.0], [162.0, 6848.0], [161.0, 6853.0], [160.0, 6880.0], [175.0, 6799.0], [174.0, 6819.0], [171.0, 6819.0], [170.0, 6654.5], [168.0, 6710.5], [183.0, 6479.0], [180.0, 6785.0], [179.0, 6499.5], [177.0, 6788.0], [176.0, 6806.0], [191.0, 6447.0], [190.0, 6750.5], [188.0, 6451.0], [187.0, 6768.0], [186.0, 6720.0], [196.0, 6738.0], [195.0, 6757.0], [206.0, 6647.5], [202.0, 6689.333333333334], [215.0, 6698.0], [213.0, 6397.0], [212.0, 6700.0], [211.0, 6709.0], [210.0, 6717.0], [209.0, 6713.0], [208.0, 6548.5], [222.0, 6686.0], [221.0, 6687.0], [217.0, 6698.0], [227.0, 6659.0], [226.0, 6671.0], [225.0, 6668.0], [224.0, 6675.0], [239.0, 6621.0], [238.0, 6616.0], [237.0, 6341.0], [236.0, 6658.0], [235.0, 6608.2], [234.0, 6659.0], [232.0, 6645.0], [247.0, 6578.0], [246.0, 6596.0], [245.0, 6339.0], [244.0, 6594.0], [243.0, 6596.0], [242.0, 6610.0], [241.0, 6610.5], [255.0, 6531.0], [254.0, 6538.0], [253.0, 6546.0], [252.0, 6559.0], [251.0, 6584.0], [250.0, 6445.5], [248.0, 6564.0], [259.0, 6525.0], [269.0, 6508.0], [270.0, 6491.0], [268.0, 6506.666666666667], [265.0, 6524.0], [264.0, 6245.0], [263.0, 6520.0], [261.0, 6520.0], [260.0, 6525.0], [258.0, 6247.0], [257.0, 6538.0], [256.0, 6526.0], [285.0, 6436.0], [286.0, 6441.0], [284.0, 6448.0], [275.0, 6464.0], [274.0, 6476.0], [273.0, 6507.0], [272.0, 5988.5], [283.0, 6437.0], [282.0, 6457.0], [280.0, 6473.0], [279.0, 6457.0], [278.0, 6471.0], [277.0, 6471.5], [302.0, 6385.0], [303.0, 6360.0], [301.0, 6403.0], [300.0, 6390.0], [299.0, 6405.0], [298.0, 6398.0], [297.0, 5879.0], [296.0, 6406.0], [295.0, 6426.0], [289.0, 6434.0], [288.0, 6425.0], [291.0, 6429.0], [290.0, 6430.0], [294.0, 6416.0], [293.0, 6420.0], [317.0, 6294.0], [318.0, 6280.0], [316.0, 6297.0], [307.0, 6365.5], [305.0, 6354.0], [304.0, 6367.0], [315.0, 5997.0], [314.0, 6297.0], [313.0, 6304.0], [312.0, 6296.0], [311.0, 6310.0], [310.0, 5817.0], [309.0, 6318.0], [308.0, 6346.0], [334.0, 5828.0], [335.0, 6146.0], [333.0, 6173.0], [323.0, 6228.0], [322.0, 6265.0], [321.0, 6285.666666666667], [331.0, 6080.0], [330.0, 5691.0], [329.0, 6186.0], [327.0, 6201.0], [326.0, 6228.0], [325.0, 6216.0], [324.0, 6219.0], [349.0, 5444.0], [350.0, 5451.0], [348.0, 5780.0], [339.0, 6128.0], [338.0, 6134.0], [337.0, 6152.0], [336.0, 6150.0], [347.0, 6085.0], [346.0, 6073.0], [345.0, 6105.0], [344.0, 6109.0], [343.0, 6134.0], [342.0, 6107.0], [341.0, 6149.0], [340.0, 6129.0], [365.0, 5577.0], [366.0, 5574.0], [364.0, 6012.0], [355.0, 5839.0], [353.0, 6045.0], [352.0, 6043.0], [363.0, 5999.0], [362.0, 6009.0], [361.0, 6020.0], [360.0, 6007.0], [359.0, 5562.0], [358.0, 5735.0], [357.0, 6046.0], [356.0, 5517.0], [382.0, 5966.0], [383.0, 5965.0], [381.0, 5598.0], [380.0, 5566.0], [379.0, 5991.0], [378.0, 5988.0], [377.0, 5990.333333333333], [374.0, 5580.0], [371.0, 5999.0], [370.0, 5785.5], [368.0, 5783.5], [373.0, 5979.5], [398.0, 5870.0], [399.0, 5885.0], [397.0, 5891.0], [396.0, 5879.0], [395.0, 5902.0], [394.0, 5897.0], [393.0, 5800.0], [391.0, 5914.0], [385.0, 5950.0], [384.0, 5944.0], [387.0, 5936.0], [386.0, 5954.0], [390.0, 5929.0], [389.0, 5934.5], [414.0, 5773.0], [415.0, 5348.0], [413.0, 5461.0], [412.0, 5546.0], [411.0, 5802.0], [410.0, 5816.0], [409.0, 5834.0], [408.0, 5817.0], [407.0, 5580.0], [401.0, 5871.0], [400.0, 5862.0], [403.0, 5864.0], [402.0, 5866.0], [405.0, 5839.0], [404.0, 5844.0], [430.0, 5678.0], [431.0, 5690.0], [429.0, 5561.5], [419.0, 5768.0], [418.0, 5756.0], [417.0, 5324.0], [416.0, 5362.0], [427.0, 5313.0], [426.0, 5711.0], [425.0, 5692.0], [424.0, 5200.0], [423.0, 5719.0], [422.0, 5728.0], [421.0, 5754.0], [420.0, 5466.0], [446.0, 5279.0], [447.0, 5273.0], [445.0, 5591.0], [444.0, 5490.5], [442.0, 5609.0], [441.0, 5612.0], [440.0, 5616.0], [439.0, 5478.5], [433.0, 5551.0], [435.0, 5382.0], [434.0, 5358.0], [437.0, 5338.0], [436.0, 5635.0], [463.0, 5519.0], [461.0, 5272.5], [451.0, 5563.0], [450.0, 5575.0], [449.0, 5564.0], [448.0, 5235.0], [459.0, 5532.0], [458.0, 5533.0], [457.0, 5530.0], [456.0, 5157.0], [455.0, 5540.0], [454.0, 5536.0], [452.0, 5553.0], [478.0, 5437.0], [479.0, 5412.0], [477.0, 5423.0], [476.0, 5429.0], [475.0, 5448.0], [474.0, 5438.0], [473.0, 5454.0], [472.0, 5486.0], [471.0, 5471.0], [465.0, 5515.0], [464.0, 5545.0], [467.0, 5523.0], [466.0, 5503.0], [470.0, 5491.0], [469.0, 5504.0], [468.0, 5495.0], [493.0, 5024.0], [494.0, 5296.0], [492.0, 5295.0], [483.0, 5352.0], [482.0, 5422.0], [481.0, 4879.0], [480.0, 5413.0], [491.0, 5169.5], [489.0, 5304.0], [488.0, 5355.0], [487.0, 5016.0], [486.0, 4868.0], [485.0, 5354.0], [484.0, 5363.0], [510.0, 5072.0], [511.0, 4477.0], [509.0, 5081.0], [508.0, 4779.0], [507.0, 5081.0], [506.0, 5100.0], [505.0, 5105.0], [504.0, 5089.0], [503.0, 5125.5], [497.0, 5006.0], [496.0, 5256.0], [499.0, 5184.0], [498.0, 4906.0], [501.0, 5108.0], [500.0, 5152.0], [537.0, 4939.0], [542.0, 4677.0], [543.0, 4653.0], [528.0, 4956.0], [531.0, 4658.5], [529.0, 4958.0], [533.0, 4938.0], [532.0, 4962.0], [540.0, 4484.0], [539.0, 4516.0], [538.0, 4925.0], [536.0, 4944.0], [519.0, 4998.0], [517.0, 4688.0], [516.0, 5028.0], [515.0, 5010.0], [514.0, 4505.0], [513.0, 5039.0], [512.0, 5054.0], [527.0, 4956.0], [526.0, 4957.0], [525.0, 4963.0], [524.0, 4976.0], [523.0, 4387.0], [522.0, 4394.0], [521.0, 4498.5], [535.0, 4945.0], [534.0, 4928.0], [569.0, 4316.0], [574.0, 4104.0], [575.0, 4168.0], [561.0, 4346.0], [560.0, 4336.0], [563.0, 4332.0], [562.0, 4347.0], [565.0, 4334.0], [564.0, 4331.0], [573.0, 4309.0], [572.0, 4309.0], [571.0, 4218.0], [568.0, 4319.0], [551.0, 4258.0], [550.0, 4846.0], [549.0, 4424.0], [548.0, 4263.0], [547.0, 4264.0], [546.0, 4275.0], [545.0, 4602.0], [544.0, 4278.0], [559.0, 4327.5], [558.0, 4312.0], [556.0, 4838.0], [555.0, 4835.0], [554.0, 4826.0], [553.0, 4838.0], [552.0, 4263.0], [567.0, 4327.0], [566.0, 4322.0], [601.0, 4197.5], [606.0, 4160.5], [607.0, 3897.0], [593.0, 3980.0], [592.0, 3996.0], [604.0, 4425.0], [603.0, 4442.0], [602.0, 4111.0], [591.0, 4206.0], [577.0, 4266.5], [579.0, 4259.0], [578.0, 4258.0], [581.0, 4092.0], [580.0, 4255.0], [583.0, 4240.0], [582.0, 4244.0], [590.0, 4212.0], [589.0, 4215.0], [588.0, 4217.0], [587.0, 4225.0], [586.0, 4029.0], [585.0, 4232.0], [584.0, 4235.0], [599.0, 4288.0], [597.0, 4461.0], [596.0, 3894.0], [595.0, 4091.5], [638.0, 4342.0], [639.0, 3977.6], [636.0, 4200.0], [615.0, 4188.5], [613.0, 4059.0], [612.0, 4405.0], [611.0, 4286.5], [609.0, 4070.0], [608.0, 3908.0], [631.0, 4351.0], [629.0, 4350.5], [627.0, 4154.0], [626.0, 4291.0], [623.0, 4372.5], [621.0, 4269.0], [620.0, 4388.0], [619.0, 4037.5], [617.0, 4371.5], [670.0, 3667.5], [660.0, 3987.0], [671.0, 3714.0], [657.0, 3772.0], [656.0, 3780.0], [659.0, 3796.0], [658.0, 3763.0], [668.0, 3613.3333333333335], [665.0, 3803.0], [664.0, 3972.0], [646.0, 3794.0], [645.0, 4280.0], [644.0, 3950.0], [643.0, 3983.0], [642.0, 4271.0], [640.0, 4283.0], [655.0, 4013.0], [654.0, 3929.0], [653.0, 3645.0], [652.0, 4235.0], [651.0, 3790.0], [650.0, 4240.0], [649.0, 3912.0], [648.0, 4261.0], [663.0, 3741.0], [662.0, 4169.0], [661.0, 3756.0], [696.0, 3567.0], [702.0, 3738.0], [703.0, 3740.0], [690.0, 4064.0], [688.0, 4060.0], [700.0, 3632.0], [698.0, 3576.0], [697.0, 3562.0], [686.0, 4067.0], [673.0, 4133.0], [672.0, 4152.0], [675.0, 4120.0], [674.0, 3618.0], [677.0, 4108.0], [676.0, 4126.0], [679.0, 3788.0], [678.0, 4139.0], [685.0, 3475.0], [684.0, 3798.0], [683.0, 4105.0], [682.0, 4092.0], [681.0, 3743.0], [680.0, 3757.0], [695.0, 3555.0], [694.0, 4030.0], [693.0, 4031.0], [692.0, 4036.5], [731.0, 3909.6666666666665], [722.0, 3626.0], [733.0, 3871.0], [734.0, 3882.0], [721.0, 3780.0], [732.0, 3913.0], [728.0, 3900.0], [711.0, 3628.0], [710.0, 3819.5], [708.0, 3711.0], [707.0, 3994.0], [705.0, 3679.0], [704.0, 3989.0], [719.0, 3960.0], [718.0, 3731.0], [717.0, 3945.0], [715.0, 3942.5], [713.0, 3729.0], [712.0, 3695.0], [727.0, 3919.0], [725.0, 3683.0], [724.0, 3487.0], [760.0, 3699.0], [764.0, 3639.0], [765.0, 3644.0], [753.0, 3492.0], [752.0, 3386.5], [755.0, 3753.0], [754.0, 3442.0], [763.0, 3655.0], [762.0, 3678.0], [761.0, 3663.0], [750.0, 3337.0], [736.0, 3759.5], [738.0, 3286.0], [737.0, 3520.0], [740.0, 3476.0], [739.0, 3550.0], [743.0, 3301.0], [742.0, 3294.0], [749.0, 3412.5], [747.0, 3556.0], [745.0, 3404.5], [759.0, 3687.0], [758.0, 3710.0], [757.0, 3486.0], [756.0, 3779.0], [792.0, 3448.0], [797.0, 3430.5], [798.0, 3424.0], [784.0, 3481.0], [786.0, 3475.0], [785.0, 3473.0], [795.0, 3433.0], [794.0, 3438.0], [793.0, 3443.0], [783.0, 3491.0], [768.0, 3619.6666666666665], [770.0, 3573.0], [769.0, 3582.0], [773.0, 3547.0], [772.0, 3262.0], [775.0, 3533.0], [774.0, 3531.0], [782.0, 3495.0], [781.0, 3206.0], [780.0, 3524.0], [779.0, 3515.0], [778.0, 3519.0], [777.0, 3525.0], [776.0, 3538.0], [791.0, 3450.0], [789.0, 3463.0], [788.0, 3462.0], [787.0, 3461.0], [828.0, 2726.0], [831.0, 2262.0], [817.0, 2941.5], [820.0, 3066.0], [819.0, 3040.0], [830.0, 2262.0], [829.0, 2710.0], [827.0, 2999.0], [826.0, 2765.0], [825.0, 3253.0], [824.0, 3010.0], [815.0, 2938.0], [801.0, 2894.0], [800.0, 3415.0], [803.0, 3432.0], [802.0, 2893.0], [806.0, 2913.5], [805.0, 3420.0], [813.0, 2934.0], [812.0, 2936.0], [809.0, 2932.0], [808.0, 2923.5], [823.0, 3332.5], [821.0, 3075.0], [860.0, 1936.0], [863.0, 1930.0], [849.0, 1965.0], [848.0, 1975.0], [851.0, 1966.0], [850.0, 1966.0], [853.0, 1959.0], [852.0, 1960.0], [862.0, 1927.0], [861.0, 1929.0], [859.0, 1934.0], [858.0, 1947.0], [857.0, 1942.0], [856.0, 1944.0], [847.0, 1977.0], [833.0, 2746.0], [832.0, 2258.0], [835.0, 2177.0], [834.0, 2181.0], [837.0, 2646.0], [836.0, 2164.0], [839.0, 2052.0], [838.0, 2057.0], [846.0, 1951.0], [845.0, 1976.0], [844.0, 1996.0], [843.0, 2000.0], [842.0, 2076.0], [841.0, 2041.0], [840.0, 2047.0], [855.0, 1954.0], [854.0, 2460.0], [892.0, 1490.0], [895.0, 1481.0], [880.0, 1953.0], [883.0, 2324.0], [882.0, 1997.5], [885.0, 1803.0], [884.0, 1978.0], [894.0, 1480.0], [893.0, 1488.0], [891.0, 1495.0], [890.0, 1493.0], [889.0, 1490.0], [888.0, 1775.0], [879.0, 2006.3333333333333], [865.0, 1920.0], [864.0, 2409.0], [867.0, 1918.0], [866.0, 1921.0], [869.0, 1936.0], [868.0, 1920.0], [871.0, 1914.0], [870.0, 1921.0], [876.0, 2335.0], [875.0, 2017.0], [874.0, 1924.0], [873.0, 1910.0], [872.0, 1915.0], [887.0, 1781.0], [886.0, 1772.0], [924.0, 1390.0], [927.0, 1383.0], [913.0, 1383.0], [912.0, 1540.5], [915.0, 1412.0], [914.0, 1415.0], [917.0, 1639.0], [916.0, 1667.0], [926.0, 1385.0], [925.0, 1389.0], [923.0, 1616.0], [922.0, 1621.0], [921.0, 1397.0], [920.0, 1400.0], [910.0, 1411.5], [897.0, 1730.0], [896.0, 1732.0], [899.0, 1470.0], [898.0, 1469.0], [901.0, 1425.0], [900.0, 1460.0], [903.0, 1692.0], [902.0, 1453.0], [908.0, 1432.0], [907.0, 1680.0], [906.0, 1439.0], [905.0, 1405.0], [904.0, 1446.0], [919.0, 1401.0], [918.0, 1404.0], [934.0, 1586.0], [954.0, 1517.0], [955.0, 1525.25], [953.0, 1515.0], [952.0, 1533.5], [951.0, 1522.0], [945.0, 1528.0], [944.0, 1535.0], [943.0, 1337.0], [928.0, 1376.0], [931.0, 1581.0], [930.0, 1375.0], [933.0, 1571.0], [932.0, 1366.0], [935.0, 1565.0], [942.0, 1531.0], [941.0, 1548.0], [940.0, 1544.0], [939.0, 1346.5], [937.0, 1348.0], [936.0, 1353.0], [988.0, 1383.0], [989.0, 1367.0], [987.0, 1417.0], [986.0, 1427.5], [984.0, 1424.0], [982.0, 1474.5], [980.0, 1478.0], [978.0, 1482.769230769231], [976.0, 1497.0], [970.0, 1471.0], [963.0, 1496.0], [961.0, 1484.0], [967.0, 1475.0], [1000.0, 1324.0], [999.0, 1338.0], [998.0, 1325.0], [997.0, 1330.0], [996.0, 1342.0], [995.0, 1351.0], [994.0, 1354.0], [993.0, 1357.0], [992.0, 1366.3333333333333], [1.0, 12269.0]], "isOverall": false, "label": "Access Animation Page", "isController": false}, {"data": [[500.9970000000007, 4994.177999999999]], "isOverall": false, "label": "Access Animation Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3850.0, "minX": 1.57139556E12, "maxY": 131442.8, "series": [{"data": [[1.57139556E12, 131442.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57139556E12, 3850.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139556E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4994.177999999999, "minX": 1.57139556E12, "maxY": 4994.177999999999, "series": [{"data": [[1.57139556E12, 4994.177999999999]], "isOverall": false, "label": "Access Animation Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139556E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2934.751000000001, "minX": 1.57139556E12, "maxY": 2934.751000000001, "series": [{"data": [[1.57139556E12, 2934.751000000001]], "isOverall": false, "label": "Access Animation Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139556E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1615.227000000001, "minX": 1.57139556E12, "maxY": 1615.227000000001, "series": [{"data": [[1.57139556E12, 1615.227000000001]], "isOverall": false, "label": "Access Animation Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139556E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1324.0, "minX": 1.57139556E12, "maxY": 12269.0, "series": [{"data": [[1.57139556E12, 12269.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57139556E12, 1324.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57139556E12, 7632.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57139556E12, 10725.9]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57139556E12, 8720.099999999997]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139556E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1471.5, "minX": 1.0, "maxY": 12269.0, "series": [{"data": [[65.0, 7588.0], [1.0, 12269.0], [18.0, 10527.5], [155.0, 3555.0], [165.0, 5598.0], [40.0, 8518.5], [5.0, 11299.0], [170.0, 4315.0], [194.0, 6535.5], [12.0, 9431.5], [116.0, 1471.5], [59.0, 1976.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 194.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 672.0, "minX": 1.0, "maxY": 12025.0, "series": [{"data": [[65.0, 4905.0], [1.0, 12025.0], [18.0, 3126.0], [155.0, 2116.0], [165.0, 2917.0], [40.0, 3237.5], [5.0, 11044.0], [170.0, 3289.5], [194.0, 3328.0], [12.0, 3034.0], [116.0, 672.0], [59.0, 1496.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 194.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57139556E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57139556E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139556E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57139556E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57139556E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139556E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57139556E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57139556E12, 16.666666666666668]], "isOverall": false, "label": "Access Animation Page-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139556E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57139556E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57139556E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139556E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

