/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2653.0, "minX": 0.0, "maxY": 45750.0, "series": [{"data": [[0.0, 2653.0], [0.1, 2832.0], [0.2, 2851.0], [0.3, 3007.0], [0.4, 3023.0], [0.5, 3049.0], [0.6, 3058.0], [0.7, 3065.0], [0.8, 3069.0], [0.9, 3075.0], [1.0, 3093.0], [1.1, 3166.0], [1.2, 3167.0], [1.3, 3192.0], [1.4, 3233.0], [1.5, 3271.0], [1.6, 3297.0], [1.7, 3315.0], [1.8, 3328.0], [1.9, 3328.0], [2.0, 3332.0], [2.1, 3355.0], [2.2, 3374.0], [2.3, 3442.0], [2.4, 3625.0], [2.5, 3846.0], [2.6, 3855.0], [2.7, 3896.0], [2.8, 3903.0], [2.9, 3917.0], [3.0, 4011.0], [3.1, 4137.0], [3.2, 4166.0], [3.3, 4223.0], [3.4, 4300.0], [3.5, 4388.0], [3.6, 4396.0], [3.7, 4443.0], [3.8, 4500.0], [3.9, 4656.0], [4.0, 4671.0], [4.1, 4696.0], [4.2, 4756.0], [4.3, 4792.0], [4.4, 4827.0], [4.5, 4994.0], [4.6, 5029.0], [4.7, 5049.0], [4.8, 5092.0], [4.9, 5148.0], [5.0, 5197.0], [5.1, 5202.0], [5.2, 5213.0], [5.3, 5216.0], [5.4, 5227.0], [5.5, 5244.0], [5.6, 5251.0], [5.7, 5325.0], [5.8, 5473.0], [5.9, 5484.0], [6.0, 5491.0], [6.1, 5528.0], [6.2, 5547.0], [6.3, 5561.0], [6.4, 5589.0], [6.5, 5604.0], [6.6, 5619.0], [6.7, 5648.0], [6.8, 5653.0], [6.9, 5658.0], [7.0, 5667.0], [7.1, 5673.0], [7.2, 5681.0], [7.3, 5684.0], [7.4, 5707.0], [7.5, 5709.0], [7.6, 5716.0], [7.7, 5727.0], [7.8, 5744.0], [7.9, 5755.0], [8.0, 5778.0], [8.1, 5791.0], [8.2, 5803.0], [8.3, 5823.0], [8.4, 5829.0], [8.5, 5835.0], [8.6, 5845.0], [8.7, 5854.0], [8.8, 5864.0], [8.9, 5874.0], [9.0, 5881.0], [9.1, 5888.0], [9.2, 5896.0], [9.3, 5897.0], [9.4, 5901.0], [9.5, 5906.0], [9.6, 5914.0], [9.7, 5916.0], [9.8, 5920.0], [9.9, 5927.0], [10.0, 5938.0], [10.1, 5946.0], [10.2, 5949.0], [10.3, 5957.0], [10.4, 5985.0], [10.5, 5991.0], [10.6, 5997.0], [10.7, 5999.0], [10.8, 6023.0], [10.9, 6034.0], [11.0, 6041.0], [11.1, 6045.0], [11.2, 6059.0], [11.3, 6085.0], [11.4, 6086.0], [11.5, 6088.0], [11.6, 6107.0], [11.7, 6112.0], [11.8, 6115.0], [11.9, 6121.0], [12.0, 6138.0], [12.1, 6145.0], [12.2, 6147.0], [12.3, 6148.0], [12.4, 6151.0], [12.5, 6157.0], [12.6, 6163.0], [12.7, 6167.0], [12.8, 6172.0], [12.9, 6182.0], [13.0, 6187.0], [13.1, 6218.0], [13.2, 6223.0], [13.3, 6229.0], [13.4, 6248.0], [13.5, 6252.0], [13.6, 6270.0], [13.7, 6277.0], [13.8, 6288.0], [13.9, 6321.0], [14.0, 6337.0], [14.1, 6344.0], [14.2, 6363.0], [14.3, 6375.0], [14.4, 6389.0], [14.5, 6395.0], [14.6, 6408.0], [14.7, 6413.0], [14.8, 6418.0], [14.9, 6439.0], [15.0, 6442.0], [15.1, 6459.0], [15.2, 6462.0], [15.3, 6465.0], [15.4, 6466.0], [15.5, 6478.0], [15.6, 6489.0], [15.7, 6511.0], [15.8, 6519.0], [15.9, 6538.0], [16.0, 6550.0], [16.1, 6567.0], [16.2, 6572.0], [16.3, 6579.0], [16.4, 6599.0], [16.5, 6620.0], [16.6, 6662.0], [16.7, 6671.0], [16.8, 6713.0], [16.9, 6722.0], [17.0, 6727.0], [17.1, 6750.0], [17.2, 6769.0], [17.3, 6812.0], [17.4, 6827.0], [17.5, 6828.0], [17.6, 6863.0], [17.7, 6870.0], [17.8, 6891.0], [17.9, 6919.0], [18.0, 6938.0], [18.1, 6976.0], [18.2, 6984.0], [18.3, 7019.0], [18.4, 7051.0], [18.5, 7059.0], [18.6, 7066.0], [18.7, 7067.0], [18.8, 7076.0], [18.9, 7084.0], [19.0, 7087.0], [19.1, 7108.0], [19.2, 7117.0], [19.3, 7119.0], [19.4, 7130.0], [19.5, 7134.0], [19.6, 7143.0], [19.7, 7153.0], [19.8, 7166.0], [19.9, 7173.0], [20.0, 7185.0], [20.1, 7194.0], [20.2, 7197.0], [20.3, 7257.0], [20.4, 7279.0], [20.5, 7310.0], [20.6, 7338.0], [20.7, 7364.0], [20.8, 7382.0], [20.9, 7394.0], [21.0, 7405.0], [21.1, 7420.0], [21.2, 7428.0], [21.3, 7432.0], [21.4, 7466.0], [21.5, 7473.0], [21.6, 7479.0], [21.7, 7485.0], [21.8, 7489.0], [21.9, 7500.0], [22.0, 7504.0], [22.1, 7514.0], [22.2, 7533.0], [22.3, 7557.0], [22.4, 7568.0], [22.5, 7579.0], [22.6, 7594.0], [22.7, 7601.0], [22.8, 7615.0], [22.9, 7622.0], [23.0, 7643.0], [23.1, 7659.0], [23.2, 7723.0], [23.3, 7778.0], [23.4, 7791.0], [23.5, 7801.0], [23.6, 7817.0], [23.7, 7824.0], [23.8, 7858.0], [23.9, 7862.0], [24.0, 7887.0], [24.1, 7904.0], [24.2, 7909.0], [24.3, 7954.0], [24.4, 7979.0], [24.5, 7996.0], [24.6, 8007.0], [24.7, 8018.0], [24.8, 8021.0], [24.9, 8024.0], [25.0, 8033.0], [25.1, 8047.0], [25.2, 8055.0], [25.3, 8063.0], [25.4, 8078.0], [25.5, 8085.0], [25.6, 8092.0], [25.7, 8102.0], [25.8, 8115.0], [25.9, 8158.0], [26.0, 8160.0], [26.1, 8172.0], [26.2, 8199.0], [26.3, 8219.0], [26.4, 8282.0], [26.5, 8294.0], [26.6, 8298.0], [26.7, 8300.0], [26.8, 8309.0], [26.9, 8316.0], [27.0, 8320.0], [27.1, 8328.0], [27.2, 8330.0], [27.3, 8334.0], [27.4, 8338.0], [27.5, 8341.0], [27.6, 8347.0], [27.7, 8352.0], [27.8, 8364.0], [27.9, 8366.0], [28.0, 8370.0], [28.1, 8375.0], [28.2, 8383.0], [28.3, 8385.0], [28.4, 8387.0], [28.5, 8390.0], [28.6, 8392.0], [28.7, 8401.0], [28.8, 8406.0], [28.9, 8413.0], [29.0, 8416.0], [29.1, 8420.0], [29.2, 8421.0], [29.3, 8434.0], [29.4, 8438.0], [29.5, 8445.0], [29.6, 8455.0], [29.7, 8467.0], [29.8, 8471.0], [29.9, 8475.0], [30.0, 8481.0], [30.1, 8483.0], [30.2, 8485.0], [30.3, 8497.0], [30.4, 8500.0], [30.5, 8509.0], [30.6, 8524.0], [30.7, 8527.0], [30.8, 8537.0], [30.9, 8549.0], [31.0, 8552.0], [31.1, 8561.0], [31.2, 8573.0], [31.3, 8576.0], [31.4, 8586.0], [31.5, 8617.0], [31.6, 8622.0], [31.7, 8630.0], [31.8, 8644.0], [31.9, 8647.0], [32.0, 8665.0], [32.1, 8679.0], [32.2, 8681.0], [32.3, 8684.0], [32.4, 8700.0], [32.5, 8710.0], [32.6, 8716.0], [32.7, 8724.0], [32.8, 8735.0], [32.9, 8757.0], [33.0, 8765.0], [33.1, 8776.0], [33.2, 8782.0], [33.3, 8795.0], [33.4, 8797.0], [33.5, 8803.0], [33.6, 8815.0], [33.7, 8819.0], [33.8, 8840.0], [33.9, 8846.0], [34.0, 8848.0], [34.1, 8865.0], [34.2, 8869.0], [34.3, 8883.0], [34.4, 8895.0], [34.5, 8914.0], [34.6, 8916.0], [34.7, 8920.0], [34.8, 8927.0], [34.9, 8932.0], [35.0, 8941.0], [35.1, 8946.0], [35.2, 8963.0], [35.3, 8971.0], [35.4, 8977.0], [35.5, 8981.0], [35.6, 8995.0], [35.7, 9003.0], [35.8, 9003.0], [35.9, 9013.0], [36.0, 9022.0], [36.1, 9027.0], [36.2, 9032.0], [36.3, 9037.0], [36.4, 9038.0], [36.5, 9045.0], [36.6, 9052.0], [36.7, 9055.0], [36.8, 9057.0], [36.9, 9069.0], [37.0, 9077.0], [37.1, 9079.0], [37.2, 9084.0], [37.3, 9106.0], [37.4, 9108.0], [37.5, 9115.0], [37.6, 9126.0], [37.7, 9145.0], [37.8, 9157.0], [37.9, 9161.0], [38.0, 9163.0], [38.1, 9168.0], [38.2, 9173.0], [38.3, 9177.0], [38.4, 9179.0], [38.5, 9204.0], [38.6, 9208.0], [38.7, 9210.0], [38.8, 9216.0], [38.9, 9219.0], [39.0, 9229.0], [39.1, 9232.0], [39.2, 9239.0], [39.3, 9241.0], [39.4, 9245.0], [39.5, 9255.0], [39.6, 9273.0], [39.7, 9274.0], [39.8, 9277.0], [39.9, 9282.0], [40.0, 9289.0], [40.1, 9293.0], [40.2, 9295.0], [40.3, 9297.0], [40.4, 9316.0], [40.5, 9322.0], [40.6, 9339.0], [40.7, 9341.0], [40.8, 9342.0], [40.9, 9351.0], [41.0, 9359.0], [41.1, 9363.0], [41.2, 9366.0], [41.3, 9370.0], [41.4, 9375.0], [41.5, 9377.0], [41.6, 9382.0], [41.7, 9387.0], [41.8, 9403.0], [41.9, 9406.0], [42.0, 9407.0], [42.1, 9427.0], [42.2, 9432.0], [42.3, 9437.0], [42.4, 9440.0], [42.5, 9453.0], [42.6, 9457.0], [42.7, 9468.0], [42.8, 9473.0], [42.9, 9475.0], [43.0, 9477.0], [43.1, 9480.0], [43.2, 9482.0], [43.3, 9485.0], [43.4, 9486.0], [43.5, 9489.0], [43.6, 9490.0], [43.7, 9496.0], [43.8, 9500.0], [43.9, 9502.0], [44.0, 9516.0], [44.1, 9522.0], [44.2, 9532.0], [44.3, 9551.0], [44.4, 9558.0], [44.5, 9572.0], [44.6, 9575.0], [44.7, 9578.0], [44.8, 9581.0], [44.9, 9597.0], [45.0, 9599.0], [45.1, 9605.0], [45.2, 9607.0], [45.3, 9612.0], [45.4, 9613.0], [45.5, 9621.0], [45.6, 9636.0], [45.7, 9637.0], [45.8, 9646.0], [45.9, 9651.0], [46.0, 9659.0], [46.1, 9662.0], [46.2, 9671.0], [46.3, 9673.0], [46.4, 9678.0], [46.5, 9688.0], [46.6, 9694.0], [46.7, 9698.0], [46.8, 9714.0], [46.9, 9722.0], [47.0, 9727.0], [47.1, 9730.0], [47.2, 9739.0], [47.3, 9743.0], [47.4, 9748.0], [47.5, 9760.0], [47.6, 9763.0], [47.7, 9771.0], [47.8, 9776.0], [47.9, 9793.0], [48.0, 9805.0], [48.1, 9828.0], [48.2, 9847.0], [48.3, 9862.0], [48.4, 9870.0], [48.5, 9879.0], [48.6, 9900.0], [48.7, 9906.0], [48.8, 9910.0], [48.9, 9912.0], [49.0, 9922.0], [49.1, 9942.0], [49.2, 9959.0], [49.3, 9961.0], [49.4, 9972.0], [49.5, 9991.0], [49.6, 10009.0], [49.7, 10013.0], [49.8, 10035.0], [49.9, 10048.0], [50.0, 10064.0], [50.1, 10073.0], [50.2, 10075.0], [50.3, 10088.0], [50.4, 10100.0], [50.5, 10119.0], [50.6, 10140.0], [50.7, 10166.0], [50.8, 10178.0], [50.9, 10203.0], [51.0, 10211.0], [51.1, 10217.0], [51.2, 10225.0], [51.3, 10230.0], [51.4, 10236.0], [51.5, 10239.0], [51.6, 10247.0], [51.7, 10254.0], [51.8, 10256.0], [51.9, 10261.0], [52.0, 10265.0], [52.1, 10267.0], [52.2, 10280.0], [52.3, 10286.0], [52.4, 10295.0], [52.5, 10305.0], [52.6, 10313.0], [52.7, 10332.0], [52.8, 10338.0], [52.9, 10343.0], [53.0, 10346.0], [53.1, 10355.0], [53.2, 10378.0], [53.3, 10385.0], [53.4, 10399.0], [53.5, 10405.0], [53.6, 10409.0], [53.7, 10418.0], [53.8, 10420.0], [53.9, 10435.0], [54.0, 10459.0], [54.1, 10472.0], [54.2, 10473.0], [54.3, 10489.0], [54.4, 10498.0], [54.5, 10526.0], [54.6, 10537.0], [54.7, 10548.0], [54.8, 10553.0], [54.9, 10563.0], [55.0, 10571.0], [55.1, 10583.0], [55.2, 10604.0], [55.3, 10615.0], [55.4, 10639.0], [55.5, 10646.0], [55.6, 10679.0], [55.7, 10686.0], [55.8, 10700.0], [55.9, 10702.0], [56.0, 10714.0], [56.1, 10732.0], [56.2, 10735.0], [56.3, 10739.0], [56.4, 10739.0], [56.5, 10743.0], [56.6, 10752.0], [56.7, 10768.0], [56.8, 10775.0], [56.9, 10784.0], [57.0, 10785.0], [57.1, 10790.0], [57.2, 10808.0], [57.3, 10818.0], [57.4, 10824.0], [57.5, 10827.0], [57.6, 10833.0], [57.7, 10837.0], [57.8, 10843.0], [57.9, 10844.0], [58.0, 10851.0], [58.1, 10856.0], [58.2, 10860.0], [58.3, 10873.0], [58.4, 10877.0], [58.5, 10881.0], [58.6, 10885.0], [58.7, 10888.0], [58.8, 10900.0], [58.9, 10907.0], [59.0, 10913.0], [59.1, 10919.0], [59.2, 10933.0], [59.3, 10937.0], [59.4, 10944.0], [59.5, 10950.0], [59.6, 10953.0], [59.7, 10956.0], [59.8, 10959.0], [59.9, 10961.0], [60.0, 10966.0], [60.1, 10971.0], [60.2, 10974.0], [60.3, 10976.0], [60.4, 10986.0], [60.5, 10986.0], [60.6, 10992.0], [60.7, 10995.0], [60.8, 10999.0], [60.9, 11018.0], [61.0, 11034.0], [61.1, 11035.0], [61.2, 11037.0], [61.3, 11048.0], [61.4, 11053.0], [61.5, 11055.0], [61.6, 11066.0], [61.7, 11073.0], [61.8, 11082.0], [61.9, 11105.0], [62.0, 11114.0], [62.1, 11117.0], [62.2, 11129.0], [62.3, 11139.0], [62.4, 11143.0], [62.5, 11153.0], [62.6, 11174.0], [62.7, 11179.0], [62.8, 11190.0], [62.9, 11196.0], [63.0, 11200.0], [63.1, 11211.0], [63.2, 11218.0], [63.3, 11231.0], [63.4, 11233.0], [63.5, 11234.0], [63.6, 11244.0], [63.7, 11258.0], [63.8, 11268.0], [63.9, 11283.0], [64.0, 11287.0], [64.1, 11292.0], [64.2, 11326.0], [64.3, 11343.0], [64.4, 11354.0], [64.5, 11356.0], [64.6, 11362.0], [64.7, 11369.0], [64.8, 11391.0], [64.9, 11414.0], [65.0, 11424.0], [65.1, 11451.0], [65.2, 11460.0], [65.3, 11464.0], [65.4, 11466.0], [65.5, 11486.0], [65.6, 11498.0], [65.7, 11509.0], [65.8, 11516.0], [65.9, 11524.0], [66.0, 11526.0], [66.1, 11530.0], [66.2, 11538.0], [66.3, 11544.0], [66.4, 11550.0], [66.5, 11563.0], [66.6, 11573.0], [66.7, 11588.0], [66.8, 11598.0], [66.9, 11610.0], [67.0, 11650.0], [67.1, 11659.0], [67.2, 11667.0], [67.3, 11691.0], [67.4, 11691.0], [67.5, 11708.0], [67.6, 11732.0], [67.7, 11734.0], [67.8, 11747.0], [67.9, 11800.0], [68.0, 11817.0], [68.1, 11823.0], [68.2, 11860.0], [68.3, 11893.0], [68.4, 11913.0], [68.5, 11924.0], [68.6, 11935.0], [68.7, 11951.0], [68.8, 11961.0], [68.9, 11969.0], [69.0, 11977.0], [69.1, 11978.0], [69.2, 11984.0], [69.3, 11988.0], [69.4, 11991.0], [69.5, 12003.0], [69.6, 12012.0], [69.7, 12026.0], [69.8, 12029.0], [69.9, 12037.0], [70.0, 12038.0], [70.1, 12047.0], [70.2, 12057.0], [70.3, 12061.0], [70.4, 12088.0], [70.5, 12094.0], [70.6, 12102.0], [70.7, 12113.0], [70.8, 12121.0], [70.9, 12128.0], [71.0, 12132.0], [71.1, 12182.0], [71.2, 12197.0], [71.3, 12204.0], [71.4, 12238.0], [71.5, 12247.0], [71.6, 12262.0], [71.7, 12267.0], [71.8, 12289.0], [71.9, 12313.0], [72.0, 12348.0], [72.1, 12373.0], [72.2, 12410.0], [72.3, 12453.0], [72.4, 12613.0], [72.5, 12624.0], [72.6, 12636.0], [72.7, 12691.0], [72.8, 12712.0], [72.9, 12729.0], [73.0, 12784.0], [73.1, 12813.0], [73.2, 12824.0], [73.3, 12857.0], [73.4, 12872.0], [73.5, 12892.0], [73.6, 12945.0], [73.7, 12961.0], [73.8, 13001.0], [73.9, 13004.0], [74.0, 13011.0], [74.1, 13018.0], [74.2, 13034.0], [74.3, 13077.0], [74.4, 13088.0], [74.5, 13108.0], [74.6, 13109.0], [74.7, 13131.0], [74.8, 13147.0], [74.9, 13218.0], [75.0, 13252.0], [75.1, 13293.0], [75.2, 13335.0], [75.3, 13378.0], [75.4, 13451.0], [75.5, 13467.0], [75.6, 13483.0], [75.7, 13486.0], [75.8, 13507.0], [75.9, 13526.0], [76.0, 13561.0], [76.1, 13572.0], [76.2, 13598.0], [76.3, 13629.0], [76.4, 13645.0], [76.5, 13657.0], [76.6, 13689.0], [76.7, 13708.0], [76.8, 13736.0], [76.9, 13755.0], [77.0, 13770.0], [77.1, 13785.0], [77.2, 13806.0], [77.3, 13827.0], [77.4, 13831.0], [77.5, 13846.0], [77.6, 13873.0], [77.7, 13904.0], [77.8, 13934.0], [77.9, 13940.0], [78.0, 13949.0], [78.1, 13960.0], [78.2, 13993.0], [78.3, 14005.0], [78.4, 14033.0], [78.5, 14041.0], [78.6, 14051.0], [78.7, 14075.0], [78.8, 14085.0], [78.9, 14099.0], [79.0, 14120.0], [79.1, 14155.0], [79.2, 14176.0], [79.3, 14190.0], [79.4, 14197.0], [79.5, 14207.0], [79.6, 14214.0], [79.7, 14220.0], [79.8, 14238.0], [79.9, 14245.0], [80.0, 14255.0], [80.1, 14276.0], [80.2, 14295.0], [80.3, 14316.0], [80.4, 14325.0], [80.5, 14355.0], [80.6, 14365.0], [80.7, 14382.0], [80.8, 14387.0], [80.9, 14399.0], [81.0, 14434.0], [81.1, 14436.0], [81.2, 14452.0], [81.3, 14468.0], [81.4, 14476.0], [81.5, 14510.0], [81.6, 14525.0], [81.7, 14539.0], [81.8, 14581.0], [81.9, 14588.0], [82.0, 14627.0], [82.1, 14639.0], [82.2, 14656.0], [82.3, 14699.0], [82.4, 14730.0], [82.5, 14740.0], [82.6, 14749.0], [82.7, 14761.0], [82.8, 14776.0], [82.9, 14788.0], [83.0, 14803.0], [83.1, 14854.0], [83.2, 14868.0], [83.3, 14888.0], [83.4, 14937.0], [83.5, 15011.0], [83.6, 15014.0], [83.7, 15083.0], [83.8, 15095.0], [83.9, 15142.0], [84.0, 15156.0], [84.1, 15185.0], [84.2, 15268.0], [84.3, 15317.0], [84.4, 15342.0], [84.5, 15345.0], [84.6, 15353.0], [84.7, 15355.0], [84.8, 15359.0], [84.9, 15360.0], [85.0, 15372.0], [85.1, 15380.0], [85.2, 15389.0], [85.3, 15423.0], [85.4, 15453.0], [85.5, 15455.0], [85.6, 15470.0], [85.7, 15480.0], [85.8, 15495.0], [85.9, 15496.0], [86.0, 15499.0], [86.1, 15535.0], [86.2, 15559.0], [86.3, 15572.0], [86.4, 15630.0], [86.5, 15681.0], [86.6, 15694.0], [86.7, 15703.0], [86.8, 15706.0], [86.9, 15738.0], [87.0, 15782.0], [87.1, 15796.0], [87.2, 15916.0], [87.3, 15947.0], [87.4, 15989.0], [87.5, 16042.0], [87.6, 16088.0], [87.7, 16124.0], [87.8, 16140.0], [87.9, 16147.0], [88.0, 16156.0], [88.1, 16158.0], [88.2, 16158.0], [88.3, 16159.0], [88.4, 16165.0], [88.5, 16168.0], [88.6, 16173.0], [88.7, 16176.0], [88.8, 16179.0], [88.9, 16181.0], [89.0, 16185.0], [89.1, 16187.0], [89.2, 16201.0], [89.3, 16214.0], [89.4, 16218.0], [89.5, 16225.0], [89.6, 16239.0], [89.7, 16242.0], [89.8, 16248.0], [89.9, 16264.0], [90.0, 16271.0], [90.1, 16292.0], [90.2, 16307.0], [90.3, 16314.0], [90.4, 16330.0], [90.5, 16352.0], [90.6, 16393.0], [90.7, 16425.0], [90.8, 16450.0], [90.9, 16460.0], [91.0, 16463.0], [91.1, 16489.0], [91.2, 16491.0], [91.3, 16497.0], [91.4, 16498.0], [91.5, 16505.0], [91.6, 16511.0], [91.7, 16554.0], [91.8, 16594.0], [91.9, 16626.0], [92.0, 16660.0], [92.1, 16680.0], [92.2, 16704.0], [92.3, 16706.0], [92.4, 16757.0], [92.5, 16780.0], [92.6, 16790.0], [92.7, 16796.0], [92.8, 16805.0], [92.9, 16829.0], [93.0, 16875.0], [93.1, 16899.0], [93.2, 16933.0], [93.3, 16950.0], [93.4, 16999.0], [93.5, 17067.0], [93.6, 17097.0], [93.7, 17189.0], [93.8, 17410.0], [93.9, 17604.0], [94.0, 17877.0], [94.1, 17893.0], [94.2, 18069.0], [94.3, 18388.0], [94.4, 18689.0], [94.5, 18739.0], [94.6, 18772.0], [94.7, 19017.0], [94.8, 19492.0], [94.9, 19641.0], [95.0, 20103.0], [95.1, 20170.0], [95.2, 20467.0], [95.3, 20584.0], [95.4, 20601.0], [95.5, 20627.0], [95.6, 20690.0], [95.7, 20701.0], [95.8, 20785.0], [95.9, 20947.0], [96.0, 20977.0], [96.1, 21007.0], [96.2, 21208.0], [96.3, 21308.0], [96.4, 21342.0], [96.5, 21347.0], [96.6, 21370.0], [96.7, 21480.0], [96.8, 21648.0], [96.9, 21991.0], [97.0, 22124.0], [97.1, 22147.0], [97.2, 22810.0], [97.3, 23094.0], [97.4, 23637.0], [97.5, 23685.0], [97.6, 23724.0], [97.7, 23854.0], [97.8, 23911.0], [97.9, 23959.0], [98.0, 23979.0], [98.1, 24061.0], [98.2, 24164.0], [98.3, 24262.0], [98.4, 24437.0], [98.5, 24466.0], [98.6, 24469.0], [98.7, 24473.0], [98.8, 24504.0], [98.9, 24538.0], [99.0, 24576.0], [99.1, 24764.0], [99.2, 24899.0], [99.3, 25318.0], [99.4, 25781.0], [99.5, 26002.0], [99.6, 31683.0], [99.7, 35058.0], [99.8, 35754.0], [99.9, 44630.0]], "isOverall": false, "label": "Access Animation Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2600.0, "maxY": 41.0, "series": [{"data": [[35700.0, 1.0], [45700.0, 1.0], [2600.0, 2.0], [2800.0, 3.0], [3000.0, 15.0], [3100.0, 6.0], [3200.0, 6.0], [3300.0, 12.0], [3400.0, 4.0], [3600.0, 1.0], [3700.0, 1.0], [3800.0, 5.0], [3900.0, 5.0], [4000.0, 2.0], [4100.0, 4.0], [4200.0, 2.0], [4300.0, 6.0], [4600.0, 6.0], [4500.0, 1.0], [4400.0, 2.0], [4800.0, 2.0], [4700.0, 4.0], [5100.0, 5.0], [5000.0, 6.0], [4900.0, 2.0], [5200.0, 12.0], [5300.0, 1.0], [5400.0, 6.0], [5500.0, 9.0], [5600.0, 18.0], [5800.0, 25.0], [5700.0, 15.0], [5900.0, 26.0], [6000.0, 17.0], [6100.0, 30.0], [6200.0, 15.0], [6300.0, 14.0], [6400.0, 22.0], [6500.0, 16.0], [6600.0, 7.0], [6700.0, 10.0], [6800.0, 12.0], [6900.0, 8.0], [7000.0, 15.0], [7100.0, 24.0], [7400.0, 19.0], [7300.0, 9.0], [7200.0, 5.0], [7500.0, 15.0], [7600.0, 10.0], [7700.0, 7.0], [7800.0, 12.0], [7900.0, 10.0], [8000.0, 22.0], [8100.0, 11.0], [8200.0, 9.0], [8300.0, 40.0], [8400.0, 34.0], [8500.0, 21.0], [8600.0, 19.0], [8700.0, 21.0], [8800.0, 20.0], [8900.0, 25.0], [9000.0, 31.0], [9100.0, 25.0], [9200.0, 38.0], [9400.0, 39.0], [9500.0, 26.0], [9600.0, 34.0], [9300.0, 29.0], [9700.0, 24.0], [9800.0, 13.0], [9900.0, 20.0], [10000.0, 16.0], [10100.0, 10.0], [10200.0, 31.0], [10400.0, 20.0], [10600.0, 12.0], [10700.0, 27.0], [10300.0, 20.0], [10500.0, 15.0], [10800.0, 33.0], [10900.0, 41.0], [11000.0, 20.0], [11100.0, 23.0], [11200.0, 23.0], [11300.0, 14.0], [11400.0, 16.0], [11500.0, 24.0], [11600.0, 12.0], [11700.0, 9.0], [11800.0, 10.0], [11900.0, 22.0], [12200.0, 12.0], [12000.0, 21.0], [12100.0, 15.0], [12300.0, 5.0], [12600.0, 7.0], [12700.0, 6.0], [12400.0, 4.0], [12500.0, 1.0], [12800.0, 11.0], [12900.0, 4.0], [13100.0, 8.0], [13000.0, 14.0], [13300.0, 5.0], [13200.0, 5.0], [13400.0, 8.0], [13600.0, 9.0], [13700.0, 9.0], [13800.0, 10.0], [13500.0, 9.0], [13900.0, 13.0], [14000.0, 13.0], [14100.0, 10.0], [14200.0, 16.0], [14300.0, 14.0], [14400.0, 11.0], [14500.0, 10.0], [14600.0, 7.0], [14700.0, 13.0], [14800.0, 7.0], [15000.0, 7.0], [15100.0, 6.0], [14900.0, 3.0], [15300.0, 20.0], [15200.0, 2.0], [15700.0, 10.0], [15600.0, 6.0], [15400.0, 16.0], [15500.0, 6.0], [15800.0, 1.0], [15900.0, 5.0], [16000.0, 4.0], [16100.0, 30.0], [16200.0, 20.0], [16300.0, 10.0], [16400.0, 17.0], [16600.0, 7.0], [16800.0, 7.0], [17000.0, 4.0], [17400.0, 3.0], [17600.0, 1.0], [17800.0, 4.0], [18000.0, 1.0], [18200.0, 1.0], [18600.0, 2.0], [19400.0, 1.0], [19000.0, 2.0], [19600.0, 1.0], [20400.0, 2.0], [19800.0, 1.0], [20600.0, 6.0], [21000.0, 2.0], [21400.0, 1.0], [21200.0, 2.0], [20800.0, 1.0], [21600.0, 1.0], [22000.0, 1.0], [21800.0, 1.0], [22800.0, 1.0], [23200.0, 1.0], [23000.0, 1.0], [23800.0, 3.0], [23600.0, 3.0], [24000.0, 3.0], [24200.0, 2.0], [24400.0, 8.0], [24800.0, 2.0], [24600.0, 1.0], [26200.0, 1.0], [25600.0, 1.0], [25800.0, 1.0], [26000.0, 1.0], [31600.0, 1.0], [32000.0, 1.0], [35200.0, 1.0], [43200.0, 1.0], [16500.0, 7.0], [16700.0, 12.0], [16900.0, 6.0], [17100.0, 2.0], [17900.0, 1.0], [18300.0, 2.0], [18700.0, 3.0], [18900.0, 1.0], [19500.0, 1.0], [20100.0, 3.0], [20700.0, 3.0], [21500.0, 1.0], [20500.0, 3.0], [21300.0, 8.0], [20900.0, 4.0], [21900.0, 1.0], [22100.0, 3.0], [22500.0, 1.0], [22900.0, 1.0], [23900.0, 5.0], [24100.0, 1.0], [23700.0, 2.0], [24500.0, 6.0], [24700.0, 1.0], [25300.0, 1.0], [24900.0, 1.0], [25700.0, 1.0], [35000.0, 1.0], [44600.0, 1.0]], "isOverall": false, "label": "Access Animation Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 45700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.57139604E12, "maxY": 1002.3043043043075, "series": [{"data": [[1.5713961E12, 1.5], [1.57139604E12, 1002.3043043043075]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5713961E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2659.0, "minX": 1.0, "maxY": 45750.0, "series": [{"data": [[2.0, 45750.0], [3.0, 43264.0], [4.0, 35058.0], [5.0, 35754.0], [6.0, 35257.0], [7.0, 32041.0], [8.0, 31683.0], [9.0, 26002.0], [10.0, 24991.0], [11.0, 25781.0], [12.0, 25826.0], [13.0, 25664.0], [14.0, 26257.0], [15.0, 24421.0], [16.0, 23637.0], [17.0, 24660.0], [18.0, 25318.0], [19.0, 23724.0], [20.0, 24473.0], [21.0, 24504.0], [22.0, 24899.0], [23.0, 24840.0], [24.0, 24469.0], [25.0, 24764.0], [26.0, 22591.0], [27.0, 24560.0], [28.0, 24576.0], [29.0, 24538.0], [30.0, 23962.0], [31.0, 24501.0], [33.0, 23959.0], [32.0, 24437.0], [35.0, 23094.0], [34.0, 24529.0], [37.0, 24467.0], [36.0, 24466.0], [39.0, 23717.0], [38.0, 24453.0], [41.0, 24164.0], [40.0, 24471.0], [43.0, 24227.0], [42.0, 23911.0], [45.0, 23854.0], [44.0, 24262.0], [47.0, 24090.0], [46.0, 22142.0], [48.0, 23809.0], [51.0, 22124.0], [50.0, 23855.0], [53.0, 23937.0], [52.0, 24024.0], [55.0, 23878.0], [54.0, 23979.0], [57.0, 21888.0], [56.0, 23685.0], [59.0, 22927.0], [58.0, 23225.0], [61.0, 22412.0], [63.0, 20987.0], [62.0, 21551.0], [67.0, 20856.0], [66.0, 20955.0], [65.0, 21007.0], [64.0, 20977.0], [71.0, 21297.0], [69.0, 20785.0], [68.0, 20947.0], [75.0, 21352.0], [74.0, 21346.0], [73.0, 21279.666666666668], [79.0, 21373.5], [77.0, 21344.5], [83.0, 20584.0], [82.0, 20596.0], [81.0, 20566.0], [80.0, 20701.0], [87.0, 21991.0], [86.0, 20627.0], [85.0, 20641.0], [84.0, 22147.0], [91.0, 19099.0], [90.0, 21087.0], [89.0, 21480.0], [88.0, 21648.0], [95.0, 19851.0], [94.0, 20782.0], [93.0, 20611.0], [99.0, 20696.0], [98.0, 20690.0], [97.0, 20447.0], [96.0, 20103.0], [103.0, 19641.0], [102.0, 20159.0], [101.0, 20170.0], [100.0, 20467.0], [107.0, 18690.0], [106.0, 19492.0], [105.0, 19526.0], [104.0, 19017.0], [111.0, 18771.0], [110.0, 18392.0], [109.0, 18900.0], [108.0, 18689.0], [115.0, 17877.0], [114.0, 18275.0], [113.0, 18739.0], [112.0, 18772.0], [119.0, 17061.0], [118.0, 17144.0], [117.0, 17189.0], [116.0, 18388.0], [123.0, 17840.0], [122.0, 16730.0], [121.0, 17963.0], [120.0, 18069.0], [127.0, 16946.0], [126.0, 16593.0], [125.0, 17886.0], [124.0, 17893.0], [135.0, 17067.0], [134.0, 17097.0], [133.0, 16460.0], [132.0, 17604.0], [131.0, 16771.0], [130.0, 16352.0], [129.0, 16461.0], [128.0, 16626.0], [143.0, 16680.0], [142.0, 16554.0], [141.0, 16660.0], [140.0, 16484.0], [137.0, 16594.0], [136.0, 15380.0], [151.0, 16699.0], [150.0, 17144.5], [148.0, 16301.5], [146.0, 15804.0], [145.0, 15714.0], [144.0, 17408.0], [159.0, 16173.0], [158.0, 15555.0], [157.0, 16220.0], [156.0, 15947.0], [155.0, 16505.0], [154.0, 16606.0], [153.0, 16271.0], [152.0, 16312.0], [167.0, 17076.0], [166.0, 16236.333333333334], [163.0, 16797.5], [161.0, 16143.5], [175.0, 16320.0], [174.0, 16236.0], [172.0, 16128.0], [171.0, 16165.0], [170.0, 16307.0], [169.0, 15496.0], [168.0, 16349.0], [183.0, 16704.0], [182.0, 16218.0], [181.0, 16600.0], [179.0, 16239.0], [178.0, 16933.0], [177.0, 16995.0], [176.0, 16209.0], [191.0, 16473.5], [189.0, 16887.0], [187.0, 16797.0], [186.0, 14819.0], [185.0, 16950.0], [184.0, 16910.0], [199.0, 15360.0], [198.0, 15359.0], [197.0, 16793.666666666668], [194.0, 16829.0], [193.0, 16757.0], [192.0, 16827.0], [207.0, 15568.0], [206.0, 15701.0], [205.0, 16706.0], [204.0, 16248.0], [203.0, 16330.0], [202.0, 16705.0], [201.0, 15778.0], [215.0, 15499.0], [214.0, 15497.0], [213.0, 14787.0], [212.0, 16176.0], [211.0, 16201.0], [210.0, 15341.0], [209.0, 14539.0], [208.0, 16663.0], [223.0, 15465.0], [222.0, 16169.0], [221.0, 15727.333333333334], [218.0, 15012.5], [216.0, 15488.0], [230.0, 16493.5], [228.0, 16511.0], [227.0, 15151.5], [225.0, 15084.5], [239.0, 16490.0], [238.0, 16494.5], [236.0, 16497.0], [235.0, 16496.0], [233.0, 16425.0], [232.0, 16505.5], [247.0, 15989.0], [246.0, 16401.0], [245.0, 16355.0], [244.0, 16451.0], [243.0, 16450.0], [242.0, 16463.0], [241.0, 15173.0], [240.0, 16489.0], [253.0, 16301.0], [252.0, 16292.0], [251.0, 15360.0], [250.0, 14316.0], [249.0, 16314.0], [248.0, 14516.0], [269.0, 15496.0], [268.0, 15569.666666666666], [265.0, 15793.5], [263.0, 14854.0], [262.0, 16256.0], [261.0, 16285.0], [260.0, 16166.0], [257.0, 15345.0], [256.0, 15658.666666666666], [287.0, 15867.0], [281.0, 16187.0], [279.0, 14051.0], [278.0, 15344.0], [277.0, 16175.0], [276.0, 15356.0], [274.0, 15545.5], [272.0, 15979.666666666666], [303.0, 15557.75], [299.0, 15361.0], [298.0, 15837.5], [296.0, 15597.5], [294.0, 16185.0], [293.0, 15802.166666666666], [318.0, 14859.0], [319.0, 14284.0], [317.0, 14394.0], [316.0, 14166.0], [315.0, 15317.0], [314.0, 14399.0], [313.0, 14419.0], [312.0, 16111.0], [311.0, 14937.0], [307.0, 15914.0], [304.0, 16165.0], [310.0, 14730.0], [309.0, 16124.0], [308.0, 16144.0], [334.0, 13934.0], [335.0, 15624.0], [333.0, 13949.0], [332.0, 15185.0], [331.0, 15703.0], [330.0, 14312.0], [328.0, 16003.0], [327.0, 15233.0], [321.0, 14327.0], [320.0, 14462.0], [323.0, 15782.0], [322.0, 16042.0], [326.0, 15706.0], [325.0, 15307.0], [324.0, 15268.0], [350.0, 15428.0], [351.0, 14794.0], [349.0, 15389.0], [348.0, 15630.0], [347.0, 15414.0], [346.0, 14013.0], [345.0, 14880.0], [344.0, 15652.0], [343.0, 15355.0], [336.0, 15936.0], [338.0, 15916.0], [337.0, 15142.0], [342.0, 15763.0], [341.0, 15796.0], [340.0, 14828.5], [366.0, 13645.0], [367.0, 14041.0], [365.0, 14927.0], [364.0, 14300.0], [363.0, 14075.0], [362.0, 13456.0], [361.0, 14295.0], [360.0, 14215.0], [359.0, 14041.0], [352.0, 15681.0], [355.0, 15174.0], [353.0, 13937.0], [358.0, 13873.0], [357.0, 13564.0], [356.0, 15706.0], [382.0, 13484.5], [383.0, 14062.0], [380.0, 14255.0], [371.0, 13378.0], [370.0, 14207.0], [369.0, 13467.0], [368.0, 14144.0], [379.0, 13598.0], [378.0, 13541.0], [377.0, 14803.0], [376.0, 14588.0], [375.0, 14309.5], [373.0, 14041.0], [372.0, 13708.0], [387.0, 13940.0], [399.0, 12945.0], [398.0, 14486.75], [394.0, 13306.0], [393.0, 14579.0], [391.0, 14868.0], [390.0, 13513.0], [389.0, 13011.0], [388.0, 13088.0], [386.0, 14386.0], [385.0, 14888.0], [384.0, 14964.0], [414.0, 14245.0], [415.0, 13451.0], [413.0, 13278.0], [412.0, 13507.0], [411.0, 13730.0], [410.0, 14510.0], [409.0, 13526.0], [408.0, 13002.0], [407.0, 14373.0], [400.0, 13766.0], [402.0, 15089.0], [401.0, 15103.0], [406.0, 14100.0], [405.0, 13904.0], [404.0, 14050.5], [429.0, 14320.0], [428.0, 14765.0], [419.0, 12813.0], [418.0, 13293.0], [417.0, 13252.0], [416.0, 14591.0], [427.0, 14788.0], [426.0, 14387.0], [425.0, 14355.0], [424.0, 13111.0], [423.0, 13827.0], [422.0, 13639.0], [421.0, 13004.0], [420.0, 14555.0], [446.0, 13827.0], [447.0, 12634.0], [445.0, 12624.0], [444.0, 14276.0], [443.0, 14714.0], [442.0, 14473.0], [441.0, 13007.0], [440.0, 13077.0], [439.0, 14730.0], [432.0, 14657.666666666666], [435.0, 14496.0], [434.0, 13108.5], [438.0, 14749.0], [437.0, 14761.0], [436.0, 13095.0], [462.0, 13014.0], [463.0, 13018.0], [461.0, 13218.0], [460.0, 14525.0], [459.0, 13001.0], [458.0, 14581.0], [457.0, 14586.0], [456.0, 13746.5], [454.0, 14504.5], [451.0, 14441.0], [449.0, 14671.0], [448.0, 14359.0], [452.0, 14636.0], [478.0, 12802.0], [479.0, 13335.0], [477.0, 13955.0], [476.0, 14434.0], [475.0, 12645.0], [474.0, 13077.0], [473.0, 14452.0], [472.0, 14435.0], [471.0, 13490.0], [464.0, 14120.0], [467.0, 13424.5], [465.0, 12712.0], [470.0, 12784.0], [469.0, 14468.0], [468.0, 12348.0], [494.0, 13801.0], [495.0, 14250.0], [493.0, 13785.0], [492.0, 13872.0], [491.0, 12100.0], [490.0, 14212.0], [489.0, 12717.0], [488.0, 12859.0], [487.0, 13821.0], [481.0, 12855.0], [480.0, 13141.0], [483.0, 12247.0], [482.0, 14325.0], [486.0, 13993.0], [485.0, 14239.0], [484.0, 14238.0], [510.0, 13572.0], [511.0, 12054.0], [509.0, 12636.0], [508.0, 14155.0], [507.0, 13587.0], [506.0, 13336.0], [505.0, 14176.0], [504.0, 14190.0], [503.0, 13648.0], [497.0, 12410.0], [496.0, 12132.0], [499.0, 14207.0], [498.0, 13948.0], [502.0, 13629.0], [501.0, 14197.0], [500.0, 14192.0], [540.0, 13919.0], [542.0, 11747.0], [528.0, 11978.0], [530.0, 13770.0], [532.0, 11971.0], [538.0, 11991.0], [536.0, 12822.0], [518.0, 13831.0], [516.0, 13692.0], [526.0, 12862.0], [524.0, 14033.0], [522.0, 14083.0], [520.0, 14097.0], [534.0, 11924.0], [572.0, 12057.0], [560.0, 11931.0], [562.0, 11969.0], [564.0, 11984.0], [574.0, 12417.0], [570.0, 12260.0], [568.0, 11733.0], [544.0, 12683.0], [546.0, 12857.0], [548.0, 12613.0], [550.0, 11734.0], [558.0, 11935.0], [556.0, 13744.0], [554.0, 11943.0], [552.0, 11964.0], [566.0, 13240.0], [604.0, 12088.0], [592.0, 12036.0], [594.0, 12028.0], [596.0, 12029.0], [606.0, 12136.0], [602.0, 11258.0], [600.0, 12061.0], [576.0, 11549.0], [578.0, 11981.0], [580.0, 11424.0], [582.0, 12003.0], [590.0, 12037.0], [588.0, 13109.0], [586.0, 11343.0], [584.0, 11555.0], [598.0, 12039.0], [636.0, 11037.0], [624.0, 12182.0], [628.0, 10961.0], [638.0, 11464.0], [634.0, 11650.0], [632.0, 10976.0], [608.0, 12123.0], [610.0, 12085.0], [612.0, 12121.0], [614.0, 11290.0], [622.0, 12128.0], [620.0, 11476.0], [618.0, 11268.0], [616.0, 11231.0], [630.0, 10966.0], [668.0, 11811.0], [656.0, 10944.0], [658.0, 11451.0], [660.0, 11340.0], [670.0, 12037.0], [666.0, 10999.0], [664.0, 11114.0], [640.0, 12026.0], [642.0, 10995.0], [646.0, 11860.0], [652.0, 10952.0], [650.0, 10955.0], [648.0, 10953.0], [662.0, 11735.0], [700.0, 11232.0], [688.0, 11318.0], [690.0, 10910.0], [692.0, 11667.0], [702.0, 11199.0], [698.0, 10346.0], [696.0, 11573.0], [672.0, 12239.0], [674.0, 11835.0], [676.0, 11086.5], [678.0, 11550.0], [686.0, 11055.0], [684.0, 12313.0], [682.0, 10632.0], [680.0, 11034.0], [694.0, 11508.0], [732.0, 10267.0], [720.0, 11078.0], [722.0, 10995.0], [724.0, 10255.0], [734.0, 11356.0], [730.0, 10986.0], [728.0, 11416.0], [708.0, 12373.0], [718.0, 12289.0], [716.0, 10604.0], [714.0, 11551.5], [712.0, 12330.0], [726.0, 10539.0], [762.0, 9919.0], [766.0, 10223.0], [754.0, 11117.0], [764.0, 10537.0], [736.0, 11048.0], [738.0, 11062.0], [740.0, 10529.0], [742.0, 10914.0], [748.0, 10355.0], [746.0, 10544.0], [744.0, 11367.0], [758.0, 11274.0], [756.0, 10843.0], [796.0, 9906.0], [784.0, 9763.0], [786.0, 11913.0], [788.0, 11897.0], [798.0, 10013.0], [794.0, 10237.0], [792.0, 10378.0], [770.0, 11334.0], [772.0, 11524.0], [782.0, 11200.0], [780.0, 11158.0], [778.0, 11659.0], [776.0, 11529.0], [790.0, 10983.0], [824.0, 11372.5], [830.0, 10735.0], [816.0, 10785.0], [828.0, 10247.0], [804.0, 9711.0], [802.0, 10844.0], [814.0, 10936.0], [812.0, 10244.0], [810.0, 11053.0], [808.0, 11593.0], [822.0, 11509.0], [856.0, 9468.0], [862.0, 10261.0], [848.0, 9569.0], [858.0, 10073.0], [832.0, 11354.0], [834.0, 9641.0], [836.0, 11691.0], [838.0, 10073.0], [846.0, 10329.0], [844.0, 10225.0], [842.0, 9516.0], [840.0, 9714.0], [852.0, 10912.0], [850.0, 11530.0], [892.0, 11498.0], [894.0, 9770.0], [880.0, 10790.0], [882.0, 9991.0], [888.0, 10065.5], [870.0, 10526.0], [866.0, 10525.0], [878.0, 9698.0], [876.0, 11544.0], [874.0, 11525.0], [886.0, 9378.0], [924.0, 9551.5], [926.0, 9293.0], [914.0, 9287.0], [916.0, 10892.0], [922.0, 9502.0], [920.0, 10564.0], [902.0, 9722.0], [900.0, 9694.0], [898.0, 10723.333333333334], [910.0, 9906.0], [908.0, 9710.5], [906.0, 10178.0], [904.0, 9541.5], [918.0, 11362.0], [952.0, 10054.5], [958.0, 9599.0], [944.0, 9457.0], [956.0, 9992.0], [928.0, 9217.0], [930.0, 10068.0], [932.0, 11038.0], [942.0, 10700.0], [940.0, 9533.5], [938.0, 9370.0], [936.0, 9281.0], [950.0, 11258.0], [948.0, 10553.0], [946.0, 10714.0], [986.0, 9776.0], [978.0, 10693.5], [976.0, 10888.0], [988.0, 9802.0], [984.0, 10230.0], [966.0, 9671.0], [964.0, 11170.0], [962.0, 11218.0], [960.0, 10455.0], [974.0, 10208.333333333334], [968.0, 11195.0], [1016.0, 10233.0], [1020.0, 9677.0], [1008.0, 10357.0], [1012.0, 9048.0], [1022.0, 9163.0], [1018.0, 10265.0], [1006.0, 9723.5], [992.0, 10256.0], [994.0, 10286.0], [996.0, 9730.0], [998.0, 9015.0], [1004.0, 9351.0], [1002.0, 9037.0], [1076.0, 10171.666666666666], [1084.0, 9973.0], [1056.0, 9907.0], [1064.0, 10478.5], [1060.0, 10523.75], [1032.0, 10448.5], [1028.0, 9872.0], [1024.0, 10913.0], [1044.0, 9136.6], [1040.0, 9757.5], [1068.0, 10343.25], [1136.0, 10009.0], [1148.0, 9341.0], [1124.0, 9042.0], [1128.0, 8974.666666666666], [1116.0, 9231.0], [1088.0, 9339.0], [1092.0, 9826.0], [1096.0, 10875.0], [1104.0, 9427.0], [1112.0, 9510.0], [1212.0, 8665.0], [1196.0, 9510.0], [1204.0, 9489.0], [1160.0, 8883.0], [1156.0, 9074.666666666666], [1268.0, 8864.666666666666], [1276.0, 8385.5], [1252.0, 8547.0], [1272.0, 9473.0], [1228.0, 10281.0], [1224.0, 9208.0], [1220.0, 10572.0], [1216.0, 9591.0], [1240.0, 9475.0], [1340.0, 8630.0], [1336.0, 9022.0], [1312.0, 8953.4], [1316.0, 7904.0], [1320.0, 9912.0], [1324.0, 8481.0], [1332.0, 8325.0], [1328.0, 8617.0], [1292.0, 9230.666666666666], [1288.0, 8303.5], [1308.0, 9057.0], [1300.0, 8642.333333333334], [1404.0, 9485.0], [1376.0, 9391.0], [1384.0, 9621.0], [1388.0, 9079.0], [1400.0, 9168.0], [1396.0, 7430.0], [1392.0, 7791.0], [1344.0, 9480.0], [1348.0, 9728.0], [1356.0, 8512.0], [1456.0, 7282.0], [1460.0, 7954.5], [1464.0, 9225.0], [1440.0, 8414.0], [1444.0, 8424.333333333334], [1452.0, 7485.0], [1416.0, 7476.0], [1420.0, 8965.0], [1436.0, 8415.0], [1432.0, 8319.0], [1428.0, 8078.5], [1532.0, 7492.5], [1504.0, 9062.0], [1508.0, 7807.5], [1512.0, 9032.0], [1516.0, 7342.0], [1528.0, 7985.0], [1524.0, 8914.0], [1476.0, 8080.0], [1480.0, 7489.0], [1484.0, 8158.0], [1500.0, 6952.0], [1492.0, 7851.5], [1596.0, 6400.0], [1568.0, 8010.0], [1572.0, 8715.0], [1576.0, 7257.0], [1580.0, 6559.0], [1592.0, 6413.0], [1588.0, 6892.0], [1584.0, 8625.0], [1548.0, 8019.0], [1540.0, 8489.5], [1536.0, 8339.0], [1560.0, 8018.0], [1556.0, 7466.0], [1552.0, 8803.0], [1656.0, 6157.0], [1660.0, 6911.666666666667], [1640.0, 6465.0], [1632.0, 6577.0], [1636.0, 8244.0], [1644.0, 7338.0], [1652.0, 6164.0], [1648.0, 6418.0], [1612.0, 6488.0], [1608.0, 8064.0], [1604.0, 6447.0], [1600.0, 7529.5], [1628.0, 8347.0], [1624.0, 8040.0], [1620.0, 7061.0], [1616.0, 8413.0], [1720.0, 6478.0], [1716.0, 5802.0], [1724.0, 5847.0], [1696.0, 6332.0], [1700.0, 6151.0], [1704.0, 6583.0], [1708.0, 6139.0], [1712.0, 7579.0], [1664.0, 5993.5], [1668.0, 5974.666666666667], [1672.0, 6113.0], [1676.0, 6984.0], [1692.0, 7801.0], [1680.0, 5949.0], [1784.0, 6713.0], [1760.0, 6118.0], [1764.0, 5897.0], [1768.0, 6919.0], [1772.0, 5755.0], [1780.0, 6441.0], [1776.0, 6827.0], [1728.0, 6863.0], [1732.0, 6169.0], [1736.0, 5897.0], [1740.0, 6085.0], [1756.0, 7117.0], [1752.0, 7143.0], [1748.0, 5606.0], [1744.0, 5889.0], [1844.0, 6004.0], [1836.0, 6145.0], [1852.0, 6278.0], [1848.0, 4778.0], [1840.0, 5528.0], [1792.0, 5653.0], [1800.0, 5743.0], [1804.0, 5829.0], [1820.0, 6228.0], [1816.0, 6519.0], [1812.0, 6545.0], [1808.0, 5658.0], [1912.0, 5862.0], [1908.0, 5876.0], [1916.0, 5070.0], [1888.0, 6041.0], [1892.0, 5464.0], [1896.0, 5956.0], [1900.0, 5906.0], [1904.0, 5864.0], [1856.0, 6026.5], [1864.0, 6175.0], [1884.0, 6077.0], [1880.0, 5922.0], [1876.0, 6121.0], [1872.0, 5829.0], [1932.0, 4952.0], [1980.0, 3604.0], [1952.0, 4197.0], [1956.0, 3328.0], [1976.0, 3442.0], [1920.0, 4166.0], [1924.0, 3477.0], [1928.0, 5092.0], [1948.0, 4223.0], [1944.0, 3341.0], [1940.0, 5199.0], [1936.0, 3278.0], [1960.0, 3030.0], [1992.0, 3023.0], [2000.0, 2659.0], [1984.0, 2851.0], [1996.0, 3242.0], [1988.0, 2832.0], [1065.0, 8919.0], [1073.0, 10683.333333333334], [1033.0, 10972.0], [1025.0, 10563.0], [1053.0, 9276.5], [1041.0, 9145.0], [1145.0, 10833.0], [1125.0, 10343.0], [1129.0, 9407.0], [1149.0, 10083.0], [1137.0, 9423.2], [1089.0, 10844.0], [1093.0, 10455.0], [1097.0, 10252.333333333334], [1105.0, 9827.8], [1189.0, 9793.857142857145], [1193.0, 9493.0], [1213.0, 8679.0], [1209.0, 9727.0], [1205.0, 9900.0], [1201.0, 9864.5], [1153.0, 9342.333333333334], [1273.0, 9780.75], [1277.0, 9416.0], [1249.0, 9530.0], [1257.0, 8987.0], [1225.0, 9010.0], [1241.0, 9700.5], [1313.0, 8341.0], [1341.0, 8575.0], [1317.0, 8533.0], [1321.0, 8409.0], [1325.0, 8706.0], [1333.0, 8471.0], [1329.0, 8467.0], [1309.0, 9268.0], [1297.0, 9173.0], [1405.0, 8925.0], [1377.0, 9609.0], [1381.0, 7918.5], [1385.0, 9607.0], [1389.0, 7842.0], [1401.0, 8172.0], [1393.0, 9578.0], [1345.0, 9760.0], [1349.0, 8481.0], [1353.0, 8609.5], [1357.0, 7568.0], [1373.0, 8953.0], [1369.0, 8842.666666666666], [1365.0, 8792.5], [1361.0, 8740.0], [1461.0, 8204.0], [1441.0, 7594.0], [1445.0, 7954.0], [1449.0, 7321.0], [1453.0, 7134.0], [1465.0, 8455.0], [1457.0, 7084.0], [1409.0, 8694.0], [1413.0, 8157.5], [1417.0, 9440.0], [1421.0, 8304.0], [1437.0, 7471.0], [1433.0, 8480.0], [1429.0, 7256.0], [1425.0, 8261.5], [1529.0, 7100.0], [1521.0, 7405.0], [1509.0, 7520.0], [1513.0, 7533.0], [1517.0, 7420.0], [1533.0, 8916.0], [1477.0, 7326.0], [1481.0, 7485.0], [1485.0, 8158.0], [1501.0, 7087.0], [1497.0, 8208.5], [1493.0, 7701.0], [1489.0, 8607.0], [1589.0, 7066.0], [1569.0, 8007.0], [1573.0, 8684.0], [1577.0, 7791.0], [1597.0, 7195.0], [1585.0, 6812.0], [1545.0, 7852.0], [1541.0, 8063.0], [1537.0, 8866.0], [1565.0, 7318.0], [1561.0, 7997.0], [1557.0, 7059.0], [1553.0, 6750.0], [1657.0, 5957.0], [1633.0, 6489.0], [1637.0, 6599.0], [1641.0, 6111.0], [1645.0, 6184.0], [1661.0, 7601.0], [1653.0, 6579.0], [1649.0, 6160.0], [1613.0, 7108.0], [1609.0, 6304.0], [1605.0, 6987.0], [1601.0, 6572.0], [1629.0, 6598.0], [1617.0, 7274.0], [1721.0, 6416.0], [1725.0, 6881.0], [1697.0, 6460.0], [1701.0, 6727.0], [1705.0, 6750.0], [1709.0, 6779.0], [1717.0, 6270.0], [1713.0, 6508.0], [1665.0, 7950.0], [1669.0, 7513.0], [1673.0, 6722.0], [1693.0, 6769.0], [1689.0, 6158.0], [1685.0, 7128.0], [1681.0, 7085.0], [1789.0, 5964.0], [1761.0, 6027.0], [1765.0, 5711.0], [1773.0, 6462.0], [1785.0, 5244.0], [1781.0, 6686.0], [1777.0, 4656.0], [1729.0, 5835.0], [1733.0, 5727.0], [1737.0, 5750.0], [1741.0, 6375.0], [1753.0, 5988.0], [1749.0, 5914.0], [1745.0, 7185.0], [1853.0, 6274.0], [1825.0, 6056.5], [1829.0, 5859.5], [1837.0, 6088.0], [1845.0, 5213.0], [1841.0, 6389.0], [1793.0, 5922.0], [1797.0, 6666.5], [1801.0, 5836.0], [1805.0, 5667.0], [1821.0, 6229.0], [1817.0, 4443.0], [1813.0, 6538.0], [1809.0, 4792.0], [1913.0, 5491.0], [1917.0, 5244.0], [1889.0, 4492.0], [1893.0, 5985.0], [1897.0, 5707.0], [1909.0, 5561.0], [1905.0, 5920.0], [1857.0, 6248.0], [1865.0, 5226.0], [1869.0, 6018.5], [1885.0, 5244.0], [1881.0, 5550.0], [1877.0, 6107.0], [1873.0, 5216.0], [1973.0, 3008.0], [1925.0, 3988.0], [1953.0, 3311.0], [1957.0, 3328.0], [1981.0, 3241.0], [1921.0, 4756.0], [1929.0, 5204.0], [1933.0, 4137.0], [1949.0, 3167.0], [1945.0, 3201.0], [1941.0, 4827.0], [1937.0, 5049.0], [1985.0, 3081.0], [1997.0, 3233.0], [1993.0, 3315.0], [1989.0, 3374.0], [537.0, 12238.0], [541.0, 13904.0], [529.0, 13960.0], [531.0, 11977.0], [533.0, 13755.0], [539.0, 13657.0], [519.0, 13846.0], [517.0, 13160.0], [515.0, 13256.5], [513.0, 13134.5], [527.0, 13806.0], [523.0, 13982.0], [521.0, 14099.0], [535.0, 12872.0], [573.0, 12530.0], [575.0, 11516.0], [561.0, 13678.0], [563.0, 11988.0], [565.0, 11988.0], [571.0, 12012.0], [569.0, 12952.0], [559.0, 12228.0], [545.0, 12272.0], [547.0, 13836.0], [549.0, 13483.0], [551.0, 13080.0], [557.0, 13736.0], [555.0, 11977.0], [553.0, 11953.0], [567.0, 11987.0], [605.0, 12113.0], [607.0, 12102.0], [593.0, 11436.0], [595.0, 13389.0], [597.0, 11414.0], [603.0, 12061.0], [601.0, 12094.0], [591.0, 12038.0], [577.0, 11563.0], [579.0, 12006.0], [581.0, 12012.0], [583.0, 13484.0], [589.0, 11922.0], [587.0, 11385.0], [585.0, 13147.0], [599.0, 11362.0], [637.0, 12623.0], [639.0, 11196.0], [627.0, 13082.5], [625.0, 11732.0], [629.0, 12197.0], [635.0, 11234.0], [633.0, 10974.0], [623.0, 11822.0], [609.0, 12094.0], [611.0, 12119.0], [613.0, 12128.0], [615.0, 12892.0], [621.0, 11519.0], [619.0, 12734.0], [617.0, 11465.0], [631.0, 12197.0], [669.0, 11287.0], [671.0, 11116.0], [657.0, 12880.0], [659.0, 11125.0], [661.0, 11153.0], [667.0, 11570.0], [665.0, 11691.0], [655.0, 12673.0], [641.0, 12113.0], [645.0, 10941.0], [643.0, 12985.0], [647.0, 10956.0], [653.0, 10950.0], [651.0, 12192.0], [649.0, 10957.0], [663.0, 11961.0], [701.0, 10388.0], [703.0, 10553.0], [689.0, 11580.0], [691.0, 10986.0], [693.0, 10986.0], [699.0, 10280.0], [697.0, 10943.0], [687.0, 11672.0], [673.0, 12267.0], [677.0, 12729.0], [679.0, 11114.0], [685.0, 10937.0], [683.0, 11655.0], [681.0, 12691.0], [695.0, 10999.0], [733.0, 10990.0], [735.0, 10042.0], [721.0, 12262.0], [723.0, 11292.0], [725.0, 10093.0], [731.0, 11283.0], [729.0, 10992.0], [719.0, 12267.0], [705.0, 11304.5], [707.0, 12209.0], [711.0, 11160.0], [709.0, 11131.0], [717.0, 10313.0], [715.0, 10785.0], [727.0, 10818.0], [761.0, 10497.0], [767.0, 9857.0], [753.0, 10098.0], [755.0, 9959.0], [765.0, 11997.0], [751.0, 11426.5], [737.0, 11234.0], [739.0, 11369.0], [741.0, 12204.0], [743.0, 10824.0], [749.0, 10419.0], [747.0, 10739.0], [759.0, 11190.0], [757.0, 11082.0], [797.0, 11889.0], [799.0, 10856.0], [785.0, 9961.0], [787.0, 11201.0], [789.0, 11538.0], [795.0, 10158.0], [793.0, 10571.0], [783.0, 11105.0], [769.0, 11105.0], [771.0, 11228.0], [775.0, 11662.0], [773.0, 11610.0], [781.0, 11073.0], [779.0, 10951.0], [791.0, 11539.0], [827.0, 10422.0], [825.0, 11214.0], [831.0, 9636.0], [819.0, 11671.5], [817.0, 11823.0], [829.0, 11691.0], [807.0, 11206.333333333334], [803.0, 11598.0], [801.0, 10608.0], [815.0, 11037.0], [811.0, 10420.0], [809.0, 10885.0], [821.0, 10768.5], [857.0, 11535.0], [861.0, 10737.5], [849.0, 10752.0], [859.0, 11602.0], [847.0, 10295.0], [833.0, 11728.0], [835.0, 9598.0], [837.0, 11352.0], [839.0, 10088.0], [843.0, 10267.0], [841.0, 10279.0], [855.0, 10220.5], [853.0, 9440.0], [891.0, 11505.5], [889.0, 10166.0], [895.0, 9382.0], [881.0, 10304.0], [883.0, 9739.0], [893.0, 11460.0], [871.0, 9760.0], [869.0, 10807.5], [867.0, 9492.0], [879.0, 9574.0], [877.0, 11486.0], [875.0, 10730.0], [873.0, 10014.5], [885.0, 9493.0], [921.0, 10352.0], [927.0, 9291.0], [913.0, 9546.0], [915.0, 11391.0], [917.0, 10399.0], [925.0, 9297.0], [901.0, 9684.0], [899.0, 10211.0], [911.0, 9396.0], [905.0, 10403.0], [919.0, 11356.0], [953.0, 10686.0], [957.0, 11233.0], [945.0, 11267.0], [955.0, 9948.0], [943.0, 9277.0], [929.0, 9374.0], [931.0, 9922.0], [935.0, 10130.0], [933.0, 10084.0], [941.0, 9275.0], [937.0, 9805.0], [949.0, 10900.0], [985.0, 10735.0], [989.0, 9600.0], [991.0, 10467.5], [987.0, 9207.0], [967.0, 9678.0], [965.0, 9960.0], [961.0, 9387.0], [975.0, 11179.0], [971.0, 9698.333333333334], [983.0, 9888.5], [981.0, 10540.333333333334], [1021.0, 11035.0], [1023.0, 10927.0], [1009.0, 8995.0], [1011.0, 9318.0], [1019.0, 8995.0], [1017.0, 10646.0], [993.0, 9790.0], [995.0, 9739.0], [997.0, 9322.0], [999.0, 9691.0], [1003.0, 10495.0], [1001.0, 9489.5], [1015.0, 9848.0], [1013.0, 9032.0], [1034.0, 8941.0], [1086.0, 9462.0], [1030.0, 9406.5], [1026.0, 11004.0], [1054.0, 10317.5], [1070.0, 10112.0], [1066.0, 8865.0], [1150.0, 10066.25], [1090.0, 9581.0], [1114.0, 9989.8], [1110.0, 8847.0], [1130.0, 9346.2], [1186.0, 9297.0], [1190.0, 9626.0], [1214.0, 10368.25], [1210.0, 9531.5], [1206.0, 9757.0], [1162.0, 9587.0], [1270.0, 8989.5], [1250.0, 9548.0], [1258.0, 8369.0], [1218.0, 9990.5], [1242.0, 9417.0], [1262.0, 8888.333333333334], [1334.0, 8033.0], [1322.0, 8646.0], [1342.0, 9232.0], [1338.0, 9148.0], [1330.0, 9847.0], [1294.0, 8892.333333333334], [1290.0, 9028.0], [1286.0, 9354.5], [1298.0, 8842.166666666666], [1402.0, 7561.0], [1394.0, 9212.0], [1378.0, 8320.0], [1382.0, 7504.0], [1386.0, 9597.0], [1390.0, 7492.0], [1398.0, 8447.5], [1374.0, 9646.0], [1346.0, 8573.0], [1350.0, 8499.0], [1354.0, 8282.0], [1358.0, 8438.0], [1370.0, 7887.0], [1366.0, 9179.0], [1362.0, 8374.0], [1458.0, 7615.0], [1446.0, 7153.0], [1470.0, 7908.333333333333], [1450.0, 7134.0], [1454.0, 8024.0], [1462.0, 9038.0], [1410.0, 9027.0], [1414.0, 8502.0], [1418.0, 8666.0], [1422.0, 8392.0], [1434.0, 8406.0], [1430.0, 7310.0], [1426.0, 7294.0], [1530.0, 7650.0], [1526.0, 7352.5], [1534.0, 7372.0], [1506.0, 7244.0], [1510.0, 8724.0], [1514.0, 6938.0], [1518.0, 7640.0], [1522.0, 7369.0], [1474.0, 7763.25], [1478.0, 7385.0], [1482.0, 8445.0], [1486.0, 7615.0], [1502.0, 9045.0], [1498.0, 9106.0], [1494.0, 8586.0], [1490.0, 7909.0], [1594.0, 7222.5], [1590.0, 8585.0], [1598.0, 8021.0], [1570.0, 7724.0], [1574.0, 8390.0], [1578.0, 8339.0], [1582.0, 8403.5], [1550.0, 8698.5], [1546.0, 8078.0], [1542.0, 7076.0], [1538.0, 6828.0], [1566.0, 7197.0], [1562.0, 7067.0], [1558.0, 8316.0], [1554.0, 8420.0], [1654.0, 7404.0], [1662.0, 5916.0], [1634.0, 6223.0], [1638.0, 6739.0], [1642.0, 6442.0], [1646.0, 6086.0], [1650.0, 7119.0], [1606.0, 6468.0], [1602.0, 7173.0], [1630.0, 7441.0], [1626.0, 8363.0], [1622.0, 7726.0], [1618.0, 6462.0], [1726.0, 6822.0], [1698.0, 5999.0], [1702.0, 6137.0], [1706.0, 6138.0], [1710.0, 6147.0], [1722.0, 6617.0], [1718.0, 5896.0], [1714.0, 5946.0], [1670.0, 5823.0], [1674.0, 7151.0], [1678.0, 6587.5], [1694.0, 6385.0], [1690.0, 6147.0], [1682.0, 6338.0], [1786.0, 5938.0], [1790.0, 5669.0], [1762.0, 7019.0], [1766.0, 6150.0], [1770.0, 5557.5], [1774.0, 6572.0], [1782.0, 5882.0], [1730.0, 5720.0], [1734.0, 6870.0], [1738.0, 6337.0], [1742.0, 5568.0], [1758.0, 5590.0], [1754.0, 5709.0], [1750.0, 5648.0], [1746.0, 5604.0], [1846.0, 4611.0], [1842.0, 6363.0], [1854.0, 6252.0], [1830.0, 5650.0], [1834.0, 6064.0], [1838.0, 6112.0], [1850.0, 5220.0], [1794.0, 5547.0], [1798.0, 5833.0], [1802.0, 6629.0], [1806.0, 6193.0], [1818.0, 6034.0], [1810.0, 5663.0], [1918.0, 4300.0], [1890.0, 5325.0], [1894.0, 5115.0], [1898.0, 5927.0], [1902.0, 4393.0], [1914.0, 5484.0], [1910.0, 4696.0], [1906.0, 5901.0], [1862.0, 5426.6], [1866.0, 6148.0], [1870.0, 6153.0], [1886.0, 5791.0], [1882.0, 5227.0], [1878.0, 5251.0], [1874.0, 5214.0], [1926.0, 4011.0], [1954.0, 3329.0], [1958.0, 3058.0], [1982.0, 3896.0], [1922.0, 4671.0], [1930.0, 5507.0], [1934.0, 5484.0], [1950.0, 3167.0], [1946.0, 4668.0], [1942.0, 5148.0], [1938.0, 3297.0], [1986.0, 3187.0], [1998.0, 2836.0], [1994.0, 3318.0], [1039.0, 8933.0], [1087.0, 10667.0], [1027.0, 8957.0], [1055.0, 9986.142857142857], [1147.0, 9770.5], [1127.0, 10024.666666666666], [1143.0, 9592.5], [1095.0, 9618.0], [1099.0, 10088.75], [1135.0, 10333.0], [1187.0, 9619.5], [1215.0, 9115.0], [1195.0, 9565.5], [1199.0, 9257.75], [1207.0, 9255.0], [1163.0, 9466.666666666666], [1267.0, 9177.0], [1255.0, 10210.25], [1227.0, 10597.0], [1223.0, 8835.5], [1247.0, 9990.5], [1243.0, 9688.0], [1239.0, 9472.0], [1259.0, 8383.0], [1339.0, 8047.0], [1343.0, 8383.0], [1315.0, 8495.5], [1319.0, 8557.5], [1323.0, 8683.0], [1327.0, 8865.0], [1335.0, 7813.0], [1331.0, 8096.0], [1291.0, 8782.0], [1287.0, 8977.0], [1311.0, 8485.0], [1307.0, 8663.0], [1407.0, 8703.0], [1403.0, 7428.0], [1379.0, 8635.0], [1383.0, 9613.0], [1387.0, 9241.0], [1391.0, 8606.0], [1399.0, 9532.0], [1395.0, 8334.0], [1347.0, 8978.0], [1351.0, 9320.0], [1355.0, 9428.0], [1359.0, 9171.0], [1363.0, 9668.0], [1419.0, 7432.0], [1447.0, 8401.0], [1451.0, 8467.0], [1467.0, 8408.0], [1439.0, 8412.0], [1411.0, 7778.0], [1415.0, 9453.0], [1423.0, 8938.0], [1431.0, 7194.0], [1523.0, 8111.0], [1511.0, 8622.0], [1515.0, 9003.0], [1527.0, 8087.0], [1503.0, 8995.0], [1475.0, 7979.0], [1479.0, 7040.0], [1483.0, 7159.0], [1487.0, 7858.0], [1499.0, 6976.0], [1495.0, 8774.0], [1591.0, 8572.0], [1575.0, 6530.0], [1595.0, 8561.0], [1579.0, 7116.0], [1583.0, 8559.0], [1587.0, 7408.5], [1551.0, 8853.0], [1547.0, 6827.0], [1543.0, 7067.0], [1567.0, 8421.0], [1563.0, 8085.0], [1559.0, 8795.0], [1555.0, 7479.0], [1655.0, 7784.0], [1635.0, 8296.0], [1639.0, 7364.0], [1643.0, 8199.0], [1647.0, 8175.0], [1651.0, 7185.0], [1615.0, 7414.5], [1611.0, 8260.0], [1607.0, 8500.0], [1603.0, 7973.0], [1631.0, 8023.0], [1627.0, 8342.0], [1623.0, 7117.0], [1619.0, 8397.0], [1723.0, 5941.0], [1727.0, 5728.0], [1699.0, 7723.0], [1707.0, 6869.0], [1711.0, 6891.0], [1719.0, 5684.0], [1715.0, 7514.0], [1695.0, 6363.0], [1671.0, 7622.0], [1675.0, 6321.0], [1679.0, 7607.0], [1691.0, 5998.0], [1683.0, 6277.0], [1791.0, 5867.0], [1783.0, 4684.0], [1779.0, 5963.5], [1787.0, 6722.0], [1763.0, 5744.0], [1767.0, 5708.0], [1771.0, 6023.0], [1775.0, 5597.0], [1759.0, 6238.0], [1731.0, 7076.0], [1735.0, 5898.0], [1739.0, 6360.0], [1743.0, 5589.0], [1755.0, 6436.0], [1751.0, 6145.0], [1747.0, 5913.0], [1847.0, 5888.0], [1851.0, 6270.0], [1827.0, 4929.5], [1831.0, 4399.0], [1835.0, 6408.0], [1839.0, 5948.0], [1843.0, 6051.0], [1823.0, 6324.0], [1795.0, 6665.0], [1803.0, 5619.0], [1807.0, 6344.0], [1819.0, 5673.0], [1815.0, 6511.5], [1811.0, 6567.0], [1915.0, 5473.0], [1919.0, 5690.0], [1891.0, 4994.0], [1895.0, 5783.0], [1899.0, 4388.0], [1903.0, 5918.0], [1911.0, 3738.0], [1907.0, 4500.0], [1887.0, 6059.0], [1863.0, 5675.0], [1867.0, 5716.0], [1871.0, 5881.0], [1875.0, 4062.0], [1975.0, 3005.0], [1983.0, 3403.0], [1955.0, 3328.0], [1979.0, 3458.071428571429], [1951.0, 3166.0], [1923.0, 4749.0], [1927.0, 5545.0], [1931.0, 5044.0], [1935.0, 4270.0], [1947.0, 3917.0], [1943.0, 3271.0], [1939.0, 5197.0], [1959.0, 3068.0], [1987.0, 3070.0], [1995.0, 3192.0], [1991.0, 3355.0], [1.0, 44630.0]], "isOverall": false, "label": "Access Animation Page", "isController": false}, {"data": [[1001.3024999999991, 10885.467499999984]], "isOverall": false, "label": "Access Animation Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7.7, "minX": 1.57139604E12, "maxY": 262502.35, "series": [{"data": [[1.5713961E12, 263.0], [1.57139604E12, 262502.35]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5713961E12, 7.7], [1.57139604E12, 7692.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5713961E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 10851.128628628612, "minX": 1.57139604E12, "maxY": 45190.0, "series": [{"data": [[1.5713961E12, 45190.0], [1.57139604E12, 10851.128628628612]], "isOverall": false, "label": "Access Animation Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5713961E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5912.934434434426, "minX": 1.57139604E12, "maxY": 44902.0, "series": [{"data": [[1.5713961E12, 44902.0], [1.57139604E12, 5912.934434434426]], "isOverall": false, "label": "Access Animation Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5713961E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2071.5, "minX": 1.57139604E12, "maxY": 2356.599599599596, "series": [{"data": [[1.5713961E12, 2071.5], [1.57139604E12, 2356.599599599596]], "isOverall": false, "label": "Access Animation Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5713961E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2653.0, "minX": 1.57139604E12, "maxY": 45750.0, "series": [{"data": [[1.5713961E12, 45750.0], [1.57139604E12, 43264.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5713961E12, 44630.0], [1.57139604E12, 2653.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5713961E12, 45750.0], [1.57139604E12, 16264.400000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5713961E12, 45750.0], [1.57139604E12, 24538.22]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5713961E12, 45750.0], [1.57139604E12, 19651.49999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5713961E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3192.0, "minX": 1.0, "maxY": 40192.0, "series": [{"data": [[135.0, 5888.0], [134.0, 7265.5], [8.0, 20701.5], [32.0, 24127.0], [2.0, 40192.0], [35.0, 3328.0], [136.0, 11128.0], [36.0, 4998.0], [154.0, 15850.5], [218.0, 8334.0], [15.0, 17963.0], [62.0, 16453.5], [263.0, 9403.0], [1.0, 32041.0], [272.0, 10230.0], [76.0, 14195.0], [5.0, 23225.0], [21.0, 3192.0], [98.0, 6160.0], [6.0, 25722.5], [111.0, 12006.0], [7.0, 20447.0], [28.0, 21252.5], [125.0, 13801.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 272.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1918.0, "minX": 1.0, "maxY": 24534.0, "series": [{"data": [[135.0, 2410.0], [134.0, 4289.5], [8.0, 19661.5], [32.0, 13577.0], [2.0, 24534.0], [35.0, 2286.0], [136.0, 5143.5], [36.0, 2261.0], [154.0, 4799.5], [218.0, 4528.0], [15.0, 5022.0], [62.0, 4428.5], [263.0, 5022.0], [1.0, 13261.0], [272.0, 4775.5], [76.0, 7736.0], [5.0, 4332.0], [21.0, 1918.0], [98.0, 2645.5], [6.0, 15337.5], [111.0, 10444.0], [7.0, 6282.0], [28.0, 20136.5], [125.0, 12522.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 272.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.57139604E12, "maxY": 33.333333333333336, "series": [{"data": [[1.57139604E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139604E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.57139604E12, "maxY": 33.3, "series": [{"data": [[1.5713961E12, 0.03333333333333333], [1.57139604E12, 33.3]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5713961E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.57139604E12, "maxY": 33.3, "series": [{"data": [[1.5713961E12, 0.03333333333333333], [1.57139604E12, 33.3]], "isOverall": false, "label": "Access Animation Page-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5713961E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.57139604E12, "maxY": 33.3, "series": [{"data": [[1.5713961E12, 0.03333333333333333], [1.57139604E12, 33.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5713961E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

