/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 17352.0, "minX": 0.0, "maxY": 46964.0, "series": [{"data": [[0.0, 17352.0], [0.1, 17840.0], [0.2, 17850.0], [0.3, 17850.0], [0.4, 17852.0], [0.5, 17854.0], [0.6, 17854.0], [0.7, 17856.0], [0.8, 17856.0], [0.9, 17857.0], [1.0, 17857.0], [1.1, 17857.0], [1.2, 17857.0], [1.3, 17919.0], [1.4, 17920.0], [1.5, 17921.0], [1.6, 17922.0], [1.7, 17922.0], [1.8, 17923.0], [1.9, 17925.0], [2.0, 17925.0], [2.1, 17926.0], [2.2, 17928.0], [2.3, 17928.0], [2.4, 17931.0], [2.5, 17932.0], [2.6, 17932.0], [2.7, 17933.0], [2.8, 17933.0], [2.9, 17935.0], [3.0, 17936.0], [3.1, 17936.0], [3.2, 17937.0], [3.3, 17937.0], [3.4, 17938.0], [3.5, 17938.0], [3.6, 17939.0], [3.7, 17939.0], [3.8, 17940.0], [3.9, 17940.0], [4.0, 17940.0], [4.1, 17940.0], [4.2, 17940.0], [4.3, 17940.0], [4.4, 17940.0], [4.5, 17940.0], [4.6, 17940.0], [4.7, 17941.0], [4.8, 17942.0], [4.9, 17942.0], [5.0, 17943.0], [5.1, 17944.0], [5.2, 17944.0], [5.3, 17944.0], [5.4, 17945.0], [5.5, 17945.0], [5.6, 17945.0], [5.7, 17946.0], [5.8, 17946.0], [5.9, 17946.0], [6.0, 17946.0], [6.1, 17948.0], [6.2, 17948.0], [6.3, 17948.0], [6.4, 17948.0], [6.5, 17948.0], [6.6, 17949.0], [6.7, 17949.0], [6.8, 17950.0], [6.9, 17950.0], [7.0, 17951.0], [7.1, 17952.0], [7.2, 17952.0], [7.3, 17952.0], [7.4, 17952.0], [7.5, 17952.0], [7.6, 17953.0], [7.7, 17953.0], [7.8, 17953.0], [7.9, 17955.0], [8.0, 17955.0], [8.1, 17955.0], [8.2, 17955.0], [8.3, 17956.0], [8.4, 17957.0], [8.5, 17957.0], [8.6, 17958.0], [8.7, 17958.0], [8.8, 17959.0], [8.9, 17959.0], [9.0, 17963.0], [9.1, 17964.0], [9.2, 17965.0], [9.3, 17966.0], [9.4, 17966.0], [9.5, 17966.0], [9.6, 17966.0], [9.7, 17966.0], [9.8, 17966.0], [9.9, 17967.0], [10.0, 17967.0], [10.1, 17969.0], [10.2, 17970.0], [10.3, 17971.0], [10.4, 17972.0], [10.5, 17972.0], [10.6, 17975.0], [10.7, 17976.0], [10.8, 17977.0], [10.9, 17978.0], [11.0, 17978.0], [11.1, 17982.0], [11.2, 17984.0], [11.3, 17984.0], [11.4, 17985.0], [11.5, 17986.0], [11.6, 17988.0], [11.7, 17990.0], [11.8, 17990.0], [11.9, 17991.0], [12.0, 18034.0], [12.1, 18037.0], [12.2, 18040.0], [12.3, 18040.0], [12.4, 18043.0], [12.5, 18044.0], [12.6, 18048.0], [12.7, 18051.0], [12.8, 18051.0], [12.9, 18053.0], [13.0, 18054.0], [13.1, 18058.0], [13.2, 18065.0], [13.3, 18066.0], [13.4, 18068.0], [13.5, 18071.0], [13.6, 18072.0], [13.7, 18072.0], [13.8, 18072.0], [13.9, 18073.0], [14.0, 18073.0], [14.1, 18074.0], [14.2, 18074.0], [14.3, 18076.0], [14.4, 18076.0], [14.5, 18077.0], [14.6, 18077.0], [14.7, 18078.0], [14.8, 18079.0], [14.9, 18080.0], [15.0, 18080.0], [15.1, 18081.0], [15.2, 18081.0], [15.3, 18082.0], [15.4, 18083.0], [15.5, 18083.0], [15.6, 18083.0], [15.7, 18083.0], [15.8, 18084.0], [15.9, 18085.0], [16.0, 18085.0], [16.1, 18087.0], [16.2, 18087.0], [16.3, 18091.0], [16.4, 18091.0], [16.5, 18096.0], [16.6, 18099.0], [16.7, 18189.0], [16.8, 18190.0], [16.9, 18191.0], [17.0, 18191.0], [17.1, 18192.0], [17.2, 18192.0], [17.3, 18193.0], [17.4, 18193.0], [17.5, 18194.0], [17.6, 18194.0], [17.7, 18195.0], [17.8, 18195.0], [17.9, 18195.0], [18.0, 18196.0], [18.1, 18196.0], [18.2, 18196.0], [18.3, 18197.0], [18.4, 18197.0], [18.5, 18197.0], [18.6, 18197.0], [18.7, 18198.0], [18.8, 18198.0], [18.9, 18202.0], [19.0, 18221.0], [19.1, 18223.0], [19.2, 18288.0], [19.3, 18290.0], [19.4, 18290.0], [19.5, 18318.0], [19.6, 18318.0], [19.7, 18319.0], [19.8, 18319.0], [19.9, 18320.0], [20.0, 18322.0], [20.1, 18323.0], [20.2, 18374.0], [20.3, 18375.0], [20.4, 18375.0], [20.5, 18376.0], [20.6, 18376.0], [20.7, 18376.0], [20.8, 18377.0], [20.9, 18377.0], [21.0, 18377.0], [21.1, 18377.0], [21.2, 18378.0], [21.3, 18378.0], [21.4, 18378.0], [21.5, 18379.0], [21.6, 18379.0], [21.7, 18380.0], [21.8, 18381.0], [21.9, 18381.0], [22.0, 18381.0], [22.1, 18381.0], [22.2, 18381.0], [22.3, 18381.0], [22.4, 18382.0], [22.5, 18383.0], [22.6, 18383.0], [22.7, 18383.0], [22.8, 18383.0], [22.9, 18383.0], [23.0, 18383.0], [23.1, 18383.0], [23.2, 18384.0], [23.3, 18384.0], [23.4, 18384.0], [23.5, 18384.0], [23.6, 18385.0], [23.7, 18385.0], [23.8, 18385.0], [23.9, 18385.0], [24.0, 18386.0], [24.1, 18386.0], [24.2, 18386.0], [24.3, 18386.0], [24.4, 18386.0], [24.5, 18386.0], [24.6, 18386.0], [24.7, 18386.0], [24.8, 18387.0], [24.9, 18388.0], [25.0, 18388.0], [25.1, 18388.0], [25.2, 18389.0], [25.3, 18390.0], [25.4, 18391.0], [25.5, 18393.0], [25.6, 18394.0], [25.7, 18395.0], [25.8, 18398.0], [25.9, 18398.0], [26.0, 18407.0], [26.1, 18408.0], [26.2, 18408.0], [26.3, 18408.0], [26.4, 18409.0], [26.5, 18410.0], [26.6, 18412.0], [26.7, 18420.0], [26.8, 18423.0], [26.9, 18423.0], [27.0, 18475.0], [27.1, 18476.0], [27.2, 18477.0], [27.3, 18479.0], [27.4, 18481.0], [27.5, 18485.0], [27.6, 18485.0], [27.7, 18488.0], [27.8, 18488.0], [27.9, 18497.0], [28.0, 18504.0], [28.1, 18506.0], [28.2, 18506.0], [28.3, 18507.0], [28.4, 18507.0], [28.5, 18507.0], [28.6, 18507.0], [28.7, 18507.0], [28.8, 18507.0], [28.9, 18508.0], [29.0, 18508.0], [29.1, 18509.0], [29.2, 18509.0], [29.3, 18509.0], [29.4, 18509.0], [29.5, 18509.0], [29.6, 18509.0], [29.7, 18509.0], [29.8, 18510.0], [29.9, 18510.0], [30.0, 18511.0], [30.1, 18512.0], [30.2, 18513.0], [30.3, 18520.0], [30.4, 18521.0], [30.5, 18522.0], [30.6, 18523.0], [30.7, 18524.0], [30.8, 18527.0], [30.9, 18556.0], [31.0, 18557.0], [31.1, 18562.0], [31.2, 18564.0], [31.3, 18567.0], [31.4, 18567.0], [31.5, 18568.0], [31.6, 18569.0], [31.7, 18574.0], [31.8, 18576.0], [31.9, 18576.0], [32.0, 18576.0], [32.1, 18578.0], [32.2, 18581.0], [32.3, 18582.0], [32.4, 18583.0], [32.5, 18583.0], [32.6, 18584.0], [32.7, 18585.0], [32.8, 18587.0], [32.9, 18588.0], [33.0, 18588.0], [33.1, 18588.0], [33.2, 18588.0], [33.3, 18588.0], [33.4, 18589.0], [33.5, 18590.0], [33.6, 18590.0], [33.7, 18591.0], [33.8, 18591.0], [33.9, 18592.0], [34.0, 18592.0], [34.1, 18593.0], [34.2, 18595.0], [34.3, 18597.0], [34.4, 18601.0], [34.5, 18602.0], [34.6, 18605.0], [34.7, 18605.0], [34.8, 18607.0], [34.9, 18608.0], [35.0, 18608.0], [35.1, 18613.0], [35.2, 18614.0], [35.3, 18620.0], [35.4, 18626.0], [35.5, 18626.0], [35.6, 18646.0], [35.7, 18653.0], [35.8, 18667.0], [35.9, 18670.0], [36.0, 18674.0], [36.1, 18675.0], [36.2, 18675.0], [36.3, 18696.0], [36.4, 18739.0], [36.5, 18740.0], [36.6, 18740.0], [36.7, 18756.0], [36.8, 18757.0], [36.9, 18760.0], [37.0, 18774.0], [37.1, 18778.0], [37.2, 18789.0], [37.3, 18790.0], [37.4, 18807.0], [37.5, 18837.0], [37.6, 18837.0], [37.7, 18838.0], [37.8, 18839.0], [37.9, 18839.0], [38.0, 18846.0], [38.1, 18855.0], [38.2, 18857.0], [38.3, 18858.0], [38.4, 18864.0], [38.5, 18866.0], [38.6, 18867.0], [38.7, 18869.0], [38.8, 18869.0], [38.9, 18869.0], [39.0, 18873.0], [39.1, 18873.0], [39.2, 18875.0], [39.3, 18875.0], [39.4, 18877.0], [39.5, 18886.0], [39.6, 18916.0], [39.7, 18916.0], [39.8, 18916.0], [39.9, 18916.0], [40.0, 18918.0], [40.1, 19004.0], [40.2, 19005.0], [40.3, 19022.0], [40.4, 19023.0], [40.5, 19023.0], [40.6, 19024.0], [40.7, 19024.0], [40.8, 19024.0], [40.9, 19025.0], [41.0, 19026.0], [41.1, 19026.0], [41.2, 19027.0], [41.3, 19028.0], [41.4, 19028.0], [41.5, 19031.0], [41.6, 19035.0], [41.7, 19035.0], [41.8, 19036.0], [41.9, 19040.0], [42.0, 19041.0], [42.1, 19042.0], [42.2, 19042.0], [42.3, 19042.0], [42.4, 19043.0], [42.5, 19043.0], [42.6, 19043.0], [42.7, 19059.0], [42.8, 19059.0], [42.9, 19076.0], [43.0, 19103.0], [43.1, 19104.0], [43.2, 19104.0], [43.3, 19104.0], [43.4, 19105.0], [43.5, 19106.0], [43.6, 19106.0], [43.7, 19106.0], [43.8, 19106.0], [43.9, 19107.0], [44.0, 19107.0], [44.1, 19119.0], [44.2, 19121.0], [44.3, 19175.0], [44.4, 19190.0], [44.5, 19191.0], [44.6, 19191.0], [44.7, 19191.0], [44.8, 19192.0], [44.9, 19192.0], [45.0, 19192.0], [45.1, 19193.0], [45.2, 19193.0], [45.3, 19196.0], [45.4, 19203.0], [45.5, 19205.0], [45.6, 19205.0], [45.7, 19223.0], [45.8, 19223.0], [45.9, 19225.0], [46.0, 19244.0], [46.1, 19251.0], [46.2, 19303.0], [46.3, 19305.0], [46.4, 19306.0], [46.5, 19315.0], [46.6, 19406.0], [46.7, 19891.0], [46.8, 20093.0], [46.9, 20172.0], [47.0, 21109.0], [47.1, 23711.0], [47.2, 23712.0], [47.3, 23833.0], [47.4, 23958.0], [47.5, 23958.0], [47.6, 25313.0], [47.7, 25381.0], [47.8, 25497.0], [47.9, 25500.0], [48.0, 26045.0], [48.1, 26105.0], [48.2, 27557.0], [48.3, 27626.0], [48.4, 27664.0], [48.5, 27666.0], [48.6, 27830.0], [48.7, 27836.0], [48.8, 27904.0], [48.9, 27970.0], [49.0, 28126.0], [49.1, 28132.0], [49.2, 28181.0], [49.3, 28203.0], [49.4, 28262.0], [49.5, 28264.0], [49.6, 28266.0], [49.7, 28313.0], [49.8, 28326.0], [49.9, 28329.0], [50.0, 28374.0], [50.1, 28494.0], [50.2, 28510.0], [50.3, 28694.0], [50.4, 28788.0], [50.5, 28849.0], [50.6, 28950.0], [50.7, 28997.0], [50.8, 29063.0], [50.9, 29299.0], [51.0, 29633.0], [51.1, 29969.0], [51.2, 29971.0], [51.3, 30084.0], [51.4, 30882.0], [51.5, 31705.0], [51.6, 31884.0], [51.7, 32131.0], [51.8, 32260.0], [51.9, 32692.0], [52.0, 33059.0], [52.1, 33763.0], [52.2, 33787.0], [52.3, 33944.0], [52.4, 34066.0], [52.5, 34302.0], [52.6, 34430.0], [52.7, 35725.0], [52.8, 36070.0], [52.9, 36104.0], [53.0, 36419.0], [53.1, 37149.0], [53.2, 37751.0], [53.3, 38238.0], [53.4, 38592.0], [53.5, 38622.0], [53.6, 38880.0], [53.7, 38961.0], [53.8, 39551.0], [53.9, 39893.0], [54.0, 40608.0], [54.1, 40609.0], [54.2, 40815.0], [54.3, 40890.0], [54.4, 40986.0], [54.5, 41971.0], [54.6, 42227.0], [54.7, 42694.0], [54.8, 42791.0], [54.9, 43055.0], [55.0, 43062.0], [55.1, 44130.0], [55.2, 45041.0], [55.3, 45041.0], [55.4, 45278.0], [55.5, 45302.0], [55.6, 45336.0], [55.7, 45341.0], [55.8, 45383.0], [55.9, 45386.0], [56.0, 45387.0], [56.1, 45389.0], [56.2, 45391.0], [56.3, 45392.0], [56.4, 45392.0], [56.5, 45392.0], [56.6, 45397.0], [56.7, 45397.0], [56.8, 45417.0], [56.9, 45417.0], [57.0, 45419.0], [57.1, 45434.0], [57.2, 45435.0], [57.3, 45437.0], [57.4, 45438.0], [57.5, 45445.0], [57.6, 45469.0], [57.7, 45470.0], [57.8, 45487.0], [57.9, 45489.0], [58.0, 45492.0], [58.1, 45493.0], [58.2, 45516.0], [58.3, 45533.0], [58.4, 45535.0], [58.5, 45537.0], [58.6, 45538.0], [58.7, 45538.0], [58.8, 45538.0], [58.9, 45538.0], [59.0, 45540.0], [59.1, 45542.0], [59.2, 45542.0], [59.3, 45543.0], [59.4, 45544.0], [59.5, 45545.0], [59.6, 45548.0], [59.7, 45566.0], [59.8, 45567.0], [59.9, 45567.0], [60.0, 45584.0], [60.1, 45585.0], [60.2, 45585.0], [60.3, 45585.0], [60.4, 45585.0], [60.5, 45585.0], [60.6, 45585.0], [60.7, 45586.0], [60.8, 45587.0], [60.9, 45587.0], [61.0, 45588.0], [61.1, 45590.0], [61.2, 45594.0], [61.3, 45595.0], [61.4, 45597.0], [61.5, 45617.0], [61.6, 45632.0], [61.7, 45634.0], [61.8, 45634.0], [61.9, 45635.0], [62.0, 45635.0], [62.1, 45636.0], [62.2, 45642.0], [62.3, 45643.0], [62.4, 45644.0], [62.5, 45645.0], [62.6, 45646.0], [62.7, 45646.0], [62.8, 45647.0], [62.9, 45648.0], [63.0, 45648.0], [63.1, 45648.0], [63.2, 45648.0], [63.3, 45648.0], [63.4, 45648.0], [63.5, 45650.0], [63.6, 45651.0], [63.7, 45651.0], [63.8, 45653.0], [63.9, 45653.0], [64.0, 45653.0], [64.1, 45656.0], [64.2, 45656.0], [64.3, 45657.0], [64.4, 45659.0], [64.5, 45660.0], [64.6, 45660.0], [64.7, 45660.0], [64.8, 45661.0], [64.9, 45661.0], [65.0, 45661.0], [65.1, 45661.0], [65.2, 45662.0], [65.3, 45662.0], [65.4, 45663.0], [65.5, 45664.0], [65.6, 45664.0], [65.7, 45664.0], [65.8, 45665.0], [65.9, 45667.0], [66.0, 45667.0], [66.1, 45667.0], [66.2, 45668.0], [66.3, 45668.0], [66.4, 45668.0], [66.5, 45669.0], [66.6, 45670.0], [66.7, 45672.0], [66.8, 45673.0], [66.9, 45673.0], [67.0, 45679.0], [67.1, 45680.0], [67.2, 45684.0], [67.3, 45684.0], [67.4, 45686.0], [67.5, 45695.0], [67.6, 45696.0], [67.7, 45697.0], [67.8, 45717.0], [67.9, 45719.0], [68.0, 45719.0], [68.1, 45721.0], [68.2, 45735.0], [68.3, 45743.0], [68.4, 45744.0], [68.5, 45745.0], [68.6, 45746.0], [68.7, 45752.0], [68.8, 45757.0], [68.9, 45762.0], [69.0, 45766.0], [69.1, 45770.0], [69.2, 45773.0], [69.3, 45774.0], [69.4, 45774.0], [69.5, 45775.0], [69.6, 45776.0], [69.7, 45777.0], [69.8, 45777.0], [69.9, 45778.0], [70.0, 45779.0], [70.1, 45780.0], [70.2, 45781.0], [70.3, 45781.0], [70.4, 45783.0], [70.5, 45785.0], [70.6, 45792.0], [70.7, 45793.0], [70.8, 45793.0], [70.9, 45794.0], [71.0, 45799.0], [71.1, 45813.0], [71.2, 45819.0], [71.3, 45824.0], [71.4, 45847.0], [71.5, 45858.0], [71.6, 45858.0], [71.7, 45859.0], [71.8, 45860.0], [71.9, 45860.0], [72.0, 45861.0], [72.1, 45861.0], [72.2, 45861.0], [72.3, 45865.0], [72.4, 45866.0], [72.5, 45868.0], [72.6, 45868.0], [72.7, 45868.0], [72.8, 45870.0], [72.9, 45888.0], [73.0, 45888.0], [73.1, 45900.0], [73.2, 45908.0], [73.3, 45910.0], [73.4, 45911.0], [73.5, 45911.0], [73.6, 45915.0], [73.7, 45917.0], [73.8, 45917.0], [73.9, 45918.0], [74.0, 45918.0], [74.1, 45918.0], [74.2, 45919.0], [74.3, 45919.0], [74.4, 45919.0], [74.5, 45919.0], [74.6, 45920.0], [74.7, 45920.0], [74.8, 45921.0], [74.9, 45921.0], [75.0, 45922.0], [75.1, 45923.0], [75.2, 45924.0], [75.3, 45924.0], [75.4, 45925.0], [75.5, 45925.0], [75.6, 45925.0], [75.7, 45925.0], [75.8, 45925.0], [75.9, 45925.0], [76.0, 45926.0], [76.1, 45926.0], [76.2, 45926.0], [76.3, 45927.0], [76.4, 45927.0], [76.5, 45927.0], [76.6, 45930.0], [76.7, 45930.0], [76.8, 45930.0], [76.9, 45931.0], [77.0, 45931.0], [77.1, 45935.0], [77.2, 45935.0], [77.3, 45948.0], [77.4, 45948.0], [77.5, 45949.0], [77.6, 45950.0], [77.7, 45951.0], [77.8, 45953.0], [77.9, 45955.0], [78.0, 45956.0], [78.1, 45956.0], [78.2, 45956.0], [78.3, 45958.0], [78.4, 45958.0], [78.5, 45958.0], [78.6, 45959.0], [78.7, 45959.0], [78.8, 45960.0], [78.9, 45991.0], [79.0, 45994.0], [79.1, 46010.0], [79.2, 46018.0], [79.3, 46019.0], [79.4, 46022.0], [79.5, 46023.0], [79.6, 46023.0], [79.7, 46024.0], [79.8, 46024.0], [79.9, 46024.0], [80.0, 46025.0], [80.1, 46025.0], [80.2, 46026.0], [80.3, 46026.0], [80.4, 46030.0], [80.5, 46031.0], [80.6, 46032.0], [80.7, 46033.0], [80.8, 46034.0], [80.9, 46036.0], [81.0, 46039.0], [81.1, 46041.0], [81.2, 46043.0], [81.3, 46044.0], [81.4, 46048.0], [81.5, 46048.0], [81.6, 46048.0], [81.7, 46050.0], [81.8, 46050.0], [81.9, 46050.0], [82.0, 46051.0], [82.1, 46051.0], [82.2, 46055.0], [82.3, 46056.0], [82.4, 46056.0], [82.5, 46057.0], [82.6, 46057.0], [82.7, 46058.0], [82.8, 46059.0], [82.9, 46059.0], [83.0, 46059.0], [83.1, 46085.0], [83.2, 46092.0], [83.3, 46102.0], [83.4, 46116.0], [83.5, 46138.0], [83.6, 46140.0], [83.7, 46141.0], [83.8, 46142.0], [83.9, 46142.0], [84.0, 46142.0], [84.1, 46142.0], [84.2, 46143.0], [84.3, 46144.0], [84.4, 46144.0], [84.5, 46146.0], [84.6, 46146.0], [84.7, 46146.0], [84.8, 46146.0], [84.9, 46147.0], [85.0, 46147.0], [85.1, 46147.0], [85.2, 46148.0], [85.3, 46148.0], [85.4, 46148.0], [85.5, 46149.0], [85.6, 46149.0], [85.7, 46149.0], [85.8, 46150.0], [85.9, 46150.0], [86.0, 46151.0], [86.1, 46151.0], [86.2, 46151.0], [86.3, 46151.0], [86.4, 46152.0], [86.5, 46152.0], [86.6, 46152.0], [86.7, 46154.0], [86.8, 46154.0], [86.9, 46154.0], [87.0, 46155.0], [87.1, 46155.0], [87.2, 46155.0], [87.3, 46155.0], [87.4, 46156.0], [87.5, 46158.0], [87.6, 46158.0], [87.7, 46158.0], [87.8, 46159.0], [87.9, 46162.0], [88.0, 46163.0], [88.1, 46164.0], [88.2, 46178.0], [88.3, 46185.0], [88.4, 46185.0], [88.5, 46186.0], [88.6, 46186.0], [88.7, 46189.0], [88.8, 46202.0], [88.9, 46210.0], [89.0, 46212.0], [89.1, 46230.0], [89.2, 46233.0], [89.3, 46234.0], [89.4, 46241.0], [89.5, 46248.0], [89.6, 46251.0], [89.7, 46252.0], [89.8, 46252.0], [89.9, 46254.0], [90.0, 46261.0], [90.1, 46265.0], [90.2, 46270.0], [90.3, 46275.0], [90.4, 46279.0], [90.5, 46282.0], [90.6, 46287.0], [90.7, 46294.0], [90.8, 46295.0], [90.9, 46298.0], [91.0, 46298.0], [91.1, 46302.0], [91.2, 46309.0], [91.3, 46310.0], [91.4, 46310.0], [91.5, 46311.0], [91.6, 46317.0], [91.7, 46326.0], [91.8, 46355.0], [91.9, 46361.0], [92.0, 46378.0], [92.1, 46379.0], [92.2, 46395.0], [92.3, 46400.0], [92.4, 46402.0], [92.5, 46403.0], [92.6, 46403.0], [92.7, 46460.0], [92.8, 46461.0], [92.9, 46462.0], [93.0, 46463.0], [93.1, 46464.0], [93.2, 46464.0], [93.3, 46466.0], [93.4, 46469.0], [93.5, 46483.0], [93.6, 46484.0], [93.7, 46498.0], [93.8, 46499.0], [93.9, 46499.0], [94.0, 46510.0], [94.1, 46512.0], [94.2, 46525.0], [94.3, 46559.0], [94.4, 46562.0], [94.5, 46564.0], [94.6, 46564.0], [94.7, 46565.0], [94.8, 46570.0], [94.9, 46572.0], [95.0, 46575.0], [95.1, 46575.0], [95.2, 46576.0], [95.3, 46576.0], [95.4, 46585.0], [95.5, 46588.0], [95.6, 46592.0], [95.7, 46637.0], [95.8, 46638.0], [95.9, 46644.0], [96.0, 46646.0], [96.1, 46647.0], [96.2, 46647.0], [96.3, 46652.0], [96.4, 46727.0], [96.5, 46734.0], [96.6, 46736.0], [96.7, 46737.0], [96.8, 46742.0], [96.9, 46745.0], [97.0, 46748.0], [97.1, 46759.0], [97.2, 46785.0], [97.3, 46794.0], [97.4, 46795.0], [97.5, 46795.0], [97.6, 46795.0], [97.7, 46796.0], [97.8, 46797.0], [97.9, 46802.0], [98.0, 46803.0], [98.1, 46805.0], [98.2, 46810.0], [98.3, 46811.0], [98.4, 46812.0], [98.5, 46813.0], [98.6, 46814.0], [98.7, 46815.0], [98.8, 46815.0], [98.9, 46815.0], [99.0, 46836.0], [99.1, 46841.0], [99.2, 46850.0], [99.3, 46872.0], [99.4, 46874.0], [99.5, 46880.0], [99.6, 46953.0], [99.7, 46963.0], [99.8, 46963.0], [99.9, 46964.0]], "isOverall": false, "label": "Login into Web", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 17300.0, "maxY": 107.0, "series": [{"data": [[33700.0, 2.0], [33900.0, 1.0], [34300.0, 1.0], [35700.0, 1.0], [36100.0, 1.0], [37100.0, 1.0], [37700.0, 1.0], [38500.0, 1.0], [38900.0, 1.0], [39500.0, 1.0], [40900.0, 1.0], [41900.0, 1.0], [42700.0, 1.0], [44100.0, 1.0], [45500.0, 33.0], [45300.0, 13.0], [46100.0, 55.0], [46700.0, 15.0], [46900.0, 4.0], [45700.0, 33.0], [45900.0, 60.0], [46500.0, 17.0], [46300.0, 12.0], [17300.0, 1.0], [17800.0, 12.0], [17900.0, 107.0], [18000.0, 47.0], [18200.0, 6.0], [18100.0, 22.0], [18300.0, 64.0], [18400.0, 20.0], [19200.0, 8.0], [18500.0, 64.0], [18600.0, 20.0], [18700.0, 10.0], [18800.0, 22.0], [19000.0, 29.0], [18900.0, 5.0], [19100.0, 24.0], [19300.0, 4.0], [19400.0, 1.0], [20000.0, 1.0], [19800.0, 1.0], [20100.0, 1.0], [21100.0, 1.0], [23800.0, 1.0], [23700.0, 2.0], [23900.0, 2.0], [25300.0, 2.0], [25400.0, 1.0], [25500.0, 1.0], [26100.0, 1.0], [26000.0, 1.0], [27500.0, 1.0], [27600.0, 3.0], [28500.0, 1.0], [28300.0, 4.0], [27800.0, 2.0], [28400.0, 1.0], [28600.0, 1.0], [27900.0, 2.0], [28100.0, 3.0], [28200.0, 4.0], [28700.0, 1.0], [28800.0, 1.0], [28900.0, 2.0], [29200.0, 1.0], [29000.0, 1.0], [29600.0, 1.0], [29900.0, 2.0], [30000.0, 1.0], [30800.0, 1.0], [31700.0, 1.0], [32600.0, 1.0], [31800.0, 1.0], [32100.0, 1.0], [32200.0, 1.0], [33000.0, 1.0], [34000.0, 1.0], [34400.0, 1.0], [36000.0, 1.0], [36400.0, 1.0], [38200.0, 1.0], [38800.0, 1.0], [38600.0, 1.0], [39800.0, 1.0], [40800.0, 2.0], [40600.0, 2.0], [42200.0, 1.0], [42600.0, 1.0], [43000.0, 2.0], [45000.0, 2.0], [45400.0, 14.0], [45200.0, 1.0], [46200.0, 23.0], [46800.0, 17.0], [46600.0, 7.0], [46000.0, 43.0], [45600.0, 63.0], [45800.0, 20.0], [46400.0, 17.0]], "isOverall": false, "label": "Login into Web", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 46900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 55.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 945.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 55.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 945.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 249.62634989200825, "minX": 1.57164216E12, "maxY": 926.9497206703912, "series": [{"data": [[1.57164222E12, 249.62634989200825], [1.57164216E12, 926.9497206703912]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57164222E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 18389.373626373614, "minX": 23.0, "maxY": 46963.0, "series": [{"data": [[23.0, 46162.0], [27.0, 46155.0], [29.0, 46163.0], [33.0, 46177.75], [32.0, 46219.5], [35.0, 46413.333333333336], [36.0, 46532.5], [39.0, 46151.0], [38.0, 46158.0], [41.0, 46158.0], [40.0, 46151.0], [43.0, 46148.0], [42.0, 46159.0], [45.0, 46549.0], [44.0, 46150.0], [47.0, 46370.333333333336], [48.0, 46149.0], [50.0, 46522.0], [52.0, 46313.5], [55.0, 46813.0], [54.0, 46963.0], [57.0, 46248.0], [56.0, 46796.0], [59.0, 46520.0], [61.0, 46607.666666666664], [60.0, 46147.0], [62.0, 46483.0], [67.0, 46142.0], [65.0, 46373.5], [64.0, 46152.0], [71.0, 46811.0], [69.0, 46386.666666666664], [68.0, 46148.0], [75.0, 46142.0], [74.0, 46312.75], [73.0, 46146.0], [72.0, 46252.0], [78.0, 46404.0], [77.0, 46148.0], [76.0, 46142.0], [82.0, 46139.5], [81.0, 46546.5], [87.0, 46350.666666666664], [84.0, 46617.333333333336], [88.0, 45991.0], [135.0, 46058.0], [143.0, 46667.0], [142.0, 45961.0], [140.0, 45958.333333333336], [138.0, 45935.0], [137.0, 45926.0], [136.0, 45960.0], [151.0, 45981.0], [149.0, 46059.0], [148.0, 46056.0], [147.0, 46309.0], [145.0, 45939.33333333333], [144.0, 46019.5], [159.0, 46850.0], [158.0, 45989.5], [155.0, 46133.75], [153.0, 46003.666666666664], [165.0, 45987.6], [164.0, 45925.0], [163.0, 45994.666666666664], [161.0, 46405.333333333336], [160.0, 45994.0], [175.0, 45919.0], [174.0, 45918.0], [173.0, 46050.0], [172.0, 46328.5], [170.0, 46051.0], [168.0, 46160.5], [183.0, 45920.0], [182.0, 46048.0], [181.0, 46391.0], [180.0, 46646.0], [179.0, 45922.0], [178.0, 45919.0], [176.0, 46448.0], [190.0, 45940.666666666664], [189.0, 45948.0], [188.0, 46114.5], [187.0, 45917.0], [186.0, 46251.5], [185.0, 46565.0], [184.0, 45937.0], [198.0, 46277.4], [196.0, 46394.0], [195.0, 45918.0], [193.0, 45917.0], [192.0, 46644.0], [207.0, 46039.0], [206.0, 46010.0], [203.0, 46081.6], [202.0, 45919.0], [201.0, 46727.0], [200.0, 45911.0], [210.0, 45962.5], [208.0, 46475.5], [223.0, 45994.0], [222.0, 45869.0], [221.0, 45861.0], [230.0, 45891.4], [228.0, 45861.666666666664], [226.0, 46022.75], [225.0, 45866.0], [224.0, 46084.333333333336], [239.0, 46099.0], [246.0, 45673.0], [240.0, 45735.0], [249.0, 45969.6], [268.0, 45668.0], [267.0, 45729.0], [287.0, 45661.0], [285.0, 45669.0], [284.0, 45770.0], [282.0, 45665.0], [279.0, 45921.666666666664], [276.0, 45695.0], [274.0, 45663.0], [273.0, 45701.666666666664], [303.0, 45725.5], [302.0, 45997.0], [299.0, 45711.0], [298.0, 45667.0], [295.0, 45793.0], [294.0, 46133.5], [292.0, 45665.333333333336], [290.0, 46309.5], [288.0, 45662.0], [351.0, 45824.5], [350.0, 45905.2089552239], [347.0, 46064.5], [379.0, 45817.535714285725], [397.0, 45589.5], [396.0, 45541.5], [395.0, 45578.0], [393.0, 45811.0], [392.0, 45541.0], [391.0, 45634.0], [387.0, 45642.0], [386.0, 46189.0], [403.0, 46210.0], [402.0, 45582.333333333336], [400.0, 45760.8], [417.0, 45678.42857142857], [447.0, 45290.0], [445.0, 45405.5], [443.0, 45798.5], [441.0, 45605.125], [460.0, 40608.5], [462.0, 39893.0], [463.0, 39551.0], [461.0, 40815.0], [458.0, 40938.0], [456.0, 41971.0], [455.0, 42227.0], [449.0, 45041.0], [451.0, 43062.0], [450.0, 44130.0], [454.0, 42742.5], [452.0, 43055.0], [478.0, 34005.0], [476.0, 34302.0], [466.0, 38622.0], [465.0, 38592.0], [464.0, 38961.0], [475.0, 34430.0], [474.0, 35725.0], [473.0, 36070.0], [472.0, 36104.0], [471.0, 36784.0], [469.0, 37751.0], [468.0, 38559.0], [493.0, 29299.0], [494.0, 28950.0], [492.0, 29063.0], [483.0, 32483.333333333332], [480.0, 33775.0], [491.0, 29633.0], [490.0, 29971.0], [489.0, 29969.0], [488.0, 30483.0], [486.0, 31705.0], [485.0, 32288.0], [509.0, 27904.0], [510.0, 28694.0], [508.0, 27970.0], [499.0, 28313.0], [497.0, 28326.0], [496.0, 28266.0], [507.0, 28126.0], [506.0, 28132.0], [505.0, 28525.0], [503.0, 28264.0], [502.0, 28675.666666666668], [501.0, 28266.0], [532.0, 19251.0], [539.0, 18696.0], [538.0, 19106.0], [537.0, 20093.0], [536.0, 19175.0], [535.0, 19244.0], [534.0, 19891.0], [533.0, 20172.0], [531.0, 21109.0], [530.0, 23752.0], [527.0, 23958.0], [514.0, 28105.0], [512.0, 28162.0], [517.0, 27664.0], [516.0, 28088.0], [519.0, 27557.0], [518.0, 27626.0], [525.0, 25313.0], [524.0, 25843.666666666668], [521.0, 25498.5], [659.0, 18962.666666666668], [657.0, 18778.0], [1000.0, 18389.373626373614], [998.0, 18559.5]], "isOverall": false, "label": "Login into Web", "isController": false}, {"data": [[613.3490000000002, 31923.010999999962]], "isOverall": false, "label": "Login into Web-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3990.4333333333334, "minX": 1.57164216E12, "maxY": 7217.883333333333, "series": [{"data": [[1.57164222E12, 7217.883333333333], [1.57164216E12, 6161.833333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57164222E12, 3990.4333333333334], [1.57164216E12, 4378.133333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57164222E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 19894.312849161994, "minX": 1.57164216E12, "maxY": 45874.22246220304, "series": [{"data": [[1.57164222E12, 45874.22246220304], [1.57164216E12, 19894.312849161994]], "isOverall": false, "label": "Login into Web", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57164222E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 18454.12662942273, "minX": 1.57164216E12, "maxY": 45870.27861771058, "series": [{"data": [[1.57164222E12, 45870.27861771058], [1.57164216E12, 18454.12662942273]], "isOverall": false, "label": "Login into Web", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57164222E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 13979.004319654423, "minX": 1.57164216E12, "maxY": 14374.45623836126, "series": [{"data": [[1.57164222E12, 13979.004319654423], [1.57164216E12, 14374.45623836126]], "isOverall": false, "label": "Login into Web", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57164222E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 23711.0, "minX": 1.57164216E12, "maxY": 45302.0, "series": [{"data": [[1.57164222E12, 45302.0], [1.57164216E12, 38880.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57164222E12, 39893.0], [1.57164216E12, 23711.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57164222E12, 45287.6], [1.57164216E12, 38189.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57164222E12, 45302.0], [1.57164216E12, 38880.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57164222E12, 45302.0], [1.57164216E12, 38620.5]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57164222E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 18035.5, "minX": 1.0, "maxY": 46158.0, "series": [{"data": [[1.0, 39861.0], [4.0, 33944.0], [2.0, 37149.0], [5.0, 32476.0], [363.0, 45290.0], [6.0, 25500.0], [12.0, 27836.0], [3.0, 36070.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 21109.0], [16.0, 28319.5], [4.0, 33787.0], [2.0, 39551.0], [5.0, 39888.0], [84.0, 46158.0], [363.0, 45915.0], [6.0, 19891.0], [12.0, 27904.0], [221.0, 18497.0], [242.0, 18035.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 363.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 46158.0, "series": [{"data": [[1.0, 39761.0], [4.0, 33845.0], [2.0, 37051.0], [5.0, 32367.0], [363.0, 45168.0], [6.0, 25405.0], [12.0, 27733.0], [3.0, 35971.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 21109.0], [16.0, 0.0], [4.0, 33787.0], [2.0, 39551.0], [5.0, 39888.0], [84.0, 46158.0], [363.0, 45915.0], [6.0, 0.0], [12.0, 0.0], [221.0, 18407.0], [242.0, 18035.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 363.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57164216E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57164216E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57164216E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.57164216E12, "maxY": 7.666666666666667, "series": [{"data": [[1.57164222E12, 0.25], [1.57164216E12, 0.6666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.57164222E12, 0.05], [1.57164216E12, 0.13333333333333333]], "isOverall": false, "label": "400", "isController": false}, {"data": [[1.57164216E12, 7.666666666666667]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.57164222E12, 7.416666666666667]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.57164216E12, 0.48333333333333334]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57164222E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.57164216E12, "maxY": 8.283333333333333, "series": [{"data": [[1.57164222E12, 7.466666666666667], [1.57164216E12, 8.283333333333333]], "isOverall": false, "label": "Login into Web-failure", "isController": false}, {"data": [[1.57164222E12, 0.25], [1.57164216E12, 0.6666666666666666]], "isOverall": false, "label": "Login into Web-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57164222E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.57164216E12, "maxY": 8.283333333333333, "series": [{"data": [[1.57164222E12, 0.25], [1.57164216E12, 0.6666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.57164222E12, 7.466666666666667], [1.57164216E12, 8.283333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57164222E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

