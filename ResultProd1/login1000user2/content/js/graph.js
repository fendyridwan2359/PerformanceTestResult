/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 22830.0, "minX": 0.0, "maxY": 53036.0, "series": [{"data": [[0.0, 22830.0], [0.1, 22835.0], [0.2, 23431.0], [0.3, 23431.0], [0.4, 23640.0], [0.5, 25001.0], [0.6, 25266.0], [0.7, 25433.0], [0.8, 25751.0], [0.9, 25757.0], [1.0, 25967.0], [1.1, 26147.0], [1.2, 26172.0], [1.3, 26324.0], [1.4, 26324.0], [1.5, 26490.0], [1.6, 26906.0], [1.7, 27078.0], [1.8, 27212.0], [1.9, 27269.0], [2.0, 27386.0], [2.1, 27415.0], [2.2, 27426.0], [2.3, 27458.0], [2.4, 27558.0], [2.5, 27580.0], [2.6, 27585.0], [2.7, 27679.0], [2.8, 27734.0], [2.9, 27764.0], [3.0, 28130.0], [3.1, 28158.0], [3.2, 28158.0], [3.3, 28204.0], [3.4, 28245.0], [3.5, 28246.0], [3.6, 28250.0], [3.7, 28278.0], [3.8, 28376.0], [3.9, 28585.0], [4.0, 28679.0], [4.1, 29141.0], [4.2, 29155.0], [4.3, 29167.0], [4.4, 29204.0], [4.5, 29222.0], [4.6, 29351.0], [4.7, 29361.0], [4.8, 29400.0], [4.9, 29401.0], [5.0, 29413.0], [5.1, 29480.0], [5.2, 29552.0], [5.3, 29602.0], [5.4, 29604.0], [5.5, 29677.0], [5.6, 29768.0], [5.7, 29797.0], [5.8, 29842.0], [5.9, 30068.0], [6.0, 30137.0], [6.1, 30448.0], [6.2, 30471.0], [6.3, 30511.0], [6.4, 30524.0], [6.5, 30775.0], [6.6, 30783.0], [6.7, 30848.0], [6.8, 31032.0], [6.9, 31181.0], [7.0, 31335.0], [7.1, 31343.0], [7.2, 31343.0], [7.3, 31393.0], [7.4, 31445.0], [7.5, 31514.0], [7.6, 31613.0], [7.7, 31704.0], [7.8, 31822.0], [7.9, 31946.0], [8.0, 31981.0], [8.1, 31983.0], [8.2, 32071.0], [8.3, 32299.0], [8.4, 32355.0], [8.5, 32428.0], [8.6, 32485.0], [8.7, 32544.0], [8.8, 32584.0], [8.9, 32675.0], [9.0, 32699.0], [9.1, 32705.0], [9.2, 32948.0], [9.3, 33014.0], [9.4, 33135.0], [9.5, 33236.0], [9.6, 33240.0], [9.7, 33260.0], [9.8, 33325.0], [9.9, 33431.0], [10.0, 33465.0], [10.1, 33480.0], [10.2, 33620.0], [10.3, 33666.0], [10.4, 33667.0], [10.5, 33723.0], [10.6, 33756.0], [10.7, 33758.0], [10.8, 33768.0], [10.9, 33786.0], [11.0, 33787.0], [11.1, 33824.0], [11.2, 33859.0], [11.3, 33863.0], [11.4, 33884.0], [11.5, 33931.0], [11.6, 33981.0], [11.7, 34093.0], [11.8, 34158.0], [11.9, 34178.0], [12.0, 34233.0], [12.1, 34257.0], [12.2, 34273.0], [12.3, 34313.0], [12.4, 34459.0], [12.5, 34476.0], [12.6, 34538.0], [12.7, 34546.0], [12.8, 34556.0], [12.9, 34581.0], [13.0, 34584.0], [13.1, 34621.0], [13.2, 34624.0], [13.3, 34677.0], [13.4, 34683.0], [13.5, 34703.0], [13.6, 34722.0], [13.7, 34779.0], [13.8, 34843.0], [13.9, 34844.0], [14.0, 34979.0], [14.1, 35019.0], [14.2, 35075.0], [14.3, 35401.0], [14.4, 35690.0], [14.5, 35745.0], [14.6, 35826.0], [14.7, 35940.0], [14.8, 35969.0], [14.9, 36059.0], [15.0, 36060.0], [15.1, 36202.0], [15.2, 36229.0], [15.3, 36348.0], [15.4, 36353.0], [15.5, 36429.0], [15.6, 36430.0], [15.7, 36430.0], [15.8, 36431.0], [15.9, 36498.0], [16.0, 36636.0], [16.1, 36891.0], [16.2, 36924.0], [16.3, 36946.0], [16.4, 36977.0], [16.5, 37111.0], [16.6, 37139.0], [16.7, 37213.0], [16.8, 37222.0], [16.9, 37523.0], [17.0, 37548.0], [17.1, 37717.0], [17.2, 37735.0], [17.3, 37738.0], [17.4, 37916.0], [17.5, 37977.0], [17.6, 37983.0], [17.7, 37990.0], [17.8, 38125.0], [17.9, 38172.0], [18.0, 38216.0], [18.1, 38406.0], [18.2, 38436.0], [18.3, 38636.0], [18.4, 38647.0], [18.5, 38697.0], [18.6, 38883.0], [18.7, 39056.0], [18.8, 39177.0], [18.9, 39177.0], [19.0, 39250.0], [19.1, 39251.0], [19.2, 39251.0], [19.3, 39261.0], [19.4, 39361.0], [19.5, 39376.0], [19.6, 39382.0], [19.7, 39621.0], [19.8, 39621.0], [19.9, 39621.0], [20.0, 39673.0], [20.1, 39727.0], [20.2, 39826.0], [20.3, 40139.0], [20.4, 40255.0], [20.5, 40345.0], [20.6, 40405.0], [20.7, 40506.0], [20.8, 40567.0], [20.9, 40589.0], [21.0, 40614.0], [21.1, 40633.0], [21.2, 40689.0], [21.3, 40781.0], [21.4, 40807.0], [21.5, 40879.0], [21.6, 40942.0], [21.7, 41084.0], [21.8, 41166.0], [21.9, 41199.0], [22.0, 41553.0], [22.1, 41578.0], [22.2, 41594.0], [22.3, 41619.0], [22.4, 41787.0], [22.5, 41816.0], [22.6, 41820.0], [22.7, 41913.0], [22.8, 41935.0], [22.9, 42078.0], [23.0, 42165.0], [23.1, 42241.0], [23.2, 42295.0], [23.3, 42356.0], [23.4, 42400.0], [23.5, 42403.0], [23.6, 42492.0], [23.7, 42513.0], [23.8, 42515.0], [23.9, 42705.0], [24.0, 42741.0], [24.1, 42856.0], [24.2, 43067.0], [24.3, 43101.0], [24.4, 43107.0], [24.5, 43119.0], [24.6, 43224.0], [24.7, 43251.0], [24.8, 43342.0], [24.9, 43351.0], [25.0, 43457.0], [25.1, 43538.0], [25.2, 43685.0], [25.3, 43805.0], [25.4, 43842.0], [25.5, 43918.0], [25.6, 43946.0], [25.7, 44040.0], [25.8, 44191.0], [25.9, 44619.0], [26.0, 44651.0], [26.1, 44667.0], [26.2, 44782.0], [26.3, 44805.0], [26.4, 44924.0], [26.5, 45016.0], [26.6, 45016.0], [26.7, 45171.0], [26.8, 45256.0], [26.9, 45266.0], [27.0, 45321.0], [27.1, 45345.0], [27.2, 45581.0], [27.3, 45587.0], [27.4, 45606.0], [27.5, 45792.0], [27.6, 46001.0], [27.7, 46235.0], [27.8, 46251.0], [27.9, 46339.0], [28.0, 46373.0], [28.1, 46376.0], [28.2, 46403.0], [28.3, 46433.0], [28.4, 46486.0], [28.5, 46621.0], [28.6, 46697.0], [28.7, 46699.0], [28.8, 46719.0], [28.9, 46904.0], [29.0, 46993.0], [29.1, 47001.0], [29.2, 47015.0], [29.3, 47075.0], [29.4, 47277.0], [29.5, 47446.0], [29.6, 47454.0], [29.7, 47515.0], [29.8, 47673.0], [29.9, 47693.0], [30.0, 47754.0], [30.1, 47787.0], [30.2, 48130.0], [30.3, 48233.0], [30.4, 48278.0], [30.5, 48378.0], [30.6, 48404.0], [30.7, 48462.0], [30.8, 48504.0], [30.9, 48531.0], [31.0, 48649.0], [31.1, 48752.0], [31.2, 48847.0], [31.3, 49023.0], [31.4, 49199.0], [31.5, 49248.0], [31.6, 49488.0], [31.7, 49604.0], [31.8, 49676.0], [31.9, 49677.0], [32.0, 49680.0], [32.1, 49806.0], [32.2, 49915.0], [32.3, 49944.0], [32.4, 50204.0], [32.5, 50220.0], [32.6, 50231.0], [32.7, 50310.0], [32.8, 50333.0], [32.9, 50374.0], [33.0, 50429.0], [33.1, 50457.0], [33.2, 50466.0], [33.3, 50481.0], [33.4, 50482.0], [33.5, 50491.0], [33.6, 50493.0], [33.7, 50501.0], [33.8, 50502.0], [33.9, 50502.0], [34.0, 50510.0], [34.1, 50520.0], [34.2, 50521.0], [34.3, 50527.0], [34.4, 50531.0], [34.5, 50532.0], [34.6, 50541.0], [34.7, 50549.0], [34.8, 50550.0], [34.9, 50555.0], [35.0, 50593.0], [35.1, 50598.0], [35.2, 50887.0], [35.3, 51006.0], [35.4, 51048.0], [35.5, 51053.0], [35.6, 51079.0], [35.7, 51085.0], [35.8, 51093.0], [35.9, 51093.0], [36.0, 51094.0], [36.1, 51098.0], [36.2, 51099.0], [36.3, 51099.0], [36.4, 51100.0], [36.5, 51100.0], [36.6, 51100.0], [36.7, 51101.0], [36.8, 51101.0], [36.9, 51101.0], [37.0, 51102.0], [37.1, 51103.0], [37.2, 51104.0], [37.3, 51104.0], [37.4, 51105.0], [37.5, 51105.0], [37.6, 51107.0], [37.7, 51107.0], [37.8, 51108.0], [37.9, 51108.0], [38.0, 51109.0], [38.1, 51110.0], [38.2, 51112.0], [38.3, 51129.0], [38.4, 51144.0], [38.5, 51144.0], [38.6, 51146.0], [38.7, 51148.0], [38.8, 51152.0], [38.9, 51153.0], [39.0, 51154.0], [39.1, 51155.0], [39.2, 51155.0], [39.3, 51156.0], [39.4, 51156.0], [39.5, 51157.0], [39.6, 51158.0], [39.7, 51159.0], [39.8, 51159.0], [39.9, 51159.0], [40.0, 51159.0], [40.1, 51159.0], [40.2, 51160.0], [40.3, 51160.0], [40.4, 51162.0], [40.5, 51162.0], [40.6, 51163.0], [40.7, 51164.0], [40.8, 51165.0], [40.9, 51166.0], [41.0, 51168.0], [41.1, 51175.0], [41.2, 51215.0], [41.3, 51221.0], [41.4, 51223.0], [41.5, 51224.0], [41.6, 51229.0], [41.7, 51230.0], [41.8, 51230.0], [41.9, 51231.0], [42.0, 51232.0], [42.1, 51233.0], [42.2, 51242.0], [42.3, 51249.0], [42.4, 51249.0], [42.5, 51249.0], [42.6, 51250.0], [42.7, 51259.0], [42.8, 51259.0], [42.9, 51260.0], [43.0, 51266.0], [43.1, 51267.0], [43.2, 51270.0], [43.3, 51271.0], [43.4, 51271.0], [43.5, 51271.0], [43.6, 51272.0], [43.7, 51272.0], [43.8, 51272.0], [43.9, 51272.0], [44.0, 51272.0], [44.1, 51272.0], [44.2, 51273.0], [44.3, 51274.0], [44.4, 51274.0], [44.5, 51275.0], [44.6, 51275.0], [44.7, 51275.0], [44.8, 51275.0], [44.9, 51275.0], [45.0, 51275.0], [45.1, 51276.0], [45.2, 51276.0], [45.3, 51276.0], [45.4, 51276.0], [45.5, 51276.0], [45.6, 51276.0], [45.7, 51277.0], [45.8, 51277.0], [45.9, 51277.0], [46.0, 51278.0], [46.1, 51278.0], [46.2, 51278.0], [46.3, 51278.0], [46.4, 51279.0], [46.5, 51279.0], [46.6, 51279.0], [46.7, 51279.0], [46.8, 51280.0], [46.9, 51280.0], [47.0, 51280.0], [47.1, 51280.0], [47.2, 51281.0], [47.3, 51281.0], [47.4, 51281.0], [47.5, 51281.0], [47.6, 51281.0], [47.7, 51281.0], [47.8, 51283.0], [47.9, 51283.0], [48.0, 51284.0], [48.1, 51284.0], [48.2, 51286.0], [48.3, 51286.0], [48.4, 51287.0], [48.5, 51287.0], [48.6, 51288.0], [48.7, 51292.0], [48.8, 51292.0], [48.9, 51293.0], [49.0, 51293.0], [49.1, 51294.0], [49.2, 51294.0], [49.3, 51294.0], [49.4, 51295.0], [49.5, 51299.0], [49.6, 51300.0], [49.7, 51538.0], [49.8, 51543.0], [49.9, 51543.0], [50.0, 51544.0], [50.1, 51544.0], [50.2, 51605.0], [50.3, 51645.0], [50.4, 51646.0], [50.5, 51647.0], [50.6, 51649.0], [50.7, 51652.0], [50.8, 51652.0], [50.9, 51653.0], [51.0, 51654.0], [51.1, 51654.0], [51.2, 51655.0], [51.3, 51655.0], [51.4, 51656.0], [51.5, 51657.0], [51.6, 51658.0], [51.7, 51660.0], [51.8, 51664.0], [51.9, 51667.0], [52.0, 51695.0], [52.1, 51696.0], [52.2, 51697.0], [52.3, 51698.0], [52.4, 51699.0], [52.5, 51699.0], [52.6, 51700.0], [52.7, 51701.0], [52.8, 51702.0], [52.9, 51702.0], [53.0, 51703.0], [53.1, 51704.0], [53.2, 51704.0], [53.3, 51704.0], [53.4, 51704.0], [53.5, 51706.0], [53.6, 51707.0], [53.7, 51709.0], [53.8, 51710.0], [53.9, 51710.0], [54.0, 51714.0], [54.1, 51727.0], [54.2, 51729.0], [54.3, 51729.0], [54.4, 51729.0], [54.5, 51731.0], [54.6, 51731.0], [54.7, 51731.0], [54.8, 51731.0], [54.9, 51731.0], [55.0, 51732.0], [55.1, 51732.0], [55.2, 51733.0], [55.3, 51733.0], [55.4, 51743.0], [55.5, 51745.0], [55.6, 51747.0], [55.7, 51748.0], [55.8, 51748.0], [55.9, 51750.0], [56.0, 51752.0], [56.1, 51753.0], [56.2, 51754.0], [56.3, 51754.0], [56.4, 51756.0], [56.5, 51756.0], [56.6, 51756.0], [56.7, 51757.0], [56.8, 51758.0], [56.9, 51758.0], [57.0, 51758.0], [57.1, 51758.0], [57.2, 51759.0], [57.3, 51759.0], [57.4, 51761.0], [57.5, 51761.0], [57.6, 51762.0], [57.7, 51763.0], [57.8, 51764.0], [57.9, 51764.0], [58.0, 51765.0], [58.1, 51779.0], [58.2, 51781.0], [58.3, 51781.0], [58.4, 51781.0], [58.5, 51782.0], [58.6, 51782.0], [58.7, 51782.0], [58.8, 51782.0], [58.9, 51782.0], [59.0, 51782.0], [59.1, 51782.0], [59.2, 51782.0], [59.3, 51782.0], [59.4, 51783.0], [59.5, 51783.0], [59.6, 51784.0], [59.7, 51784.0], [59.8, 51785.0], [59.9, 51789.0], [60.0, 51789.0], [60.1, 51792.0], [60.2, 51793.0], [60.3, 51794.0], [60.4, 51795.0], [60.5, 51795.0], [60.6, 51796.0], [60.7, 51796.0], [60.8, 51797.0], [60.9, 51797.0], [61.0, 51798.0], [61.1, 51798.0], [61.2, 51798.0], [61.3, 51798.0], [61.4, 51799.0], [61.5, 51800.0], [61.6, 51800.0], [61.7, 51800.0], [61.8, 51801.0], [61.9, 51801.0], [62.0, 51801.0], [62.1, 51802.0], [62.2, 51802.0], [62.3, 51802.0], [62.4, 51803.0], [62.5, 51803.0], [62.6, 51803.0], [62.7, 51803.0], [62.8, 51803.0], [62.9, 51803.0], [63.0, 51803.0], [63.1, 51804.0], [63.2, 51804.0], [63.3, 51804.0], [63.4, 51805.0], [63.5, 51805.0], [63.6, 51806.0], [63.7, 51806.0], [63.8, 51806.0], [63.9, 51806.0], [64.0, 51806.0], [64.1, 51806.0], [64.2, 51806.0], [64.3, 51807.0], [64.4, 51807.0], [64.5, 51807.0], [64.6, 51807.0], [64.7, 51808.0], [64.8, 51808.0], [64.9, 51808.0], [65.0, 51808.0], [65.1, 51808.0], [65.2, 51808.0], [65.3, 51809.0], [65.4, 51809.0], [65.5, 51809.0], [65.6, 51809.0], [65.7, 51810.0], [65.8, 51810.0], [65.9, 51811.0], [66.0, 51811.0], [66.1, 51812.0], [66.2, 51812.0], [66.3, 51813.0], [66.4, 51817.0], [66.5, 51840.0], [66.6, 51849.0], [66.7, 51850.0], [66.8, 51853.0], [66.9, 51853.0], [67.0, 51855.0], [67.1, 51857.0], [67.2, 51858.0], [67.3, 51859.0], [67.4, 51860.0], [67.5, 51861.0], [67.6, 51863.0], [67.7, 51866.0], [67.8, 51866.0], [67.9, 51867.0], [68.0, 51867.0], [68.1, 51869.0], [68.2, 51870.0], [68.3, 51870.0], [68.4, 51871.0], [68.5, 51872.0], [68.6, 51873.0], [68.7, 51873.0], [68.8, 51873.0], [68.9, 51873.0], [69.0, 51874.0], [69.1, 51874.0], [69.2, 51879.0], [69.3, 51879.0], [69.4, 51882.0], [69.5, 51883.0], [69.6, 51885.0], [69.7, 51886.0], [69.8, 51887.0], [69.9, 51893.0], [70.0, 51894.0], [70.1, 51894.0], [70.2, 51895.0], [70.3, 51895.0], [70.4, 51895.0], [70.5, 51897.0], [70.6, 51898.0], [70.7, 51899.0], [70.8, 51899.0], [70.9, 51899.0], [71.0, 51899.0], [71.1, 51901.0], [71.2, 51901.0], [71.3, 51902.0], [71.4, 51902.0], [71.5, 51902.0], [71.6, 51903.0], [71.7, 51903.0], [71.8, 51904.0], [71.9, 51904.0], [72.0, 51904.0], [72.1, 51905.0], [72.2, 51905.0], [72.3, 51906.0], [72.4, 51906.0], [72.5, 51906.0], [72.6, 51907.0], [72.7, 51907.0], [72.8, 51908.0], [72.9, 51908.0], [73.0, 51908.0], [73.1, 51909.0], [73.2, 51909.0], [73.3, 51909.0], [73.4, 51909.0], [73.5, 51910.0], [73.6, 51911.0], [73.7, 51911.0], [73.8, 51911.0], [73.9, 51911.0], [74.0, 51911.0], [74.1, 51912.0], [74.2, 51912.0], [74.3, 51912.0], [74.4, 51913.0], [74.5, 51913.0], [74.6, 51913.0], [74.7, 51914.0], [74.8, 51915.0], [74.9, 51915.0], [75.0, 51915.0], [75.1, 51915.0], [75.2, 51916.0], [75.3, 51916.0], [75.4, 51916.0], [75.5, 51917.0], [75.6, 51917.0], [75.7, 51918.0], [75.8, 51920.0], [75.9, 51920.0], [76.0, 51921.0], [76.1, 51921.0], [76.2, 51922.0], [76.3, 51923.0], [76.4, 51923.0], [76.5, 51923.0], [76.6, 51925.0], [76.7, 51925.0], [76.8, 51925.0], [76.9, 51925.0], [77.0, 51926.0], [77.1, 51927.0], [77.2, 51928.0], [77.3, 51929.0], [77.4, 51934.0], [77.5, 51935.0], [77.6, 51937.0], [77.7, 51939.0], [77.8, 51951.0], [77.9, 51952.0], [78.0, 51954.0], [78.1, 51954.0], [78.2, 51955.0], [78.3, 51955.0], [78.4, 51956.0], [78.5, 51956.0], [78.6, 51957.0], [78.7, 51959.0], [78.8, 51960.0], [78.9, 51961.0], [79.0, 51961.0], [79.1, 51961.0], [79.2, 51961.0], [79.3, 51963.0], [79.4, 51963.0], [79.5, 51963.0], [79.6, 51965.0], [79.7, 51965.0], [79.8, 51967.0], [79.9, 51967.0], [80.0, 51967.0], [80.1, 51967.0], [80.2, 51968.0], [80.3, 51969.0], [80.4, 51969.0], [80.5, 51969.0], [80.6, 51969.0], [80.7, 51971.0], [80.8, 51971.0], [80.9, 51971.0], [81.0, 51972.0], [81.1, 51974.0], [81.2, 51975.0], [81.3, 51976.0], [81.4, 51976.0], [81.5, 51976.0], [81.6, 51977.0], [81.7, 51978.0], [81.8, 51980.0], [81.9, 51981.0], [82.0, 51983.0], [82.1, 51989.0], [82.2, 51994.0], [82.3, 51997.0], [82.4, 52002.0], [82.5, 52006.0], [82.6, 52006.0], [82.7, 52007.0], [82.8, 52009.0], [82.9, 52012.0], [83.0, 52013.0], [83.1, 52013.0], [83.2, 52015.0], [83.3, 52015.0], [83.4, 52015.0], [83.5, 52015.0], [83.6, 52016.0], [83.7, 52017.0], [83.8, 52018.0], [83.9, 52018.0], [84.0, 52019.0], [84.1, 52020.0], [84.2, 52020.0], [84.3, 52023.0], [84.4, 52032.0], [84.5, 52032.0], [84.6, 52035.0], [84.7, 52055.0], [84.8, 52056.0], [84.9, 52056.0], [85.0, 52057.0], [85.1, 52059.0], [85.2, 52060.0], [85.3, 52062.0], [85.4, 52063.0], [85.5, 52063.0], [85.6, 52065.0], [85.7, 52065.0], [85.8, 52065.0], [85.9, 52065.0], [86.0, 52066.0], [86.1, 52067.0], [86.2, 52067.0], [86.3, 52067.0], [86.4, 52068.0], [86.5, 52068.0], [86.6, 52069.0], [86.7, 52070.0], [86.8, 52070.0], [86.9, 52070.0], [87.0, 52070.0], [87.1, 52071.0], [87.2, 52071.0], [87.3, 52072.0], [87.4, 52072.0], [87.5, 52076.0], [87.6, 52111.0], [87.7, 52155.0], [87.8, 52242.0], [87.9, 52273.0], [88.0, 52278.0], [88.1, 52280.0], [88.2, 52285.0], [88.3, 52285.0], [88.4, 52286.0], [88.5, 52291.0], [88.6, 52367.0], [88.7, 52374.0], [88.8, 52380.0], [88.9, 52382.0], [89.0, 52394.0], [89.1, 52396.0], [89.2, 52401.0], [89.3, 52402.0], [89.4, 52403.0], [89.5, 52407.0], [89.6, 52418.0], [89.7, 52434.0], [89.8, 52438.0], [89.9, 52438.0], [90.0, 52442.0], [90.1, 52443.0], [90.2, 52443.0], [90.3, 52444.0], [90.4, 52445.0], [90.5, 52446.0], [90.6, 52448.0], [90.7, 52448.0], [90.8, 52449.0], [90.9, 52450.0], [91.0, 52478.0], [91.1, 52482.0], [91.2, 52493.0], [91.3, 52497.0], [91.4, 52497.0], [91.5, 52497.0], [91.6, 52498.0], [91.7, 52500.0], [91.8, 52500.0], [91.9, 52501.0], [92.0, 52505.0], [92.1, 52506.0], [92.2, 52507.0], [92.3, 52508.0], [92.4, 52508.0], [92.5, 52508.0], [92.6, 52508.0], [92.7, 52511.0], [92.8, 52517.0], [92.9, 52519.0], [93.0, 52520.0], [93.1, 52520.0], [93.2, 52521.0], [93.3, 52525.0], [93.4, 52530.0], [93.5, 52530.0], [93.6, 52531.0], [93.7, 52533.0], [93.8, 52535.0], [93.9, 52535.0], [94.0, 52537.0], [94.1, 52541.0], [94.2, 52548.0], [94.3, 52549.0], [94.4, 52549.0], [94.5, 52551.0], [94.6, 52551.0], [94.7, 52554.0], [94.8, 52566.0], [94.9, 52606.0], [95.0, 52610.0], [95.1, 52619.0], [95.2, 52621.0], [95.3, 52623.0], [95.4, 52635.0], [95.5, 52637.0], [95.6, 52639.0], [95.7, 52639.0], [95.8, 52640.0], [95.9, 52640.0], [96.0, 52641.0], [96.1, 52642.0], [96.2, 52642.0], [96.3, 52642.0], [96.4, 52643.0], [96.5, 52645.0], [96.6, 52647.0], [96.7, 52648.0], [96.8, 52653.0], [96.9, 52655.0], [97.0, 52656.0], [97.1, 52661.0], [97.2, 52663.0], [97.3, 52664.0], [97.4, 52665.0], [97.5, 52670.0], [97.6, 52670.0], [97.7, 52671.0], [97.8, 52672.0], [97.9, 52675.0], [98.0, 52676.0], [98.1, 52676.0], [98.2, 52698.0], [98.3, 52698.0], [98.4, 52704.0], [98.5, 52707.0], [98.6, 52708.0], [98.7, 52768.0], [98.8, 52772.0], [98.9, 52777.0], [99.0, 52786.0], [99.1, 52798.0], [99.2, 52803.0], [99.3, 52804.0], [99.4, 52804.0], [99.5, 52809.0], [99.6, 52810.0], [99.7, 53034.0], [99.8, 53036.0], [99.9, 53036.0]], "isOverall": false, "label": "Login into Web", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 22800.0, "maxY": 113.0, "series": [{"data": [[34500.0, 5.0], [33700.0, 6.0], [32900.0, 1.0], [33300.0, 1.0], [34100.0, 2.0], [34900.0, 1.0], [35700.0, 1.0], [36900.0, 3.0], [37700.0, 3.0], [38100.0, 2.0], [39300.0, 3.0], [39700.0, 1.0], [40500.0, 3.0], [40100.0, 1.0], [40900.0, 1.0], [41700.0, 1.0], [42500.0, 2.0], [42100.0, 1.0], [43300.0, 2.0], [44100.0, 1.0], [44900.0, 1.0], [45300.0, 2.0], [45700.0, 1.0], [46900.0, 2.0], [47700.0, 2.0], [48500.0, 2.0], [48100.0, 1.0], [50500.0, 15.0], [51700.0, 89.0], [51300.0, 1.0], [52500.0, 32.0], [52100.0, 2.0], [22800.0, 2.0], [23400.0, 1.0], [23600.0, 1.0], [25000.0, 1.0], [25200.0, 1.0], [25400.0, 1.0], [26400.0, 1.0], [27400.0, 3.0], [27600.0, 1.0], [27000.0, 1.0], [27200.0, 2.0], [28200.0, 5.0], [28600.0, 1.0], [29400.0, 4.0], [29600.0, 3.0], [29200.0, 2.0], [29800.0, 1.0], [30000.0, 1.0], [30400.0, 2.0], [30800.0, 1.0], [31600.0, 1.0], [31000.0, 1.0], [31400.0, 1.0], [32000.0, 1.0], [32200.0, 1.0], [31800.0, 1.0], [32400.0, 2.0], [32600.0, 2.0], [33200.0, 3.0], [33600.0, 3.0], [34400.0, 2.0], [34800.0, 2.0], [34000.0, 1.0], [36400.0, 5.0], [35600.0, 1.0], [36800.0, 1.0], [36000.0, 2.0], [38400.0, 2.0], [37200.0, 2.0], [38800.0, 1.0], [39200.0, 3.0], [39600.0, 4.0], [40800.0, 2.0], [40400.0, 1.0], [41600.0, 1.0], [42000.0, 1.0], [42400.0, 3.0], [42800.0, 1.0], [43200.0, 2.0], [43600.0, 1.0], [44000.0, 1.0], [44800.0, 1.0], [45200.0, 2.0], [46000.0, 1.0], [45600.0, 1.0], [46400.0, 3.0], [47200.0, 1.0], [48400.0, 2.0], [47600.0, 2.0], [48800.0, 1.0], [49600.0, 4.0], [49200.0, 1.0], [50800.0, 1.0], [50400.0, 7.0], [51200.0, 84.0], [51600.0, 24.0], [52000.0, 52.0], [52400.0, 26.0], [52800.0, 5.0], [33100.0, 1.0], [34700.0, 3.0], [34300.0, 1.0], [33900.0, 2.0], [35900.0, 2.0], [36300.0, 2.0], [37100.0, 2.0], [37500.0, 2.0], [37900.0, 4.0], [39100.0, 2.0], [40700.0, 1.0], [40300.0, 1.0], [41100.0, 2.0], [41500.0, 3.0], [41900.0, 2.0], [42300.0, 1.0], [42700.0, 2.0], [43100.0, 3.0], [43500.0, 1.0], [43900.0, 2.0], [44700.0, 1.0], [45100.0, 1.0], [46300.0, 3.0], [45500.0, 2.0], [46700.0, 1.0], [47500.0, 1.0], [48300.0, 1.0], [48700.0, 1.0], [49100.0, 1.0], [49900.0, 2.0], [50300.0, 3.0], [51100.0, 48.0], [51900.0, 113.0], [51500.0, 5.0], [52300.0, 6.0], [52700.0, 8.0], [23500.0, 1.0], [25700.0, 2.0], [25900.0, 1.0], [26100.0, 2.0], [26300.0, 1.0], [26900.0, 1.0], [27500.0, 3.0], [27300.0, 1.0], [28100.0, 3.0], [28300.0, 1.0], [27700.0, 2.0], [28500.0, 1.0], [29100.0, 4.0], [29300.0, 2.0], [29500.0, 1.0], [30500.0, 2.0], [29700.0, 2.0], [30100.0, 1.0], [30700.0, 2.0], [31100.0, 1.0], [31300.0, 4.0], [31500.0, 1.0], [31700.0, 1.0], [31900.0, 3.0], [32300.0, 1.0], [32500.0, 2.0], [32700.0, 1.0], [33400.0, 3.0], [33000.0, 1.0], [33800.0, 4.0], [34600.0, 4.0], [34200.0, 3.0], [35000.0, 2.0], [35400.0, 1.0], [35800.0, 1.0], [36600.0, 1.0], [36200.0, 2.0], [38200.0, 1.0], [38600.0, 3.0], [39000.0, 1.0], [39800.0, 1.0], [40600.0, 3.0], [40200.0, 1.0], [41000.0, 1.0], [41800.0, 2.0], [42200.0, 2.0], [43000.0, 1.0], [43800.0, 2.0], [43400.0, 1.0], [45000.0, 2.0], [44600.0, 3.0], [46200.0, 2.0], [46600.0, 3.0], [47000.0, 3.0], [47400.0, 2.0], [48200.0, 2.0], [49000.0, 1.0], [48600.0, 1.0], [49400.0, 1.0], [50200.0, 3.0], [49800.0, 1.0], [51000.0, 11.0], [51800.0, 96.0], [52200.0, 8.0], [52600.0, 35.0], [53000.0, 3.0]], "isOverall": false, "label": "Login into Web", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 53000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 268.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 732.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 268.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 732.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 527.7609999999996, "minX": 1.57233324E12, "maxY": 527.7609999999996, "series": [{"data": [[1.57233324E12, 527.7609999999996]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57233324E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 23262.0, "minX": 4.0, "maxY": 52849.25, "series": [{"data": [[4.0, 52849.25], [5.0, 52242.0], [7.0, 52133.0], [11.0, 52076.0], [12.0, 52427.0], [14.0, 52072.0], [17.0, 52052.666666666664], [19.0, 52657.5], [21.0, 52810.0], [22.0, 52019.0], [23.0, 52047.0], [24.0, 52772.0], [27.0, 52067.0], [28.0, 52065.0], [29.0, 52437.0], [30.0, 52015.0], [33.0, 52042.0], [32.0, 52062.0], [34.0, 52066.0], [36.0, 52301.333333333336], [39.0, 52065.0], [40.0, 52804.0], [42.0, 52015.0], [45.0, 52063.5], [44.0, 52072.0], [47.0, 52318.6], [52.0, 52202.8], [61.0, 52010.25], [63.0, 52044.25], [65.0, 52032.0], [64.0, 52229.0], [71.0, 51976.0], [70.0, 51974.0], [68.0, 51950.0], [75.0, 51925.5], [74.0, 52300.5], [73.0, 51925.0], [79.0, 52676.0], [78.0, 51980.0], [83.0, 52675.0], [82.0, 51969.0], [80.0, 51923.0], [87.0, 51922.0], [86.0, 51976.0], [91.0, 51971.0], [88.0, 51958.75], [89.0, 51971.0], [95.0, 52708.0], [93.0, 51975.0], [96.0, 52098.0], [102.0, 52116.75], [100.0, 51942.0], [122.0, 52311.25], [120.0, 52212.333333333336], [127.0, 51937.0], [126.0, 51959.0], [125.0, 51961.0], [124.0, 51961.666666666664], [134.0, 52176.666666666664], [133.0, 52206.333333333336], [132.0, 52302.5], [131.0, 52244.0], [129.0, 52310.5], [128.0, 51915.0], [142.0, 51903.0], [140.0, 51957.0], [137.0, 52155.5], [145.0, 51927.0], [215.0, 51883.0], [214.0, 51934.0], [211.0, 51929.0], [212.0, 51935.0], [210.0, 51939.0], [208.0, 51937.0], [222.0, 51927.0], [221.0, 52635.0], [218.0, 51886.0], [216.0, 52672.0], [231.0, 51873.0], [228.0, 51898.0], [226.0, 51926.0], [225.0, 52531.0], [237.0, 51872.0], [234.0, 51921.0], [245.0, 52623.0], [241.0, 51870.0], [254.0, 51916.0], [249.0, 52664.0], [270.0, 51886.5], [262.0, 52181.25000000001], [263.0, 51891.5], [265.0, 52653.0], [266.0, 51869.0], [267.0, 51913.0], [268.0, 51867.0], [271.0, 51859.0], [269.0, 51920.0], [285.0, 51908.5], [273.0, 51916.0], [274.0, 51912.0], [276.0, 51892.666666666664], [278.0, 51896.0], [281.0, 52484.0], [282.0, 52610.0], [283.0, 51915.0], [286.0, 51886.5], [287.0, 52147.0], [290.0, 51881.5], [288.0, 51912.0], [291.0, 51853.0], [300.0, 51911.0], [301.0, 52562.5], [303.0, 52642.0], [292.0, 51855.0], [293.0, 51904.5], [295.0, 51912.0], [296.0, 52606.0], [297.0, 52276.5], [299.0, 51908.0], [305.0, 52642.0], [304.0, 51904.0], [307.0, 51901.0], [308.0, 52642.0], [309.0, 52151.666666666664], [310.0, 51898.0], [314.0, 52246.5], [319.0, 52639.0], [316.0, 52640.0], [317.0, 52271.5], [318.0, 52639.0], [321.0, 51898.5], [323.0, 51897.0], [324.0, 52196.0], [325.0, 52637.0], [327.0, 51850.0], [326.0, 51899.0], [328.0, 51894.0], [329.0, 51871.5], [331.0, 51902.0], [410.0, 51961.06481481481], [408.0, 51783.5], [406.0, 51781.0], [405.0, 51930.08510638297], [425.0, 51920.0], [447.0, 51877.25], [446.0, 52173.333333333336], [443.0, 51704.666666666664], [444.0, 51700.0], [442.0, 51864.666666666664], [441.0, 52450.0], [440.0, 52052.0], [438.0, 51714.0], [451.0, 51852.0], [462.0, 51677.2], [461.0, 51699.0], [458.0, 51929.666666666664], [459.0, 52273.0], [457.0, 51707.0], [456.0, 52401.0], [455.0, 51947.333333333336], [454.0, 51653.0], [453.0, 52443.0], [450.0, 52049.5], [449.0, 51681.0], [448.0, 52389.666666666664], [474.0, 51821.0], [466.0, 51605.0], [465.0, 52158.333333333336], [574.0, 51409.679999999986], [601.0, 51155.0], [605.0, 51093.0], [607.0, 51885.0], [595.0, 51162.0], [592.0, 51103.0], [604.0, 51887.0], [603.0, 51591.0], [602.0, 51130.0], [600.0, 51154.0], [582.0, 51163.0], [581.0, 51165.0], [580.0, 51109.0], [579.0, 51160.0], [577.0, 51532.0], [590.0, 51163.0], [588.0, 51158.333333333336], [586.0, 51159.0], [585.0, 51159.0], [584.0, 51159.0], [597.0, 51156.0], [596.0, 51304.2], [637.0, 51082.0], [639.0, 50528.0], [635.0, 51238.75], [633.0, 51448.0], [629.0, 51102.0], [628.0, 51087.0], [626.0, 51099.0], [623.0, 51840.0], [610.0, 51144.0], [609.0, 51146.0], [614.0, 51378.5], [612.0, 51110.0], [622.0, 51104.0], [620.0, 51105.0], [619.0, 51110.0], [618.0, 51106.0], [617.0, 51107.0], [616.0, 51107.0], [670.0, 50220.0], [671.0, 50887.0], [656.0, 50510.0], [659.0, 50502.0], [657.0, 51099.0], [669.0, 51006.0], [668.0, 50333.0], [667.0, 50812.5], [665.0, 50828.0], [655.0, 50758.666666666664], [646.0, 51129.0], [645.0, 51105.0], [644.0, 50482.0], [642.0, 50546.666666666664], [649.0, 50899.0], [663.0, 51215.0], [662.0, 50429.0], [661.0, 50491.0], [660.0, 50493.0], [698.0, 48129.0], [702.0, 48378.0], [703.0, 47515.0], [689.0, 48752.0], [688.0, 48847.0], [691.0, 48462.0], [690.0, 48649.0], [693.0, 48278.0], [692.0, 49023.0], [701.0, 48404.0], [700.0, 47673.0], [699.0, 47693.0], [696.0, 47787.0], [679.0, 50374.0], [678.0, 49677.666666666664], [675.0, 50310.0], [674.0, 50593.0], [673.0, 50202.0], [687.0, 49604.0], [686.0, 49488.0], [685.0, 49915.0], [684.0, 49248.0], [683.0, 49199.0], [682.0, 49944.0], [681.0, 50231.0], [680.0, 50204.0], [695.0, 48531.0], [694.0, 48130.0], [729.0, 45345.0], [734.0, 44924.0], [735.0, 44805.0], [721.0, 45792.0], [720.0, 46621.0], [723.0, 46376.0], [722.0, 46433.0], [733.0, 45171.0], [732.0, 45266.0], [731.0, 45628.5], [728.0, 46235.0], [711.0, 46904.0], [710.0, 47015.0], [709.0, 46993.0], [708.0, 47075.0], [707.0, 47277.0], [706.0, 47446.0], [705.0, 48233.0], [704.0, 47454.0], [719.0, 46719.0], [718.0, 47001.0], [717.0, 46251.0], [716.0, 46403.0], [715.0, 46373.0], [714.0, 46486.0], [713.0, 46698.0], [727.0, 45835.666666666664], [724.0, 45606.0], [761.0, 43119.0], [766.0, 42356.0], [767.0, 42295.0], [753.0, 43251.0], [752.0, 43342.0], [757.0, 43350.0], [754.0, 43224.0], [765.0, 42403.0], [764.0, 42779.5], [762.0, 42513.0], [760.0, 42741.0], [743.0, 44191.0], [742.0, 45016.0], [741.0, 45016.0], [740.0, 44970.0], [738.0, 44667.0], [737.0, 44651.0], [736.0, 44782.0], [751.0, 43351.0], [750.0, 43457.0], [749.0, 43538.0], [748.0, 43685.0], [747.0, 43805.0], [746.0, 43918.0], [745.0, 43946.0], [744.0, 44040.0], [759.0, 42705.0], [758.0, 42856.0], [794.0, 40509.0], [798.0, 39826.0], [799.0, 40506.0], [785.0, 40633.0], [784.0, 40689.0], [787.0, 41199.0], [786.0, 40567.0], [789.0, 41084.0], [788.0, 40405.0], [797.0, 40589.0], [796.0, 40614.0], [795.0, 40781.0], [792.0, 40942.0], [775.0, 42241.0], [774.0, 41553.0], [773.0, 42400.0], [772.0, 41787.0], [771.0, 42515.0], [770.0, 41820.0], [769.0, 41913.0], [768.0, 42165.0], [783.0, 41578.0], [782.0, 41200.5], [780.0, 41619.0], [779.0, 41166.0], [778.0, 41816.0], [777.0, 41935.0], [776.0, 42078.0], [791.0, 40255.0], [790.0, 40345.0], [826.0, 37736.5], [830.0, 37916.0], [831.0, 37111.0], [817.0, 39056.0], [816.0, 38406.0], [820.0, 38883.0], [819.0, 38194.0], [829.0, 37977.0], [828.0, 37222.0], [827.0, 37523.0], [824.0, 38436.0], [807.0, 39177.0], [806.0, 39261.0], [805.0, 39382.0], [804.0, 39634.0], [800.0, 39727.0], [815.0, 39250.0], [814.0, 39251.0], [813.0, 39006.0], [811.0, 39361.0], [810.0, 38647.0], [809.0, 38697.0], [808.0, 39177.0], [823.0, 37986.5], [821.0, 38125.0], [856.0, 36282.0], [860.0, 35401.0], [863.0, 34677.0], [848.0, 35969.0], [862.0, 34683.0], [861.0, 34703.0], [859.0, 34844.0], [858.0, 34979.0], [857.0, 35075.0], [847.0, 35940.0], [832.0, 37717.0], [834.0, 36924.0], [833.0, 36946.0], [836.0, 37213.0], [835.0, 37548.0], [838.0, 37139.0], [837.0, 36636.0], [846.0, 36059.5], [844.0, 36891.0], [843.0, 36229.0], [842.0, 36202.0], [841.0, 36977.0], [840.0, 36350.5], [851.0, 36121.5], [849.0, 35826.0], [889.0, 33756.0], [882.0, 34582.5], [893.0, 34313.0], [895.0, 33643.5], [880.0, 33863.0], [892.0, 33949.333333333336], [888.0, 33768.0], [871.0, 34779.0], [870.0, 34843.0], [869.0, 34093.0], [868.0, 34158.0], [867.0, 34273.0], [866.0, 34626.0], [864.0, 34621.0], [879.0, 34254.0], [877.0, 34476.0], [876.0, 34209.8], [887.0, 33758.0], [886.0, 34166.5], [884.0, 34162.0], [921.0, 32355.0], [926.0, 31343.0], [927.0, 31343.0], [914.0, 32781.5], [912.0, 32485.0], [917.0, 31982.0], [915.0, 32584.0], [925.0, 31393.0], [924.0, 31445.0], [923.0, 31906.5], [920.0, 31704.0], [903.0, 33236.0], [902.0, 33260.0], [901.0, 33240.0], [900.0, 33325.0], [899.0, 33455.5], [897.0, 34257.0], [896.0, 34178.0], [911.0, 32544.0], [910.0, 32702.0], [908.0, 32675.0], [907.0, 33465.0], [906.0, 32948.0], [905.0, 33014.0], [904.0, 33824.0], [919.0, 31822.0], [918.0, 31946.0], [954.0, 29180.0], [958.0, 29400.0], [959.0, 29361.0], [944.0, 29604.0], [946.0, 29480.0], [945.0, 29602.0], [949.0, 29376.0], [947.0, 29413.0], [957.0, 29552.0], [956.0, 29677.0], [955.0, 29842.0], [953.0, 29179.5], [935.0, 30471.0], [934.0, 30448.0], [933.0, 30775.0], [932.0, 30783.0], [931.0, 31613.0], [930.0, 31032.0], [929.0, 32071.0], [928.0, 31335.0], [943.0, 30139.5], [941.0, 29797.0], [940.0, 30524.0], [939.0, 30068.0], [938.0, 30137.0], [937.0, 30848.0], [936.0, 31181.0], [951.0, 29167.0], [950.0, 29222.0], [985.0, 26490.0], [989.0, 26147.0], [991.0, 25802.5], [976.0, 27924.666666666668], [978.0, 27415.0], [977.0, 27386.0], [988.0, 25757.0], [987.0, 26906.0], [986.0, 26324.0], [984.0, 27426.0], [966.0, 27734.0], [965.0, 27764.0], [964.0, 28679.0], [963.0, 28130.0], [962.0, 28250.0], [961.0, 29141.0], [960.0, 28585.0], [973.0, 28225.0], [971.0, 28245.0], [970.0, 28278.0], [969.0, 27847.0], [983.0, 27558.0], [982.0, 27378.5], [980.0, 27212.0], [979.0, 27269.0], [1000.0, 23262.0], [995.0, 25751.0], [994.0, 25001.0], [993.0, 25616.5]], "isOverall": false, "label": "Login into Web", "isController": false}, {"data": [[527.7569999999998, 47120.52199999997]], "isOverall": false, "label": "Login into Web-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8436.516666666666, "minX": 1.57233324E12, "maxY": 18558.216666666667, "series": [{"data": [[1.57233324E12, 18558.216666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57233324E12, 8436.516666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57233324E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 47120.52199999997, "minX": 1.57233324E12, "maxY": 47120.52199999997, "series": [{"data": [[1.57233324E12, 47120.52199999997]], "isOverall": false, "label": "Login into Web", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57233324E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 46317.28999999999, "minX": 1.57233324E12, "maxY": 46317.28999999999, "series": [{"data": [[1.57233324E12, 46317.28999999999]], "isOverall": false, "label": "Login into Web", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57233324E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 19603.634000000024, "minX": 1.57233324E12, "maxY": 19603.634000000024, "series": [{"data": [[1.57233324E12, 19603.634000000024]], "isOverall": false, "label": "Login into Web", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57233324E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 25001.0, "minX": 1.57233324E12, "maxY": 51267.0, "series": [{"data": [[1.57233324E12, 51267.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57233324E12, 25001.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57233324E12, 50493.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57233324E12, 51261.17]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57233324E12, 50575.9]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57233324E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 23431.0, "minX": 4.0, "maxY": 51921.0, "series": [{"data": [[8.0, 39382.0], [9.0, 48278.0], [37.0, 50531.0], [10.0, 34844.0], [11.0, 41947.0], [12.0, 42856.0], [13.0, 42325.5], [14.0, 29842.0], [227.0, 51144.0], [15.0, 47446.0], [4.0, 26407.0], [16.0, 37598.0], [17.0, 40661.0], [18.0, 33455.5], [19.0, 27659.5], [7.0, 25700.0], [28.0, 34348.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 39621.0], [9.0, 48483.0], [37.0, 50946.5], [10.0, 30848.0], [11.0, 41553.0], [12.0, 32705.0], [13.0, 42513.0], [14.0, 30775.0], [227.0, 51282.0], [15.0, 47063.0], [4.0, 26331.5], [16.0, 37380.5], [17.0, 40506.0], [18.0, 33694.5], [19.0, 27386.0], [5.0, 23431.0], [410.0, 51921.0], [7.0, 25751.0], [28.0, 34374.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 410.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 4.0, "maxY": 51921.0, "series": [{"data": [[8.0, 39282.0], [9.0, 48179.0], [37.0, 50428.0], [10.0, 34747.0], [11.0, 41847.5], [12.0, 42755.0], [13.0, 42226.5], [14.0, 29742.0], [227.0, 51079.0], [15.0, 47346.0], [4.0, 26310.0], [16.0, 37500.0], [17.0, 40562.0], [18.0, 33356.5], [19.0, 27554.5], [7.0, 25542.5], [28.0, 34247.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 39620.0], [9.0, 48483.0], [37.0, 50946.5], [10.0, 30848.0], [11.0, 41553.0], [12.0, 32584.0], [13.0, 42512.0], [14.0, 30775.0], [227.0, 51282.0], [15.0, 47063.0], [4.0, 26331.0], [16.0, 37380.0], [17.0, 40506.0], [18.0, 0.0], [19.0, 27386.0], [5.0, 23429.0], [410.0, 51921.0], [7.0, 25751.0], [28.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 410.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57233318E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57233318E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57233318E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.57233324E12, "maxY": 10.6, "series": [{"data": [[1.57233324E12, 4.466666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.57233324E12, 1.2166666666666666]], "isOverall": false, "label": "400", "isController": false}, {"data": [[1.57233324E12, 10.6]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.57233324E12, 0.38333333333333336]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57233324E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.466666666666667, "minX": 1.57233324E12, "maxY": 12.2, "series": [{"data": [[1.57233324E12, 12.2]], "isOverall": false, "label": "Login into Web-failure", "isController": false}, {"data": [[1.57233324E12, 4.466666666666667]], "isOverall": false, "label": "Login into Web-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57233324E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.466666666666667, "minX": 1.57233324E12, "maxY": 12.2, "series": [{"data": [[1.57233324E12, 4.466666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.57233324E12, 12.2]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57233324E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

