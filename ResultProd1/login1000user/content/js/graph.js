/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 18143.0, "minX": 0.0, "maxY": 49025.0, "series": [{"data": [[0.0, 18143.0], [0.1, 18261.0], [0.2, 18530.0], [0.3, 18530.0], [0.4, 18531.0], [0.5, 18535.0], [0.6, 18771.0], [0.7, 18912.0], [0.8, 19157.0], [0.9, 19216.0], [1.0, 19314.0], [1.1, 19542.0], [1.2, 19725.0], [1.3, 19725.0], [1.4, 20044.0], [1.5, 20446.0], [1.6, 20765.0], [1.7, 20765.0], [1.8, 21489.0], [1.9, 21491.0], [2.0, 22081.0], [2.1, 22221.0], [2.2, 22422.0], [2.3, 22498.0], [2.4, 22778.0], [2.5, 23362.0], [2.6, 23437.0], [2.7, 23499.0], [2.8, 23625.0], [2.9, 23807.0], [3.0, 23813.0], [3.1, 23815.0], [3.2, 23820.0], [3.3, 23889.0], [3.4, 23904.0], [3.5, 24041.0], [3.6, 24043.0], [3.7, 24053.0], [3.8, 24105.0], [3.9, 24132.0], [4.0, 24238.0], [4.1, 24273.0], [4.2, 24347.0], [4.3, 24368.0], [4.4, 24475.0], [4.5, 24475.0], [4.6, 24500.0], [4.7, 24546.0], [4.8, 24554.0], [4.9, 24565.0], [5.0, 24566.0], [5.1, 24618.0], [5.2, 24713.0], [5.3, 24774.0], [5.4, 24831.0], [5.5, 24867.0], [5.6, 24874.0], [5.7, 24972.0], [5.8, 25012.0], [5.9, 25017.0], [6.0, 25043.0], [6.1, 25071.0], [6.2, 25122.0], [6.3, 25250.0], [6.4, 25454.0], [6.5, 25476.0], [6.6, 25523.0], [6.7, 25609.0], [6.8, 25624.0], [6.9, 25761.0], [7.0, 25863.0], [7.1, 25889.0], [7.2, 25957.0], [7.3, 26092.0], [7.4, 26186.0], [7.5, 26240.0], [7.6, 26250.0], [7.7, 26331.0], [7.8, 26392.0], [7.9, 26584.0], [8.0, 26609.0], [8.1, 26956.0], [8.2, 26992.0], [8.3, 27099.0], [8.4, 27165.0], [8.5, 27168.0], [8.6, 27236.0], [8.7, 27344.0], [8.8, 27457.0], [8.9, 27465.0], [9.0, 27471.0], [9.1, 27471.0], [9.2, 27488.0], [9.3, 27540.0], [9.4, 27599.0], [9.5, 27615.0], [9.6, 27619.0], [9.7, 27706.0], [9.8, 27912.0], [9.9, 27941.0], [10.0, 28069.0], [10.1, 28123.0], [10.2, 28253.0], [10.3, 28337.0], [10.4, 28405.0], [10.5, 28680.0], [10.6, 28721.0], [10.7, 28727.0], [10.8, 28740.0], [10.9, 28991.0], [11.0, 28996.0], [11.1, 29095.0], [11.2, 29096.0], [11.3, 29184.0], [11.4, 29271.0], [11.5, 29293.0], [11.6, 29391.0], [11.7, 29438.0], [11.8, 29448.0], [11.9, 29462.0], [12.0, 29466.0], [12.1, 29466.0], [12.2, 29592.0], [12.3, 29626.0], [12.4, 29703.0], [12.5, 29711.0], [12.6, 29782.0], [12.7, 29824.0], [12.8, 29829.0], [12.9, 29829.0], [13.0, 29830.0], [13.1, 29830.0], [13.2, 29840.0], [13.3, 29851.0], [13.4, 29937.0], [13.5, 29970.0], [13.6, 29995.0], [13.7, 29998.0], [13.8, 30000.0], [13.9, 30063.0], [14.0, 30065.0], [14.1, 30138.0], [14.2, 30206.0], [14.3, 30446.0], [14.4, 30488.0], [14.5, 30501.0], [14.6, 30506.0], [14.7, 30517.0], [14.8, 30587.0], [14.9, 30635.0], [15.0, 30663.0], [15.1, 30664.0], [15.2, 30669.0], [15.3, 31069.0], [15.4, 31076.0], [15.5, 31203.0], [15.6, 31295.0], [15.7, 31500.0], [15.8, 31540.0], [15.9, 31636.0], [16.0, 31639.0], [16.1, 31660.0], [16.2, 31674.0], [16.3, 31690.0], [16.4, 31752.0], [16.5, 31781.0], [16.6, 31800.0], [16.7, 31852.0], [16.8, 32009.0], [16.9, 32150.0], [17.0, 32170.0], [17.1, 32282.0], [17.2, 32303.0], [17.3, 32448.0], [17.4, 32723.0], [17.5, 32724.0], [17.6, 32781.0], [17.7, 32836.0], [17.8, 32913.0], [17.9, 32982.0], [18.0, 33095.0], [18.1, 33307.0], [18.2, 33350.0], [18.3, 33453.0], [18.4, 33462.0], [18.5, 33488.0], [18.6, 33526.0], [18.7, 33846.0], [18.8, 33894.0], [18.9, 33894.0], [19.0, 34047.0], [19.1, 34072.0], [19.2, 34286.0], [19.3, 34289.0], [19.4, 34295.0], [19.5, 34300.0], [19.6, 34311.0], [19.7, 34378.0], [19.8, 34417.0], [19.9, 34435.0], [20.0, 34534.0], [20.1, 34746.0], [20.2, 34850.0], [20.3, 34850.0], [20.4, 34915.0], [20.5, 35133.0], [20.6, 35138.0], [20.7, 35200.0], [20.8, 35313.0], [20.9, 35342.0], [21.0, 35359.0], [21.1, 35374.0], [21.2, 35441.0], [21.3, 35494.0], [21.4, 35558.0], [21.5, 35564.0], [21.6, 35748.0], [21.7, 35800.0], [21.8, 35948.0], [21.9, 36008.0], [22.0, 36156.0], [22.1, 36169.0], [22.2, 36312.0], [22.3, 36327.0], [22.4, 36514.0], [22.5, 36515.0], [22.6, 36538.0], [22.7, 36555.0], [22.8, 36571.0], [22.9, 36753.0], [23.0, 36754.0], [23.1, 36780.0], [23.2, 37049.0], [23.3, 37188.0], [23.4, 37668.0], [23.5, 37732.0], [23.6, 37777.0], [23.7, 37825.0], [23.8, 37847.0], [23.9, 37957.0], [24.0, 37999.0], [24.1, 38045.0], [24.2, 38066.0], [24.3, 38157.0], [24.4, 38205.0], [24.5, 38273.0], [24.6, 38310.0], [24.7, 38339.0], [24.8, 38400.0], [24.9, 38661.0], [25.0, 38763.0], [25.1, 38764.0], [25.2, 38797.0], [25.3, 38842.0], [25.4, 38881.0], [25.5, 38906.0], [25.6, 38971.0], [25.7, 39007.0], [25.8, 39009.0], [25.9, 39167.0], [26.0, 39182.0], [26.1, 39311.0], [26.2, 39651.0], [26.3, 39839.0], [26.4, 39889.0], [26.5, 39981.0], [26.6, 40008.0], [26.7, 40149.0], [26.8, 40184.0], [26.9, 40188.0], [27.0, 40245.0], [27.1, 40252.0], [27.2, 40546.0], [27.3, 40706.0], [27.4, 40723.0], [27.5, 40727.0], [27.6, 40785.0], [27.7, 40789.0], [27.8, 40901.0], [27.9, 40901.0], [28.0, 40971.0], [28.1, 41109.0], [28.2, 41131.0], [28.3, 41326.0], [28.4, 41460.0], [28.5, 41556.0], [28.6, 41666.0], [28.7, 41759.0], [28.8, 41774.0], [28.9, 41793.0], [29.0, 41823.0], [29.1, 41879.0], [29.2, 41980.0], [29.3, 42125.0], [29.4, 42127.0], [29.5, 42174.0], [29.6, 42204.0], [29.7, 42254.0], [29.8, 42390.0], [29.9, 42433.0], [30.0, 42673.0], [30.1, 42806.0], [30.2, 42935.0], [30.3, 42949.0], [30.4, 42993.0], [30.5, 43073.0], [30.6, 43113.0], [30.7, 43190.0], [30.8, 43399.0], [30.9, 43546.0], [31.0, 43678.0], [31.1, 43904.0], [31.2, 43927.0], [31.3, 43930.0], [31.4, 43936.0], [31.5, 44084.0], [31.6, 44110.0], [31.7, 44169.0], [31.8, 44187.0], [31.9, 44323.0], [32.0, 44427.0], [32.1, 44504.0], [32.2, 44544.0], [32.3, 44669.0], [32.4, 44763.0], [32.5, 45214.0], [32.6, 45278.0], [32.7, 45398.0], [32.8, 45410.0], [32.9, 45621.0], [33.0, 45625.0], [33.1, 45651.0], [33.2, 45652.0], [33.3, 45654.0], [33.4, 45729.0], [33.5, 45789.0], [33.6, 45798.0], [33.7, 45805.0], [33.8, 45812.0], [33.9, 45989.0], [34.0, 46013.0], [34.1, 46129.0], [34.2, 46184.0], [34.3, 46191.0], [34.4, 46191.0], [34.5, 46194.0], [34.6, 46194.0], [34.7, 46195.0], [34.8, 46195.0], [34.9, 46195.0], [35.0, 46195.0], [35.1, 46196.0], [35.2, 46197.0], [35.3, 46198.0], [35.4, 46198.0], [35.5, 46199.0], [35.6, 46199.0], [35.7, 46199.0], [35.8, 46200.0], [35.9, 46201.0], [36.0, 46202.0], [36.1, 46219.0], [36.2, 46232.0], [36.3, 46259.0], [36.4, 46259.0], [36.5, 46260.0], [36.6, 46260.0], [36.7, 46260.0], [36.8, 46265.0], [36.9, 46266.0], [37.0, 46266.0], [37.1, 46266.0], [37.2, 46266.0], [37.3, 46267.0], [37.4, 46267.0], [37.5, 46267.0], [37.6, 46267.0], [37.7, 46267.0], [37.8, 46267.0], [37.9, 46267.0], [38.0, 46268.0], [38.1, 46278.0], [38.2, 46299.0], [38.3, 46580.0], [38.4, 46585.0], [38.5, 46591.0], [38.6, 46592.0], [38.7, 46627.0], [38.8, 46631.0], [38.9, 46632.0], [39.0, 46655.0], [39.1, 46666.0], [39.2, 46681.0], [39.3, 46685.0], [39.4, 46687.0], [39.5, 46691.0], [39.6, 46693.0], [39.7, 46694.0], [39.8, 46694.0], [39.9, 46695.0], [40.0, 46698.0], [40.1, 46699.0], [40.2, 46700.0], [40.3, 46700.0], [40.4, 46702.0], [40.5, 46705.0], [40.6, 46705.0], [40.7, 46706.0], [40.8, 46706.0], [40.9, 46710.0], [41.0, 46718.0], [41.1, 46738.0], [41.2, 46739.0], [41.3, 46739.0], [41.4, 46741.0], [41.5, 46742.0], [41.6, 46767.0], [41.7, 46767.0], [41.8, 46768.0], [41.9, 46768.0], [42.0, 46768.0], [42.1, 46778.0], [42.2, 46781.0], [42.3, 46781.0], [42.4, 46788.0], [42.5, 46801.0], [42.6, 46873.0], [42.7, 46886.0], [42.8, 47079.0], [42.9, 47088.0], [43.0, 47089.0], [43.1, 47092.0], [43.2, 47092.0], [43.3, 47094.0], [43.4, 47094.0], [43.5, 47094.0], [43.6, 47095.0], [43.7, 47095.0], [43.8, 47096.0], [43.9, 47096.0], [44.0, 47096.0], [44.1, 47096.0], [44.2, 47097.0], [44.3, 47097.0], [44.4, 47097.0], [44.5, 47097.0], [44.6, 47097.0], [44.7, 47097.0], [44.8, 47097.0], [44.9, 47097.0], [45.0, 47097.0], [45.1, 47097.0], [45.2, 47097.0], [45.3, 47097.0], [45.4, 47097.0], [45.5, 47097.0], [45.6, 47097.0], [45.7, 47098.0], [45.8, 47098.0], [45.9, 47098.0], [46.0, 47104.0], [46.1, 47105.0], [46.2, 47107.0], [46.3, 47107.0], [46.4, 47108.0], [46.5, 47137.0], [46.6, 47137.0], [46.7, 47144.0], [46.8, 47145.0], [46.9, 47145.0], [47.0, 47145.0], [47.1, 47145.0], [47.2, 47146.0], [47.3, 47146.0], [47.4, 47156.0], [47.5, 47157.0], [47.6, 47166.0], [47.7, 47169.0], [47.8, 47189.0], [47.9, 47191.0], [48.0, 47194.0], [48.1, 47195.0], [48.2, 47209.0], [48.3, 47259.0], [48.4, 47278.0], [48.5, 47306.0], [48.6, 47306.0], [48.7, 47307.0], [48.8, 47307.0], [48.9, 47307.0], [49.0, 47308.0], [49.1, 47309.0], [49.2, 47309.0], [49.3, 47310.0], [49.4, 47310.0], [49.5, 47311.0], [49.6, 47338.0], [49.7, 47341.0], [49.8, 47341.0], [49.9, 47342.0], [50.0, 47345.0], [50.1, 47355.0], [50.2, 47355.0], [50.3, 47373.0], [50.4, 47374.0], [50.5, 47375.0], [50.6, 47375.0], [50.7, 47378.0], [50.8, 47380.0], [50.9, 47380.0], [51.0, 47381.0], [51.1, 47384.0], [51.2, 47387.0], [51.3, 47389.0], [51.4, 47391.0], [51.5, 47392.0], [51.6, 47394.0], [51.7, 47394.0], [51.8, 47397.0], [51.9, 47398.0], [52.0, 47399.0], [52.1, 47400.0], [52.2, 47400.0], [52.3, 47400.0], [52.4, 47401.0], [52.5, 47401.0], [52.6, 47402.0], [52.7, 47402.0], [52.8, 47403.0], [52.9, 47403.0], [53.0, 47403.0], [53.1, 47403.0], [53.2, 47403.0], [53.3, 47406.0], [53.4, 47407.0], [53.5, 47408.0], [53.6, 47408.0], [53.7, 47409.0], [53.8, 47409.0], [53.9, 47410.0], [54.0, 47411.0], [54.1, 47412.0], [54.2, 47412.0], [54.3, 47414.0], [54.4, 47414.0], [54.5, 47418.0], [54.6, 47418.0], [54.7, 47419.0], [54.8, 47421.0], [54.9, 47421.0], [55.0, 47422.0], [55.1, 47422.0], [55.2, 47423.0], [55.3, 47423.0], [55.4, 47424.0], [55.5, 47425.0], [55.6, 47426.0], [55.7, 47428.0], [55.8, 47428.0], [55.9, 47428.0], [56.0, 47428.0], [56.1, 47429.0], [56.2, 47430.0], [56.3, 47430.0], [56.4, 47431.0], [56.5, 47432.0], [56.6, 47432.0], [56.7, 47433.0], [56.8, 47433.0], [56.9, 47433.0], [57.0, 47433.0], [57.1, 47433.0], [57.2, 47434.0], [57.3, 47434.0], [57.4, 47435.0], [57.5, 47436.0], [57.6, 47436.0], [57.7, 47436.0], [57.8, 47438.0], [57.9, 47438.0], [58.0, 47439.0], [58.1, 47439.0], [58.2, 47439.0], [58.3, 47440.0], [58.4, 47440.0], [58.5, 47440.0], [58.6, 47443.0], [58.7, 47443.0], [58.8, 47444.0], [58.9, 47445.0], [59.0, 47445.0], [59.1, 47447.0], [59.2, 47448.0], [59.3, 47452.0], [59.4, 47452.0], [59.5, 47452.0], [59.6, 47456.0], [59.7, 47456.0], [59.8, 47457.0], [59.9, 47457.0], [60.0, 47459.0], [60.1, 47459.0], [60.2, 47465.0], [60.3, 47466.0], [60.4, 47466.0], [60.5, 47468.0], [60.6, 47470.0], [60.7, 47471.0], [60.8, 47474.0], [60.9, 47475.0], [61.0, 47475.0], [61.1, 47475.0], [61.2, 47475.0], [61.3, 47475.0], [61.4, 47475.0], [61.5, 47476.0], [61.6, 47476.0], [61.7, 47476.0], [61.8, 47476.0], [61.9, 47476.0], [62.0, 47477.0], [62.1, 47477.0], [62.2, 47477.0], [62.3, 47480.0], [62.4, 47484.0], [62.5, 47492.0], [62.6, 47495.0], [62.7, 47499.0], [62.8, 47500.0], [62.9, 47500.0], [63.0, 47500.0], [63.1, 47501.0], [63.2, 47508.0], [63.3, 47509.0], [63.4, 47509.0], [63.5, 47525.0], [63.6, 47547.0], [63.7, 47547.0], [63.8, 47547.0], [63.9, 47549.0], [64.0, 47549.0], [64.1, 47559.0], [64.2, 47591.0], [64.3, 47736.0], [64.4, 47743.0], [64.5, 47756.0], [64.6, 47764.0], [64.7, 47765.0], [64.8, 47765.0], [64.9, 47766.0], [65.0, 47768.0], [65.1, 47769.0], [65.2, 47770.0], [65.3, 47777.0], [65.4, 47779.0], [65.5, 47779.0], [65.6, 47779.0], [65.7, 47780.0], [65.8, 47782.0], [65.9, 47786.0], [66.0, 47795.0], [66.1, 47796.0], [66.2, 47797.0], [66.3, 47797.0], [66.4, 47802.0], [66.5, 47804.0], [66.6, 47807.0], [66.7, 47808.0], [66.8, 47809.0], [66.9, 47809.0], [67.0, 47810.0], [67.1, 47810.0], [67.2, 47811.0], [67.3, 47812.0], [67.4, 47812.0], [67.5, 47813.0], [67.6, 47814.0], [67.7, 47814.0], [67.8, 47815.0], [67.9, 47817.0], [68.0, 47817.0], [68.1, 47818.0], [68.2, 47818.0], [68.3, 47819.0], [68.4, 47821.0], [68.5, 47822.0], [68.6, 47823.0], [68.7, 47824.0], [68.8, 47825.0], [68.9, 47828.0], [69.0, 47830.0], [69.1, 47831.0], [69.2, 47837.0], [69.3, 47845.0], [69.4, 47845.0], [69.5, 47857.0], [69.6, 47866.0], [69.7, 47866.0], [69.8, 47866.0], [69.9, 47866.0], [70.0, 47866.0], [70.1, 47866.0], [70.2, 47867.0], [70.3, 47867.0], [70.4, 47867.0], [70.5, 47867.0], [70.6, 47867.0], [70.7, 47867.0], [70.8, 47867.0], [70.9, 47867.0], [71.0, 47869.0], [71.1, 47882.0], [71.2, 47893.0], [71.3, 47895.0], [71.4, 47900.0], [71.5, 47901.0], [71.6, 47903.0], [71.7, 47903.0], [71.8, 47905.0], [71.9, 47909.0], [72.0, 47909.0], [72.1, 47909.0], [72.2, 47909.0], [72.3, 47910.0], [72.4, 47913.0], [72.5, 47913.0], [72.6, 47914.0], [72.7, 47915.0], [72.8, 47915.0], [72.9, 47917.0], [73.0, 47921.0], [73.1, 47922.0], [73.2, 47922.0], [73.3, 47927.0], [73.4, 47928.0], [73.5, 47928.0], [73.6, 47930.0], [73.7, 47932.0], [73.8, 47932.0], [73.9, 47936.0], [74.0, 47938.0], [74.1, 47938.0], [74.2, 47939.0], [74.3, 47939.0], [74.4, 47942.0], [74.5, 47942.0], [74.6, 47947.0], [74.7, 47963.0], [74.8, 47963.0], [74.9, 47963.0], [75.0, 47964.0], [75.1, 47965.0], [75.2, 47965.0], [75.3, 47965.0], [75.4, 47966.0], [75.5, 47982.0], [75.6, 48008.0], [75.7, 48009.0], [75.8, 48009.0], [75.9, 48009.0], [76.0, 48041.0], [76.1, 48073.0], [76.2, 48077.0], [76.3, 48089.0], [76.4, 48104.0], [76.5, 48104.0], [76.6, 48111.0], [76.7, 48111.0], [76.8, 48124.0], [76.9, 48125.0], [77.0, 48141.0], [77.1, 48156.0], [77.2, 48156.0], [77.3, 48157.0], [77.4, 48157.0], [77.5, 48158.0], [77.6, 48159.0], [77.7, 48159.0], [77.8, 48160.0], [77.9, 48163.0], [78.0, 48178.0], [78.1, 48180.0], [78.2, 48180.0], [78.3, 48180.0], [78.4, 48181.0], [78.5, 48182.0], [78.6, 48184.0], [78.7, 48185.0], [78.8, 48185.0], [78.9, 48185.0], [79.0, 48187.0], [79.1, 48187.0], [79.2, 48187.0], [79.3, 48187.0], [79.4, 48187.0], [79.5, 48187.0], [79.6, 48188.0], [79.7, 48189.0], [79.8, 48189.0], [79.9, 48189.0], [80.0, 48189.0], [80.1, 48190.0], [80.2, 48192.0], [80.3, 48194.0], [80.4, 48194.0], [80.5, 48195.0], [80.6, 48195.0], [80.7, 48196.0], [80.8, 48198.0], [80.9, 48198.0], [81.0, 48204.0], [81.1, 48207.0], [81.2, 48211.0], [81.3, 48212.0], [81.4, 48212.0], [81.5, 48213.0], [81.6, 48213.0], [81.7, 48213.0], [81.8, 48214.0], [81.9, 48214.0], [82.0, 48214.0], [82.1, 48214.0], [82.2, 48215.0], [82.3, 48231.0], [82.4, 48231.0], [82.5, 48231.0], [82.6, 48232.0], [82.7, 48272.0], [82.8, 48277.0], [82.9, 48279.0], [83.0, 48305.0], [83.1, 48312.0], [83.2, 48312.0], [83.3, 48312.0], [83.4, 48313.0], [83.5, 48313.0], [83.6, 48313.0], [83.7, 48314.0], [83.8, 48330.0], [83.9, 48348.0], [84.0, 48352.0], [84.1, 48356.0], [84.2, 48357.0], [84.3, 48357.0], [84.4, 48359.0], [84.5, 48361.0], [84.6, 48366.0], [84.7, 48368.0], [84.8, 48368.0], [84.9, 48372.0], [85.0, 48374.0], [85.1, 48376.0], [85.2, 48380.0], [85.3, 48382.0], [85.4, 48386.0], [85.5, 48386.0], [85.6, 48389.0], [85.7, 48392.0], [85.8, 48392.0], [85.9, 48394.0], [86.0, 48398.0], [86.1, 48398.0], [86.2, 48401.0], [86.3, 48401.0], [86.4, 48403.0], [86.5, 48403.0], [86.6, 48404.0], [86.7, 48404.0], [86.8, 48404.0], [86.9, 48409.0], [87.0, 48410.0], [87.1, 48413.0], [87.2, 48413.0], [87.3, 48423.0], [87.4, 48439.0], [87.5, 48460.0], [87.6, 48465.0], [87.7, 48466.0], [87.8, 48467.0], [87.9, 48467.0], [88.0, 48483.0], [88.1, 48484.0], [88.2, 48484.0], [88.3, 48487.0], [88.4, 48489.0], [88.5, 48489.0], [88.6, 48489.0], [88.7, 48491.0], [88.8, 48493.0], [88.9, 48494.0], [89.0, 48509.0], [89.1, 48509.0], [89.2, 48512.0], [89.3, 48514.0], [89.4, 48517.0], [89.5, 48517.0], [89.6, 48517.0], [89.7, 48518.0], [89.8, 48518.0], [89.9, 48518.0], [90.0, 48518.0], [90.1, 48518.0], [90.2, 48518.0], [90.3, 48518.0], [90.4, 48519.0], [90.5, 48519.0], [90.6, 48519.0], [90.7, 48519.0], [90.8, 48519.0], [90.9, 48520.0], [91.0, 48520.0], [91.1, 48520.0], [91.2, 48521.0], [91.3, 48522.0], [91.4, 48523.0], [91.5, 48525.0], [91.6, 48525.0], [91.7, 48535.0], [91.8, 48542.0], [91.9, 48542.0], [92.0, 48543.0], [92.1, 48543.0], [92.2, 48543.0], [92.3, 48545.0], [92.4, 48546.0], [92.5, 48546.0], [92.6, 48547.0], [92.7, 48547.0], [92.8, 48548.0], [92.9, 48548.0], [93.0, 48548.0], [93.1, 48550.0], [93.2, 48550.0], [93.3, 48550.0], [93.4, 48551.0], [93.5, 48551.0], [93.6, 48551.0], [93.7, 48551.0], [93.8, 48552.0], [93.9, 48552.0], [94.0, 48552.0], [94.1, 48552.0], [94.2, 48552.0], [94.3, 48557.0], [94.4, 48557.0], [94.5, 48557.0], [94.6, 48557.0], [94.7, 48557.0], [94.8, 48558.0], [94.9, 48558.0], [95.0, 48558.0], [95.1, 48559.0], [95.2, 48572.0], [95.3, 48573.0], [95.4, 48574.0], [95.5, 48574.0], [95.6, 48576.0], [95.7, 48576.0], [95.8, 48576.0], [95.9, 48577.0], [96.0, 48577.0], [96.1, 48577.0], [96.2, 48580.0], [96.3, 48601.0], [96.4, 48602.0], [96.5, 48603.0], [96.6, 48643.0], [96.7, 48677.0], [96.8, 48679.0], [96.9, 48680.0], [97.0, 48681.0], [97.1, 48681.0], [97.2, 48685.0], [97.3, 48686.0], [97.4, 48686.0], [97.5, 48688.0], [97.6, 48688.0], [97.7, 48694.0], [97.8, 48696.0], [97.9, 48710.0], [98.0, 48713.0], [98.1, 48714.0], [98.2, 48715.0], [98.3, 48717.0], [98.4, 48719.0], [98.5, 48720.0], [98.6, 48721.0], [98.7, 48721.0], [98.8, 48722.0], [98.9, 48722.0], [99.0, 48722.0], [99.1, 48722.0], [99.2, 48723.0], [99.3, 48728.0], [99.4, 48729.0], [99.5, 48930.0], [99.6, 48932.0], [99.7, 48964.0], [99.8, 48967.0], [99.9, 49025.0]], "isOverall": false, "label": "Login into Web", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 18100.0, "maxY": 107.0, "series": [{"data": [[32900.0, 2.0], [33300.0, 2.0], [34500.0, 1.0], [34900.0, 1.0], [35300.0, 4.0], [36100.0, 2.0], [35700.0, 1.0], [36500.0, 5.0], [37700.0, 2.0], [38900.0, 2.0], [38100.0, 1.0], [39300.0, 1.0], [40100.0, 3.0], [40900.0, 3.0], [40500.0, 1.0], [41700.0, 3.0], [41300.0, 1.0], [42100.0, 3.0], [42900.0, 3.0], [43300.0, 1.0], [44100.0, 3.0], [44500.0, 2.0], [45300.0, 1.0], [46100.0, 17.0], [45700.0, 3.0], [46500.0, 4.0], [47300.0, 36.0], [48100.0, 46.0], [48500.0, 73.0], [48900.0, 4.0], [47700.0, 21.0], [18200.0, 1.0], [19200.0, 1.0], [20000.0, 1.0], [20400.0, 1.0], [21400.0, 2.0], [22400.0, 2.0], [22000.0, 1.0], [22200.0, 1.0], [23400.0, 2.0], [24000.0, 3.0], [24400.0, 2.0], [23800.0, 5.0], [24200.0, 2.0], [23600.0, 1.0], [24600.0, 1.0], [25400.0, 2.0], [25000.0, 4.0], [24800.0, 3.0], [25200.0, 1.0], [25600.0, 2.0], [26200.0, 2.0], [25800.0, 2.0], [26600.0, 1.0], [26000.0, 1.0], [27200.0, 1.0], [27400.0, 5.0], [27000.0, 1.0], [27600.0, 2.0], [28000.0, 1.0], [28400.0, 1.0], [28200.0, 1.0], [28600.0, 1.0], [29200.0, 2.0], [29400.0, 5.0], [29000.0, 2.0], [29600.0, 1.0], [29800.0, 7.0], [30400.0, 2.0], [30200.0, 1.0], [30600.0, 4.0], [30000.0, 3.0], [31000.0, 2.0], [31200.0, 2.0], [31600.0, 5.0], [32400.0, 1.0], [31800.0, 2.0], [32000.0, 1.0], [32200.0, 1.0], [32800.0, 1.0], [34800.0, 2.0], [34000.0, 2.0], [34400.0, 2.0], [35200.0, 1.0], [36000.0, 1.0], [38000.0, 2.0], [37600.0, 1.0], [38400.0, 1.0], [38800.0, 2.0], [39600.0, 1.0], [40000.0, 1.0], [41600.0, 1.0], [42800.0, 1.0], [42400.0, 1.0], [44000.0, 1.0], [43600.0, 1.0], [44400.0, 1.0], [45600.0, 5.0], [46000.0, 1.0], [45200.0, 2.0], [46800.0, 3.0], [47200.0, 3.0], [48000.0, 8.0], [48400.0, 28.0], [34300.0, 3.0], [33500.0, 1.0], [34700.0, 1.0], [35100.0, 2.0], [35900.0, 1.0], [35500.0, 2.0], [36300.0, 2.0], [36700.0, 3.0], [37100.0, 1.0], [38300.0, 2.0], [37900.0, 2.0], [38700.0, 3.0], [39100.0, 2.0], [39900.0, 1.0], [40700.0, 5.0], [41100.0, 2.0], [41900.0, 1.0], [41500.0, 1.0], [42300.0, 1.0], [43500.0, 1.0], [43900.0, 4.0], [43100.0, 2.0], [44300.0, 1.0], [44700.0, 1.0], [45900.0, 1.0], [47100.0, 22.0], [46700.0, 23.0], [48300.0, 33.0], [48700.0, 16.0], [47500.0, 15.0], [47900.0, 42.0], [18100.0, 1.0], [18500.0, 4.0], [18700.0, 1.0], [18900.0, 1.0], [19300.0, 1.0], [19100.0, 1.0], [19700.0, 2.0], [19500.0, 1.0], [20700.0, 1.0], [22700.0, 1.0], [23300.0, 1.0], [23900.0, 1.0], [24100.0, 2.0], [24500.0, 6.0], [24300.0, 2.0], [24700.0, 2.0], [24900.0, 1.0], [25500.0, 1.0], [25100.0, 1.0], [25700.0, 1.0], [26100.0, 1.0], [26300.0, 2.0], [25900.0, 1.0], [26500.0, 1.0], [27100.0, 2.0], [26900.0, 2.0], [27300.0, 1.0], [27500.0, 2.0], [27700.0, 1.0], [27900.0, 2.0], [28100.0, 1.0], [28300.0, 1.0], [28700.0, 3.0], [28900.0, 2.0], [29100.0, 1.0], [29500.0, 1.0], [29300.0, 1.0], [29900.0, 4.0], [30500.0, 4.0], [30100.0, 1.0], [29700.0, 3.0], [31500.0, 2.0], [31700.0, 2.0], [32100.0, 2.0], [32700.0, 3.0], [32300.0, 1.0], [34200.0, 3.0], [33400.0, 3.0], [33000.0, 1.0], [33800.0, 2.0], [35400.0, 2.0], [35800.0, 1.0], [37000.0, 1.0], [38200.0, 2.0], [37800.0, 2.0], [38600.0, 1.0], [39000.0, 2.0], [39800.0, 2.0], [40200.0, 2.0], [41400.0, 1.0], [41800.0, 2.0], [42200.0, 2.0], [42600.0, 1.0], [43000.0, 1.0], [44600.0, 1.0], [45400.0, 1.0], [46200.0, 25.0], [46600.0, 15.0], [45800.0, 2.0], [47000.0, 32.0], [47400.0, 107.0], [47800.0, 50.0], [48200.0, 20.0], [48600.0, 16.0], [49000.0, 1.0]], "isOverall": false, "label": "Login into Web", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 49000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 264.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 736.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 264.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 736.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 513.8260000000002, "minX": 1.57233168E12, "maxY": 513.8260000000002, "series": [{"data": [[1.57233168E12, 513.8260000000002]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57233168E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 18261.0, "minX": 3.0, "maxY": 48723.0, "series": [{"data": [[3.0, 48077.0], [15.0, 47878.49999999999], [48.0, 47799.90909090909], [82.0, 47433.0], [87.0, 48423.0], [85.0, 47477.0], [92.0, 47626.5], [99.0, 47821.0], [98.0, 47789.60714285713], [97.0, 47828.0], [103.0, 47466.0], [102.0, 47623.5], [107.0, 47462.0], [104.0, 47854.666666666664], [111.0, 47739.333333333336], [108.0, 47745.75], [114.0, 47879.333333333336], [119.0, 47679.666666666664], [118.0, 47412.0], [122.0, 47812.0], [120.0, 47459.0], [127.0, 47767.0], [125.0, 47879.0], [135.0, 47558.0], [134.0, 48403.0], [133.0, 47456.0], [131.0, 47634.0], [130.0, 47409.0], [129.0, 48404.0], [142.0, 47809.0], [141.0, 48401.0], [139.0, 47418.0], [138.0, 47810.0], [137.0, 48403.0], [151.0, 47917.0], [150.0, 47680.5], [147.0, 47630.0], [145.0, 47570.333333333336], [159.0, 47859.0], [158.0, 47448.0], [157.0, 47401.0], [155.0, 47913.0], [153.0, 47915.0], [152.0, 48398.0], [167.0, 47605.5], [166.0, 47942.0], [165.0, 47399.0], [163.0, 48404.0], [162.0, 47927.666666666664], [160.0, 47412.0], [173.0, 47752.0], [172.0, 47407.0], [171.0, 47445.0], [170.0, 48392.0], [168.0, 47909.0], [169.0, 47445.0], [183.0, 47595.5], [182.0, 48389.0], [181.0, 47413.333333333336], [180.0, 47444.0], [178.0, 48165.0], [176.0, 47938.5], [191.0, 47742.0], [189.0, 47439.0], [187.0, 47621.2], [185.0, 47403.0], [184.0, 47715.0], [186.0, 47664.666666666664], [188.0, 47403.0], [197.0, 47515.4], [195.0, 47401.0], [192.0, 47440.0], [205.0, 47434.0], [203.0, 47795.0], [201.0, 47436.0], [200.0, 47900.0], [215.0, 47430.0], [214.0, 47894.0], [211.0, 47754.666666666664], [208.0, 47866.333333333336], [221.0, 47440.0], [220.0, 47586.5], [218.0, 47744.333333333336], [231.0, 47779.0], [227.0, 47866.0], [226.0, 47426.0], [224.0, 47380.0], [238.0, 47668.5], [236.0, 47488.25], [233.0, 47423.0], [232.0, 47659.666666666664], [246.0, 47525.333333333336], [244.0, 47913.0], [243.0, 47398.0], [242.0, 47381.0], [241.0, 48369.0], [255.0, 47375.0], [252.0, 47910.0], [251.0, 47838.5], [250.0, 47769.0], [248.0, 48368.0], [268.0, 47576.5], [267.0, 47355.0], [265.0, 47377.5], [263.0, 47839.857142857145], [262.0, 47374.0], [260.0, 47766.0], [257.0, 47909.0], [279.0, 47845.0], [277.0, 47487.0], [275.0, 47475.0], [274.0, 47392.0], [273.0, 47601.0], [292.0, 47288.99999999999], [349.0, 47406.33333333333], [367.0, 48720.0], [365.0, 48699.0], [361.0, 48649.8], [359.0, 48723.0], [356.0, 48694.0], [354.0, 48712.0], [352.0, 48311.333333333336], [381.0, 48715.0], [375.0, 48476.666666666664], [374.0, 48521.0], [373.0, 48686.0], [371.0, 48686.0], [369.0, 48719.0], [368.0, 48539.5], [399.0, 48231.0], [389.0, 47922.6], [388.0, 48530.5], [387.0, 48499.666666666664], [386.0, 48681.0], [384.0, 48697.5], [509.0, 48373.77272727272], [537.0, 48104.0], [535.0, 48501.5], [533.0, 48318.0], [530.0, 48375.0], [527.0, 48157.0], [519.0, 48525.0], [518.0, 48279.0], [526.0, 48379.0], [524.0, 48511.333333333336], [523.0, 48218.0], [520.0, 48271.333333333336], [549.0, 48043.41666666666], [579.0, 47446.142857142855], [639.0, 46285.0], [637.0, 46788.0], [636.0, 46614.0], [634.0, 46620.5], [632.0, 45812.0], [631.0, 47342.0], [630.0, 46580.075], [610.0, 46565.29629629629], [666.0, 45772.5], [670.0, 46013.0], [671.0, 45989.0], [656.0, 47169.0], [658.0, 47278.0], [657.0, 47166.0], [661.0, 46627.0], [660.0, 46631.5], [669.0, 46129.0], [668.0, 46195.0], [667.0, 45214.0], [664.0, 46278.0], [647.0, 46475.0], [645.0, 46738.0], [644.0, 46740.25], [640.0, 46767.0], [655.0, 45651.0], [654.0, 46666.0], [653.0, 46683.0], [651.0, 46687.0], [650.0, 46694.0], [649.0, 46219.0], [648.0, 45729.0], [663.0, 46299.0], [662.0, 45625.0], [700.0, 42433.0], [703.0, 42174.0], [688.0, 43190.0], [691.0, 44084.0], [690.0, 43611.5], [693.0, 42993.0], [692.0, 43073.0], [702.0, 42254.0], [701.0, 42390.0], [699.0, 43399.0], [698.0, 42935.0], [697.0, 43546.0], [696.0, 42949.0], [687.0, 44323.0], [673.0, 45654.0], [672.0, 45410.0], [675.0, 45621.0], [674.0, 45652.0], [677.0, 44504.0], [676.0, 44544.0], [679.0, 45398.0], [678.0, 44427.0], [686.0, 44169.0], [685.0, 43678.0], [684.0, 43904.0], [683.0, 43936.0], [682.0, 44669.0], [681.0, 44187.0], [680.0, 44763.0], [695.0, 43927.0], [694.0, 43930.0], [729.0, 40149.0], [734.0, 40476.0], [735.0, 41793.0], [721.0, 40706.0], [720.0, 41131.0], [723.0, 40789.0], [722.0, 41980.0], [725.0, 40245.0], [724.0, 40723.0], [732.0, 40008.0], [731.0, 40546.0], [730.0, 41109.0], [728.0, 40188.0], [711.0, 41666.0], [710.0, 42204.0], [709.0, 41774.0], [708.0, 42806.0], [707.0, 41879.0], [706.0, 42125.0], [705.0, 42127.0], [704.0, 42673.0], [719.0, 41759.0], [718.0, 40785.0], [717.0, 40901.0], [715.0, 41460.0], [714.0, 41823.0], [713.0, 41326.0], [712.0, 41556.0], [727.0, 40252.0], [726.0, 40727.0], [760.0, 38310.0], [764.0, 38066.0], [766.0, 37789.5], [753.0, 38045.0], [752.0, 38157.0], [755.0, 37999.0], [754.0, 39007.0], [763.0, 37668.0], [762.0, 38273.0], [761.0, 37777.0], [751.0, 39182.0], [737.0, 39839.0], [736.0, 39889.0], [739.0, 39651.0], [738.0, 40184.0], [741.0, 39009.0], [740.0, 39311.0], [743.0, 38881.0], [742.0, 38971.0], [750.0, 38797.0], [749.0, 38400.0], [748.0, 39167.0], [747.0, 38661.0], [746.0, 38763.5], [744.0, 38842.0], [759.0, 37825.0], [758.0, 38906.0], [757.0, 37957.0], [756.0, 38339.0], [793.0, 35359.0], [798.0, 34850.0], [799.0, 34915.0], [785.0, 35558.0], [784.0, 36156.0], [787.0, 35948.0], [786.0, 35564.0], [789.0, 35313.0], [788.0, 35342.0], [797.0, 34534.0], [796.0, 35138.0], [795.0, 34939.5], [792.0, 35374.0], [775.0, 36571.0], [774.0, 36780.0], [773.0, 36515.0], [772.0, 36514.0], [771.0, 37049.0], [770.0, 36753.0], [769.0, 36754.0], [768.0, 37696.5], [783.0, 36169.0], [782.0, 35748.0], [781.0, 36312.0], [780.0, 35800.0], [779.0, 36327.0], [778.0, 36008.0], [777.0, 36555.0], [776.0, 36538.0], [791.0, 35494.0], [790.0, 35200.0], [828.0, 31752.0], [831.0, 31636.0], [816.0, 34850.0], [818.0, 32836.0], [817.0, 33350.0], [821.0, 34378.0], [820.0, 32723.5], [830.0, 31639.0], [829.0, 31660.0], [827.0, 32282.0], [826.0, 31852.0], [825.0, 32781.0], [824.0, 32303.0], [815.0, 33095.0], [801.0, 34417.0], [800.0, 34286.0], [803.0, 35441.0], [802.0, 34435.0], [805.0, 33894.0], [804.0, 34295.0], [807.0, 34300.0], [806.0, 34311.0], [814.0, 33307.0], [813.0, 33846.0], [812.0, 33462.0], [811.0, 33453.0], [810.0, 33526.0], [809.0, 34047.0], [808.0, 34072.0], [823.0, 34289.0], [822.0, 33488.0], [848.0, 32150.0], [852.0, 29703.0], [856.0, 29851.0], [839.0, 32982.0], [838.0, 31540.0], [837.0, 31682.0], [835.0, 31781.0], [834.0, 31800.0], [833.0, 31500.0], [832.0, 32009.0], [847.0, 32170.0], [846.0, 31072.5], [844.0, 32448.0], [843.0, 30669.0], [842.0, 31295.0], [841.0, 31203.0], [840.0, 32913.0], [855.0, 29998.0], [854.0, 30000.0], [853.0, 29466.0], [851.0, 29782.0], [850.0, 30063.0], [849.0, 30635.0], [890.0, 28532.0], [894.0, 28740.0], [895.0, 28123.0], [881.0, 30206.0], [880.0, 29095.0], [884.0, 29593.0], [882.0, 30517.0], [893.0, 28253.0], [892.0, 29271.0], [891.0, 29293.0], [888.0, 28991.0], [871.0, 29096.0], [870.0, 29184.0], [869.0, 29592.0], [868.0, 29626.0], [867.0, 29775.5], [865.0, 29855.0], [864.0, 29815.0], [879.0, 28721.0], [878.0, 30663.0], [877.0, 30664.0], [876.0, 29455.0], [874.0, 28996.0], [873.0, 30326.0], [887.0, 30488.0], [886.0, 30319.5], [920.0, 26092.0], [924.0, 26584.0], [927.0, 25889.0], [915.0, 27165.0], [914.0, 27305.5], [917.0, 26331.0], [916.0, 26992.0], [926.0, 27236.0], [925.0, 25476.0], [923.0, 26609.0], [922.0, 27168.0], [921.0, 26250.0], [910.0, 27670.333333333332], [896.0, 29995.0], [898.0, 27941.0], [897.0, 29829.0], [901.0, 27599.0], [900.0, 28542.5], [903.0, 27912.0], [902.0, 27540.0], [907.0, 27293.5], [905.0, 27615.0], [904.0, 28405.0], [919.0, 27706.0], [918.0, 26186.0], [953.0, 25454.0], [957.0, 24132.0], [958.0, 24618.0], [944.0, 24831.0], [947.0, 25043.0], [946.0, 24523.5], [949.0, 24506.0], [948.0, 25012.0], [956.0, 24238.0], [955.0, 23889.0], [954.0, 24053.0], [952.0, 23625.0], [935.0, 25250.0], [934.0, 25377.666666666668], [931.0, 25957.0], [930.0, 25017.0], [929.0, 26240.0], [928.0, 25863.0], [943.0, 24368.0], [942.0, 25523.0], [941.0, 24812.5], [939.0, 25365.5], [937.0, 25624.0], [936.0, 25761.0], [951.0, 23815.0], [950.0, 24972.0], [985.0, 20446.0], [990.0, 19314.0], [991.0, 18535.0], [977.0, 22422.0], [976.0, 23904.0], [989.0, 19216.0], [988.0, 19157.0], [987.0, 19793.0], [984.0, 20765.0], [967.0, 23820.0], [966.0, 23810.0], [964.0, 24347.0], [963.0, 24606.5], [961.0, 24391.333333333332], [975.0, 22081.0], [974.0, 24041.0], [973.0, 22221.0], [972.0, 23499.0], [971.0, 24105.0], [970.0, 24475.0], [968.0, 24546.0], [983.0, 21826.0], [980.0, 22778.0], [979.0, 23437.0], [978.0, 23362.0], [1000.0, 19725.0], [998.0, 18401.333333333332], [997.0, 18531.0], [994.0, 18261.0], [993.0, 18771.0], [992.0, 18912.0]], "isOverall": false, "label": "Login into Web", "isController": false}, {"data": [[513.8099999999994, 42674.12500000004]], "isOverall": false, "label": "Login into Web-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8384.783333333333, "minX": 1.57233168E12, "maxY": 18667.083333333332, "series": [{"data": [[1.57233168E12, 18667.083333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57233168E12, 8384.783333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57233168E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 42674.12500000004, "minX": 1.57233168E12, "maxY": 42674.12500000004, "series": [{"data": [[1.57233168E12, 42674.12500000004]], "isOverall": false, "label": "Login into Web", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57233168E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 41807.86900000003, "minX": 1.57233168E12, "maxY": 41807.86900000003, "series": [{"data": [[1.57233168E12, 41807.86900000003]], "isOverall": false, "label": "Login into Web", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57233168E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 15473.25999999999, "minX": 1.57233168E12, "maxY": 15473.25999999999, "series": [{"data": [[1.57233168E12, 15473.25999999999]], "isOverall": false, "label": "Login into Web", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57233168E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 21491.0, "minX": 1.57233168E12, "maxY": 47436.0, "series": [{"data": [[1.57233168E12, 47436.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57233168E12, 21491.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57233168E12, 46249.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57233168E12, 47372.8]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57233168E12, 46738.75]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57233168E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 18533.0, "minX": 1.0, "maxY": 48187.0, "series": [{"data": [[8.0, 36754.0], [9.0, 38763.5], [11.0, 41508.0], [12.0, 43904.0], [13.0, 32723.5], [14.0, 35359.0], [15.0, 25071.0], [250.0, 46739.0], [4.0, 21491.0], [16.0, 27471.0], [17.0, 40546.0], [19.0, 28532.0], [23.0, 46629.0], [7.0, 26331.0], [28.0, 29592.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 34289.0], [9.0, 32309.0], [10.0, 18533.0], [11.0, 41326.0], [12.0, 36514.0], [13.0, 23484.0], [14.0, 35494.0], [15.0, 25957.0], [250.0, 48187.0], [1.0, 20446.0], [4.0, 21489.0], [16.0, 29466.0], [17.0, 40487.5], [19.0, 29995.0], [5.0, 19314.0], [23.0, 45278.0], [399.0, 47764.0], [28.0, 29970.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 399.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 48187.0, "series": [{"data": [[8.0, 36653.0], [9.0, 38664.0], [11.0, 41411.0], [12.0, 43806.0], [13.0, 32624.0], [14.0, 35274.0], [15.0, 24971.0], [250.0, 46627.0], [4.0, 21490.0], [16.0, 27347.0], [17.0, 40491.0], [19.0, 28433.0], [23.0, 46543.5], [7.0, 26171.0], [28.0, 29495.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 34289.0], [9.0, 32308.5], [10.0, 18530.5], [11.0, 41325.0], [12.0, 36514.0], [13.0, 22321.0], [14.0, 35494.0], [15.0, 25761.0], [250.0, 48187.0], [1.0, 20446.0], [4.0, 21489.0], [16.0, 29466.0], [17.0, 40487.5], [19.0, 0.0], [5.0, 19314.0], [23.0, 45277.0], [399.0, 47764.0], [28.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 399.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57233162E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57233162E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57233162E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.57233168E12, "maxY": 10.5, "series": [{"data": [[1.57233168E12, 4.4]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.57233168E12, 1.2833333333333334]], "isOverall": false, "label": "400", "isController": false}, {"data": [[1.57233168E12, 10.5]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.57233168E12, 0.48333333333333334]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57233168E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.4, "minX": 1.57233168E12, "maxY": 12.266666666666667, "series": [{"data": [[1.57233168E12, 12.266666666666667]], "isOverall": false, "label": "Login into Web-failure", "isController": false}, {"data": [[1.57233168E12, 4.4]], "isOverall": false, "label": "Login into Web-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57233168E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.4, "minX": 1.57233168E12, "maxY": 12.266666666666667, "series": [{"data": [[1.57233168E12, 4.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.57233168E12, 12.266666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57233168E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

