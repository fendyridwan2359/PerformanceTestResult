/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 275.0, "minX": 0.0, "maxY": 3904.0, "series": [{"data": [[0.0, 275.0], [0.1, 277.0], [0.2, 277.0], [0.3, 277.0], [0.4, 282.0], [0.5, 317.0], [0.6, 318.0], [0.7, 318.0], [0.8, 319.0], [0.9, 320.0], [1.0, 321.0], [1.1, 321.0], [1.2, 322.0], [1.3, 323.0], [1.4, 323.0], [1.5, 325.0], [1.6, 326.0], [1.7, 340.0], [1.8, 341.0], [1.9, 346.0], [2.0, 355.0], [2.1, 355.0], [2.2, 357.0], [2.3, 358.0], [2.4, 358.0], [2.5, 359.0], [2.6, 361.0], [2.7, 361.0], [2.8, 361.0], [2.9, 362.0], [3.0, 363.0], [3.1, 363.0], [3.2, 363.0], [3.3, 365.0], [3.4, 366.0], [3.5, 367.0], [3.6, 367.0], [3.7, 368.0], [3.8, 368.0], [3.9, 387.0], [4.0, 392.0], [4.1, 392.0], [4.2, 392.0], [4.3, 393.0], [4.4, 395.0], [4.5, 395.0], [4.6, 398.0], [4.7, 402.0], [4.8, 403.0], [4.9, 410.0], [5.0, 418.0], [5.1, 426.0], [5.2, 436.0], [5.3, 438.0], [5.4, 439.0], [5.5, 440.0], [5.6, 442.0], [5.7, 442.0], [5.8, 443.0], [5.9, 444.0], [6.0, 444.0], [6.1, 445.0], [6.2, 445.0], [6.3, 446.0], [6.4, 447.0], [6.5, 484.0], [6.6, 517.0], [6.7, 530.0], [6.8, 531.0], [6.9, 532.0], [7.0, 532.0], [7.1, 533.0], [7.2, 533.0], [7.3, 535.0], [7.4, 536.0], [7.5, 543.0], [7.6, 543.0], [7.7, 545.0], [7.8, 547.0], [7.9, 553.0], [8.0, 557.0], [8.1, 561.0], [8.2, 562.0], [8.3, 562.0], [8.4, 564.0], [8.5, 565.0], [8.6, 566.0], [8.7, 566.0], [8.8, 568.0], [8.9, 568.0], [9.0, 568.0], [9.1, 570.0], [9.2, 570.0], [9.3, 571.0], [9.4, 572.0], [9.5, 573.0], [9.6, 574.0], [9.7, 577.0], [9.8, 579.0], [9.9, 683.0], [10.0, 685.0], [10.1, 685.0], [10.2, 690.0], [10.3, 692.0], [10.4, 692.0], [10.5, 698.0], [10.6, 698.0], [10.7, 703.0], [10.8, 712.0], [10.9, 713.0], [11.0, 721.0], [11.1, 722.0], [11.2, 723.0], [11.3, 724.0], [11.4, 725.0], [11.5, 726.0], [11.6, 728.0], [11.7, 729.0], [11.8, 729.0], [11.9, 731.0], [12.0, 731.0], [12.1, 732.0], [12.2, 732.0], [12.3, 733.0], [12.4, 733.0], [12.5, 736.0], [12.6, 736.0], [12.7, 736.0], [12.8, 737.0], [12.9, 737.0], [13.0, 737.0], [13.1, 737.0], [13.2, 738.0], [13.3, 738.0], [13.4, 738.0], [13.5, 739.0], [13.6, 739.0], [13.7, 740.0], [13.8, 741.0], [13.9, 742.0], [14.0, 742.0], [14.1, 743.0], [14.2, 744.0], [14.3, 744.0], [14.4, 744.0], [14.5, 745.0], [14.6, 745.0], [14.7, 745.0], [14.8, 745.0], [14.9, 746.0], [15.0, 746.0], [15.1, 747.0], [15.2, 750.0], [15.3, 751.0], [15.4, 751.0], [15.5, 752.0], [15.6, 753.0], [15.7, 753.0], [15.8, 753.0], [15.9, 753.0], [16.0, 755.0], [16.1, 756.0], [16.2, 756.0], [16.3, 756.0], [16.4, 756.0], [16.5, 758.0], [16.6, 758.0], [16.7, 760.0], [16.8, 761.0], [16.9, 762.0], [17.0, 768.0], [17.1, 768.0], [17.2, 770.0], [17.3, 772.0], [17.4, 773.0], [17.5, 775.0], [17.6, 779.0], [17.7, 780.0], [17.8, 788.0], [17.9, 795.0], [18.0, 799.0], [18.1, 800.0], [18.2, 805.0], [18.3, 814.0], [18.4, 816.0], [18.5, 817.0], [18.6, 820.0], [18.7, 820.0], [18.8, 821.0], [18.9, 822.0], [19.0, 822.0], [19.1, 823.0], [19.2, 824.0], [19.3, 825.0], [19.4, 825.0], [19.5, 826.0], [19.6, 826.0], [19.7, 826.0], [19.8, 828.0], [19.9, 828.0], [20.0, 828.0], [20.1, 829.0], [20.2, 829.0], [20.3, 830.0], [20.4, 830.0], [20.5, 830.0], [20.6, 830.0], [20.7, 830.0], [20.8, 830.0], [20.9, 831.0], [21.0, 831.0], [21.1, 831.0], [21.2, 832.0], [21.3, 832.0], [21.4, 832.0], [21.5, 832.0], [21.6, 833.0], [21.7, 833.0], [21.8, 834.0], [21.9, 834.0], [22.0, 834.0], [22.1, 835.0], [22.2, 836.0], [22.3, 836.0], [22.4, 836.0], [22.5, 836.0], [22.6, 837.0], [22.7, 839.0], [22.8, 839.0], [22.9, 839.0], [23.0, 839.0], [23.1, 839.0], [23.2, 840.0], [23.3, 840.0], [23.4, 840.0], [23.5, 840.0], [23.6, 841.0], [23.7, 841.0], [23.8, 841.0], [23.9, 841.0], [24.0, 842.0], [24.1, 842.0], [24.2, 842.0], [24.3, 842.0], [24.4, 843.0], [24.5, 844.0], [24.6, 845.0], [24.7, 846.0], [24.8, 846.0], [24.9, 846.0], [25.0, 846.0], [25.1, 846.0], [25.2, 847.0], [25.3, 847.0], [25.4, 847.0], [25.5, 847.0], [25.6, 848.0], [25.7, 848.0], [25.8, 848.0], [25.9, 849.0], [26.0, 849.0], [26.1, 850.0], [26.2, 850.0], [26.3, 850.0], [26.4, 850.0], [26.5, 850.0], [26.6, 850.0], [26.7, 851.0], [26.8, 851.0], [26.9, 851.0], [27.0, 851.0], [27.1, 852.0], [27.2, 852.0], [27.3, 853.0], [27.4, 853.0], [27.5, 853.0], [27.6, 853.0], [27.7, 854.0], [27.8, 855.0], [27.9, 855.0], [28.0, 856.0], [28.1, 856.0], [28.2, 856.0], [28.3, 856.0], [28.4, 858.0], [28.5, 858.0], [28.6, 858.0], [28.7, 859.0], [28.8, 859.0], [28.9, 860.0], [29.0, 860.0], [29.1, 862.0], [29.2, 862.0], [29.3, 863.0], [29.4, 865.0], [29.5, 866.0], [29.6, 866.0], [29.7, 867.0], [29.8, 868.0], [29.9, 869.0], [30.0, 870.0], [30.1, 870.0], [30.2, 871.0], [30.3, 871.0], [30.4, 872.0], [30.5, 872.0], [30.6, 872.0], [30.7, 873.0], [30.8, 873.0], [30.9, 873.0], [31.0, 874.0], [31.1, 877.0], [31.2, 877.0], [31.3, 879.0], [31.4, 879.0], [31.5, 881.0], [31.6, 881.0], [31.7, 881.0], [31.8, 882.0], [31.9, 882.0], [32.0, 883.0], [32.1, 884.0], [32.2, 884.0], [32.3, 884.0], [32.4, 885.0], [32.5, 886.0], [32.6, 886.0], [32.7, 887.0], [32.8, 888.0], [32.9, 888.0], [33.0, 893.0], [33.1, 893.0], [33.2, 893.0], [33.3, 894.0], [33.4, 894.0], [33.5, 895.0], [33.6, 898.0], [33.7, 899.0], [33.8, 900.0], [33.9, 902.0], [34.0, 903.0], [34.1, 903.0], [34.2, 904.0], [34.3, 906.0], [34.4, 907.0], [34.5, 912.0], [34.6, 918.0], [34.7, 921.0], [34.8, 923.0], [34.9, 926.0], [35.0, 927.0], [35.1, 930.0], [35.2, 931.0], [35.3, 932.0], [35.4, 933.0], [35.5, 934.0], [35.6, 934.0], [35.7, 935.0], [35.8, 936.0], [35.9, 936.0], [36.0, 937.0], [36.1, 937.0], [36.2, 937.0], [36.3, 937.0], [36.4, 938.0], [36.5, 938.0], [36.6, 938.0], [36.7, 939.0], [36.8, 939.0], [36.9, 940.0], [37.0, 941.0], [37.1, 942.0], [37.2, 944.0], [37.3, 945.0], [37.4, 946.0], [37.5, 947.0], [37.6, 947.0], [37.7, 947.0], [37.8, 948.0], [37.9, 949.0], [38.0, 949.0], [38.1, 949.0], [38.2, 950.0], [38.3, 951.0], [38.4, 953.0], [38.5, 954.0], [38.6, 957.0], [38.7, 957.0], [38.8, 958.0], [38.9, 958.0], [39.0, 958.0], [39.1, 958.0], [39.2, 959.0], [39.3, 960.0], [39.4, 962.0], [39.5, 963.0], [39.6, 963.0], [39.7, 963.0], [39.8, 966.0], [39.9, 966.0], [40.0, 968.0], [40.1, 969.0], [40.2, 970.0], [40.3, 971.0], [40.4, 971.0], [40.5, 972.0], [40.6, 972.0], [40.7, 972.0], [40.8, 973.0], [40.9, 974.0], [41.0, 974.0], [41.1, 974.0], [41.2, 976.0], [41.3, 976.0], [41.4, 984.0], [41.5, 986.0], [41.6, 987.0], [41.7, 988.0], [41.8, 989.0], [41.9, 991.0], [42.0, 995.0], [42.1, 1000.0], [42.2, 1001.0], [42.3, 1002.0], [42.4, 1003.0], [42.5, 1003.0], [42.6, 1004.0], [42.7, 1004.0], [42.8, 1004.0], [42.9, 1004.0], [43.0, 1004.0], [43.1, 1004.0], [43.2, 1007.0], [43.3, 1008.0], [43.4, 1008.0], [43.5, 1009.0], [43.6, 1009.0], [43.7, 1009.0], [43.8, 1011.0], [43.9, 1012.0], [44.0, 1013.0], [44.1, 1013.0], [44.2, 1015.0], [44.3, 1015.0], [44.4, 1017.0], [44.5, 1020.0], [44.6, 1023.0], [44.7, 1025.0], [44.8, 1025.0], [44.9, 1030.0], [45.0, 1031.0], [45.1, 1034.0], [45.2, 1035.0], [45.3, 1040.0], [45.4, 1041.0], [45.5, 1043.0], [45.6, 1071.0], [45.7, 1071.0], [45.8, 1078.0], [45.9, 1080.0], [46.0, 1083.0], [46.1, 1083.0], [46.2, 1086.0], [46.3, 1086.0], [46.4, 1089.0], [46.5, 1096.0], [46.6, 1096.0], [46.7, 1097.0], [46.8, 1097.0], [46.9, 1097.0], [47.0, 1099.0], [47.1, 1099.0], [47.2, 1099.0], [47.3, 1101.0], [47.4, 1102.0], [47.5, 1103.0], [47.6, 1105.0], [47.7, 1106.0], [47.8, 1106.0], [47.9, 1107.0], [48.0, 1107.0], [48.1, 1108.0], [48.2, 1110.0], [48.3, 1112.0], [48.4, 1112.0], [48.5, 1113.0], [48.6, 1113.0], [48.7, 1113.0], [48.8, 1114.0], [48.9, 1115.0], [49.0, 1115.0], [49.1, 1117.0], [49.2, 1117.0], [49.3, 1117.0], [49.4, 1117.0], [49.5, 1118.0], [49.6, 1120.0], [49.7, 1121.0], [49.8, 1122.0], [49.9, 1123.0], [50.0, 1123.0], [50.1, 1127.0], [50.2, 1130.0], [50.3, 1134.0], [50.4, 1199.0], [50.5, 1202.0], [50.6, 1217.0], [50.7, 1221.0], [50.8, 1222.0], [50.9, 1222.0], [51.0, 1222.0], [51.1, 1224.0], [51.2, 1225.0], [51.3, 1225.0], [51.4, 1225.0], [51.5, 1226.0], [51.6, 1227.0], [51.7, 1233.0], [51.8, 1237.0], [51.9, 1238.0], [52.0, 1238.0], [52.1, 1240.0], [52.2, 1241.0], [52.3, 1241.0], [52.4, 1242.0], [52.5, 1242.0], [52.6, 1242.0], [52.7, 1242.0], [52.8, 1244.0], [52.9, 1246.0], [53.0, 1246.0], [53.1, 1246.0], [53.2, 1247.0], [53.3, 1247.0], [53.4, 1247.0], [53.5, 1248.0], [53.6, 1248.0], [53.7, 1249.0], [53.8, 1249.0], [53.9, 1249.0], [54.0, 1251.0], [54.1, 1252.0], [54.2, 1255.0], [54.3, 1258.0], [54.4, 1258.0], [54.5, 1258.0], [54.6, 1259.0], [54.7, 1259.0], [54.8, 1259.0], [54.9, 1260.0], [55.0, 1260.0], [55.1, 1261.0], [55.2, 1262.0], [55.3, 1262.0], [55.4, 1262.0], [55.5, 1262.0], [55.6, 1263.0], [55.7, 1263.0], [55.8, 1263.0], [55.9, 1264.0], [56.0, 1265.0], [56.1, 1265.0], [56.2, 1265.0], [56.3, 1265.0], [56.4, 1266.0], [56.5, 1266.0], [56.6, 1266.0], [56.7, 1267.0], [56.8, 1268.0], [56.9, 1268.0], [57.0, 1269.0], [57.1, 1270.0], [57.2, 1270.0], [57.3, 1271.0], [57.4, 1271.0], [57.5, 1272.0], [57.6, 1272.0], [57.7, 1273.0], [57.8, 1273.0], [57.9, 1273.0], [58.0, 1274.0], [58.1, 1274.0], [58.2, 1274.0], [58.3, 1274.0], [58.4, 1276.0], [58.5, 1276.0], [58.6, 1277.0], [58.7, 1277.0], [58.8, 1278.0], [58.9, 1281.0], [59.0, 1282.0], [59.1, 1294.0], [59.2, 1297.0], [59.3, 1302.0], [59.4, 1303.0], [59.5, 1303.0], [59.6, 1304.0], [59.7, 1304.0], [59.8, 1305.0], [59.9, 1305.0], [60.0, 1305.0], [60.1, 1305.0], [60.2, 1306.0], [60.3, 1306.0], [60.4, 1307.0], [60.5, 1308.0], [60.6, 1308.0], [60.7, 1308.0], [60.8, 1309.0], [60.9, 1310.0], [61.0, 1311.0], [61.1, 1311.0], [61.2, 1311.0], [61.3, 1311.0], [61.4, 1312.0], [61.5, 1313.0], [61.6, 1313.0], [61.7, 1313.0], [61.8, 1315.0], [61.9, 1322.0], [62.0, 1323.0], [62.1, 1324.0], [62.2, 1325.0], [62.3, 1326.0], [62.4, 1326.0], [62.5, 1327.0], [62.6, 1330.0], [62.7, 1331.0], [62.8, 1331.0], [62.9, 1331.0], [63.0, 1331.0], [63.1, 1331.0], [63.2, 1332.0], [63.3, 1332.0], [63.4, 1332.0], [63.5, 1333.0], [63.6, 1334.0], [63.7, 1335.0], [63.8, 1336.0], [63.9, 1339.0], [64.0, 1340.0], [64.1, 1346.0], [64.2, 1356.0], [64.3, 1357.0], [64.4, 1357.0], [64.5, 1357.0], [64.6, 1358.0], [64.7, 1359.0], [64.8, 1359.0], [64.9, 1363.0], [65.0, 1365.0], [65.1, 1367.0], [65.2, 1370.0], [65.3, 1370.0], [65.4, 1372.0], [65.5, 1374.0], [65.6, 1374.0], [65.7, 1375.0], [65.8, 1375.0], [65.9, 1375.0], [66.0, 1376.0], [66.1, 1376.0], [66.2, 1377.0], [66.3, 1377.0], [66.4, 1377.0], [66.5, 1378.0], [66.6, 1381.0], [66.7, 1381.0], [66.8, 1381.0], [66.9, 1382.0], [67.0, 1382.0], [67.1, 1382.0], [67.2, 1383.0], [67.3, 1383.0], [67.4, 1383.0], [67.5, 1384.0], [67.6, 1384.0], [67.7, 1385.0], [67.8, 1385.0], [67.9, 1385.0], [68.0, 1385.0], [68.1, 1385.0], [68.2, 1386.0], [68.3, 1386.0], [68.4, 1386.0], [68.5, 1387.0], [68.6, 1387.0], [68.7, 1387.0], [68.8, 1388.0], [68.9, 1388.0], [69.0, 1388.0], [69.1, 1388.0], [69.2, 1389.0], [69.3, 1389.0], [69.4, 1389.0], [69.5, 1389.0], [69.6, 1390.0], [69.7, 1391.0], [69.8, 1391.0], [69.9, 1391.0], [70.0, 1393.0], [70.1, 1395.0], [70.2, 1396.0], [70.3, 1398.0], [70.4, 1398.0], [70.5, 1400.0], [70.6, 1411.0], [70.7, 1414.0], [70.8, 1416.0], [70.9, 1418.0], [71.0, 1422.0], [71.1, 1423.0], [71.2, 1426.0], [71.3, 1427.0], [71.4, 1428.0], [71.5, 1430.0], [71.6, 1431.0], [71.7, 1433.0], [71.8, 1439.0], [71.9, 1444.0], [72.0, 1448.0], [72.1, 1460.0], [72.2, 1461.0], [72.3, 1463.0], [72.4, 1467.0], [72.5, 1469.0], [72.6, 1472.0], [72.7, 1472.0], [72.8, 1473.0], [72.9, 1473.0], [73.0, 1475.0], [73.1, 1477.0], [73.2, 1480.0], [73.3, 1482.0], [73.4, 1484.0], [73.5, 1485.0], [73.6, 1486.0], [73.7, 1487.0], [73.8, 1487.0], [73.9, 1488.0], [74.0, 1494.0], [74.1, 1495.0], [74.2, 1496.0], [74.3, 1504.0], [74.4, 1506.0], [74.5, 1507.0], [74.6, 1511.0], [74.7, 1512.0], [74.8, 1513.0], [74.9, 1516.0], [75.0, 1518.0], [75.1, 1519.0], [75.2, 1519.0], [75.3, 1520.0], [75.4, 1520.0], [75.5, 1521.0], [75.6, 1521.0], [75.7, 1523.0], [75.8, 1525.0], [75.9, 1527.0], [76.0, 1529.0], [76.1, 1530.0], [76.2, 1532.0], [76.3, 1533.0], [76.4, 1533.0], [76.5, 1534.0], [76.6, 1536.0], [76.7, 1536.0], [76.8, 1537.0], [76.9, 1538.0], [77.0, 1539.0], [77.1, 1539.0], [77.2, 1539.0], [77.3, 1540.0], [77.4, 1540.0], [77.5, 1542.0], [77.6, 1546.0], [77.7, 1551.0], [77.8, 1553.0], [77.9, 1558.0], [78.0, 1562.0], [78.1, 1563.0], [78.2, 1566.0], [78.3, 1567.0], [78.4, 1569.0], [78.5, 1569.0], [78.6, 1571.0], [78.7, 1572.0], [78.8, 1573.0], [78.9, 1575.0], [79.0, 1576.0], [79.1, 1583.0], [79.2, 1722.0], [79.3, 1723.0], [79.4, 1749.0], [79.5, 1749.0], [79.6, 1753.0], [79.7, 1754.0], [79.8, 1755.0], [79.9, 1758.0], [80.0, 1773.0], [80.1, 1774.0], [80.2, 1788.0], [80.3, 1789.0], [80.4, 1818.0], [80.5, 1903.0], [80.6, 1915.0], [80.7, 1918.0], [80.8, 1950.0], [80.9, 1952.0], [81.0, 1955.0], [81.1, 1958.0], [81.2, 1959.0], [81.3, 1960.0], [81.4, 1962.0], [81.5, 1966.0], [81.6, 1968.0], [81.7, 1973.0], [81.8, 1977.0], [81.9, 1979.0], [82.0, 1980.0], [82.1, 1981.0], [82.2, 1984.0], [82.3, 1985.0], [82.4, 1999.0], [82.5, 2000.0], [82.6, 2004.0], [82.7, 2005.0], [82.8, 2005.0], [82.9, 2006.0], [83.0, 2009.0], [83.1, 2013.0], [83.2, 2013.0], [83.3, 2016.0], [83.4, 2023.0], [83.5, 2023.0], [83.6, 2027.0], [83.7, 2027.0], [83.8, 2028.0], [83.9, 2028.0], [84.0, 2029.0], [84.1, 2029.0], [84.2, 2031.0], [84.3, 2032.0], [84.4, 2079.0], [84.5, 2098.0], [84.6, 2099.0], [84.7, 2100.0], [84.8, 2123.0], [84.9, 2134.0], [85.0, 2134.0], [85.1, 2136.0], [85.2, 2203.0], [85.3, 2205.0], [85.4, 2278.0], [85.5, 2321.0], [85.6, 2324.0], [85.7, 2336.0], [85.8, 2338.0], [85.9, 2343.0], [86.0, 2345.0], [86.1, 2368.0], [86.2, 2384.0], [86.3, 2389.0], [86.4, 2391.0], [86.5, 2391.0], [86.6, 2393.0], [86.7, 2394.0], [86.8, 2402.0], [86.9, 2407.0], [87.0, 2566.0], [87.1, 2671.0], [87.2, 2698.0], [87.3, 2707.0], [87.4, 2711.0], [87.5, 2858.0], [87.6, 2902.0], [87.7, 3073.0], [87.8, 3078.0], [87.9, 3166.0], [88.0, 3167.0], [88.1, 3169.0], [88.2, 3170.0], [88.3, 3170.0], [88.4, 3171.0], [88.5, 3172.0], [88.6, 3182.0], [88.7, 3184.0], [88.8, 3188.0], [88.9, 3191.0], [89.0, 3193.0], [89.1, 3194.0], [89.2, 3196.0], [89.3, 3196.0], [89.4, 3197.0], [89.5, 3198.0], [89.6, 3201.0], [89.7, 3205.0], [89.8, 3205.0], [89.9, 3205.0], [90.0, 3205.0], [90.1, 3206.0], [90.2, 3207.0], [90.3, 3207.0], [90.4, 3207.0], [90.5, 3207.0], [90.6, 3207.0], [90.7, 3208.0], [90.8, 3208.0], [90.9, 3208.0], [91.0, 3209.0], [91.1, 3209.0], [91.2, 3209.0], [91.3, 3210.0], [91.4, 3210.0], [91.5, 3210.0], [91.6, 3210.0], [91.7, 3211.0], [91.8, 3211.0], [91.9, 3212.0], [92.0, 3213.0], [92.1, 3213.0], [92.2, 3214.0], [92.3, 3214.0], [92.4, 3215.0], [92.5, 3215.0], [92.6, 3216.0], [92.7, 3216.0], [92.8, 3217.0], [92.9, 3218.0], [93.0, 3218.0], [93.1, 3218.0], [93.2, 3227.0], [93.3, 3228.0], [93.4, 3231.0], [93.5, 3234.0], [93.6, 3241.0], [93.7, 3241.0], [93.8, 3241.0], [93.9, 3245.0], [94.0, 3293.0], [94.1, 3299.0], [94.2, 3306.0], [94.3, 3308.0], [94.4, 3308.0], [94.5, 3309.0], [94.6, 3310.0], [94.7, 3310.0], [94.8, 3311.0], [94.9, 3312.0], [95.0, 3312.0], [95.1, 3313.0], [95.2, 3315.0], [95.3, 3315.0], [95.4, 3317.0], [95.5, 3320.0], [95.6, 3343.0], [95.7, 3352.0], [95.8, 3363.0], [95.9, 3367.0], [96.0, 3375.0], [96.1, 3385.0], [96.2, 3386.0], [96.3, 3388.0], [96.4, 3390.0], [96.5, 3391.0], [96.6, 3391.0], [96.7, 3393.0], [96.8, 3394.0], [96.9, 3495.0], [97.0, 3497.0], [97.1, 3522.0], [97.2, 3526.0], [97.3, 3527.0], [97.4, 3527.0], [97.5, 3527.0], [97.6, 3529.0], [97.7, 3529.0], [97.8, 3529.0], [97.9, 3530.0], [98.0, 3530.0], [98.1, 3532.0], [98.2, 3536.0], [98.3, 3539.0], [98.4, 3542.0], [98.5, 3543.0], [98.6, 3546.0], [98.7, 3549.0], [98.8, 3553.0], [98.9, 3555.0], [99.0, 3572.0], [99.1, 3582.0], [99.2, 3582.0], [99.3, 3596.0], [99.4, 3605.0], [99.5, 3611.0], [99.6, 3648.0], [99.7, 3651.0], [99.8, 3655.0], [99.9, 3904.0]], "isOverall": false, "label": "Access Animation Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 156.0, "series": [{"data": [[600.0, 8.0], [700.0, 74.0], [800.0, 156.0], [900.0, 83.0], [1000.0, 52.0], [1100.0, 32.0], [1200.0, 88.0], [1300.0, 112.0], [1400.0, 39.0], [1500.0, 49.0], [1700.0, 12.0], [1800.0, 1.0], [1900.0, 20.0], [2000.0, 22.0], [2100.0, 5.0], [2200.0, 3.0], [2300.0, 13.0], [2400.0, 2.0], [2500.0, 1.0], [2600.0, 2.0], [2700.0, 2.0], [2800.0, 1.0], [2900.0, 1.0], [3000.0, 2.0], [3100.0, 17.0], [200.0, 5.0], [3200.0, 46.0], [3300.0, 27.0], [3400.0, 2.0], [3500.0, 23.0], [3600.0, 5.0], [3900.0, 1.0], [300.0, 42.0], [400.0, 19.0], [500.0, 33.0]], "isOverall": false, "label": "Access Animation Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 66.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 677.0, "series": [{"data": [[0.0, 66.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 677.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 257.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 460.43200000000127, "minX": 1.57232316E12, "maxY": 460.43200000000127, "series": [{"data": [[1.57232316E12, 460.43200000000127]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57232316E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 300.3333333333333, "minX": 2.0, "maxY": 3904.0, "series": [{"data": [[2.0, 3206.5], [4.0, 3206.0], [5.0, 3217.0], [7.0, 3212.3333333333335], [9.0, 3207.0], [10.0, 3211.0], [11.0, 3209.0], [16.0, 3226.0], [17.0, 3241.0], [19.0, 3209.5], [20.0, 3241.0], [23.0, 3209.0], [24.0, 3207.5], [27.0, 3205.6666666666665], [28.0, 3230.0], [35.0, 3213.1428571428573], [40.0, 3214.0], [42.0, 3213.666666666667], [47.0, 3193.0], [49.0, 3196.0], [48.0, 3196.0], [51.0, 3189.5], [53.0, 3186.0], [57.0, 3166.0], [58.0, 3172.0], [61.0, 2902.0], [60.0, 3169.4], [62.0, 3391.0], [67.0, 3649.5], [65.0, 3655.0], [70.0, 3392.3333333333335], [69.0, 3391.0], [74.0, 2858.0], [73.0, 3375.0], [72.0, 3386.3333333333335], [79.0, 3078.0], [78.0, 3241.0], [77.0, 3904.0], [76.0, 3365.0], [82.0, 3310.0], [81.0, 2711.0], [80.0, 3073.0], [85.0, 3311.3333333333335], [89.0, 3315.0], [88.0, 3315.3333333333335], [95.0, 3314.0], [93.0, 3308.25], [99.0, 3596.0], [98.0, 3418.6666666666665], [103.0, 3582.0], [102.0, 3582.0], [101.0, 3611.0], [100.0, 3343.0], [107.0, 3495.0], [106.0, 3526.0], [104.0, 3572.0], [110.0, 3541.0], [108.0, 3546.0], [114.0, 3529.0], [113.0, 3457.0], [118.0, 3530.0], [117.0, 3537.0], [122.0, 3528.0], [120.0, 3529.5], [127.0, 2391.0], [126.0, 3531.25], [134.0, 2324.0], [133.0, 2338.0], [132.0, 2384.0], [131.0, 2389.0], [130.0, 2391.0], [129.0, 2393.0], [128.0, 2394.0], [143.0, 1571.0], [142.0, 1583.0], [141.0, 2698.0], [140.0, 2707.0], [139.0, 2671.0], [138.0, 2321.0], [137.0, 2345.0], [136.0, 2352.0], [149.0, 1316.5], [147.0, 1326.0], [146.0, 1396.0], [145.0, 1487.0], [144.0, 2566.0], [159.0, 1386.5], [158.0, 1391.0], [154.0, 1371.0], [152.0, 1377.6666666666667], [165.0, 1431.0], [164.0, 1358.0], [161.0, 1380.0], [174.0, 1327.0], [173.0, 1324.0], [171.0, 1631.75], [169.0, 2407.0], [168.0, 2205.0], [183.0, 1364.5], [181.0, 1395.0], [180.0, 1390.6666666666667], [190.0, 1358.0], [188.0, 1463.5], [186.0, 1370.0], [184.0, 1331.0], [199.0, 1281.0], [198.0, 1263.0], [197.0, 1258.0], [196.0, 1439.0], [195.0, 1246.0], [194.0, 1723.0], [193.0, 1363.0], [192.0, 1783.5], [207.0, 1297.0], [206.0, 1311.0], [205.0, 1294.0], [204.0, 1238.0], [203.0, 1237.0], [202.0, 2203.0], [201.0, 2005.0], [200.0, 2278.0], [214.0, 2076.6666666666665], [213.0, 2134.0], [210.0, 1504.0], [209.0, 1430.5], [222.0, 1370.0], [221.0, 1251.0], [220.0, 1676.0], [217.0, 1661.0], [216.0, 1202.0], [231.0, 2000.5], [230.0, 2099.0], [228.0, 1661.3333333333333], [225.0, 1918.0], [224.0, 1484.0], [238.0, 1751.5], [237.0, 1749.0], [236.0, 1737.5], [234.0, 1758.0], [232.0, 2079.0], [244.0, 1472.5], [242.0, 1479.0], [241.0, 1579.3333333333333], [255.0, 1475.0], [254.0, 1485.0], [253.0, 1480.5], [251.0, 1473.5], [249.0, 1475.0], [259.0, 2027.0], [270.0, 2006.0], [269.0, 2024.0], [266.0, 2014.5], [264.0, 2028.0], [263.0, 2028.0], [262.0, 1866.6666666666667], [258.0, 2029.0], [257.0, 1461.0], [256.0, 1463.0], [286.0, 1569.5], [287.0, 1566.0], [284.0, 1716.3333333333333], [281.0, 1575.0], [280.0, 1773.5], [278.0, 2001.0], [276.0, 1821.6666666666667], [273.0, 2029.0], [272.0, 2016.0], [301.0, 1411.0], [300.0, 1984.0], [299.0, 1921.6666666666667], [296.0, 1982.25], [292.0, 1777.0], [290.0, 1444.0], [289.0, 1565.5], [317.0, 1384.0], [319.0, 1385.0], [316.0, 1382.5], [314.0, 1951.0], [312.0, 1961.5], [310.0, 1958.0], [309.0, 1414.0], [308.0, 1959.0], [307.0, 1962.0], [306.0, 1414.4], [323.0, 1388.0], [335.0, 825.5], [333.0, 1384.5], [322.0, 1390.0], [321.0, 1383.5], [331.0, 1386.0], [330.0, 1385.0], [329.0, 1388.0], [327.0, 1388.0], [326.0, 1389.0], [325.0, 1391.0], [324.0, 1391.0], [349.0, 1339.0], [350.0, 1335.0], [348.0, 1340.0], [338.0, 1383.5], [336.0, 1385.0], [347.0, 762.0], [346.0, 768.0], [345.0, 799.5], [343.0, 805.0], [342.0, 1386.0], [340.0, 1381.0], [355.0, 1332.0], [366.0, 1305.0], [365.0, 1312.6666666666667], [362.0, 1325.0], [360.0, 1333.0], [359.0, 1331.0], [358.0, 1331.5], [356.0, 1331.0], [354.0, 1038.5], [352.0, 1332.0], [371.0, 1310.0], [383.0, 1305.0], [379.0, 1303.5], [377.0, 1302.5], [375.0, 1305.0], [374.0, 1308.6666666666667], [372.0, 1308.0], [370.0, 1308.5], [369.0, 1308.0], [398.0, 1273.0], [397.0, 1275.3333333333333], [395.0, 1273.0], [393.0, 1272.5], [392.0, 1271.0], [390.0, 1270.6666666666667], [387.0, 1270.3333333333333], [384.0, 1306.0], [415.0, 1241.0], [414.0, 1238.0], [412.0, 1244.5], [407.0, 1247.3333333333333], [406.0, 1249.0], [402.0, 1249.0], [401.0, 1275.3333333333333], [430.0, 1267.6666666666667], [427.0, 1225.5], [425.0, 1224.75], [421.0, 1222.0], [420.0, 1244.2], [446.0, 1261.6666666666667], [447.0, 1261.0], [445.0, 1262.0], [442.0, 1263.0], [440.0, 1260.5], [438.0, 1264.0], [435.0, 1256.5], [434.0, 1259.0], [432.0, 1260.0], [462.0, 1533.0], [463.0, 1551.0], [460.0, 1533.0], [456.0, 1539.0], [455.0, 1538.0], [453.0, 1262.0], [452.0, 1265.0], [451.0, 1265.6666666666667], [449.0, 1265.0], [473.0, 1524.75], [469.0, 1412.0], [467.0, 1543.4], [495.0, 387.0], [494.0, 398.5], [492.0, 402.0], [491.0, 403.0], [490.0, 418.0], [489.0, 1503.0], [486.0, 1512.5], [484.0, 1522.909090909091], [508.0, 1131.8333333333333], [502.0, 900.0], [497.0, 1277.0], [541.0, 355.0], [543.0, 360.0], [540.0, 340.5], [538.0, 964.5], [536.0, 323.0], [519.0, 318.0], [518.0, 537.0], [516.0, 426.0], [515.0, 300.3333333333333], [512.0, 849.5], [526.0, 775.0], [524.0, 321.0], [522.0, 318.0], [521.0, 322.0], [520.0, 317.0], [535.0, 1367.0], [533.0, 846.5], [531.0, 891.6666666666666], [528.0, 816.0], [572.0, 443.0], [575.0, 443.0], [570.0, 437.0], [568.0, 417.25], [565.0, 393.5], [562.0, 392.0], [560.0, 364.125], [557.0, 372.75], [546.0, 403.0], [549.0, 363.0], [548.0, 365.0], [583.0, 912.0], [603.0, 572.0], [606.0, 574.2], [600.0, 565.3333333333334], [597.0, 567.3333333333334], [594.0, 559.0], [589.0, 781.3333333333334], [586.0, 1233.0], [585.0, 793.0], [582.0, 685.0], [581.0, 1314.0], [579.0, 445.0], [577.0, 445.5], [636.0, 742.5], [638.0, 749.0], [634.0, 751.0], [615.0, 742.0], [611.0, 554.6], [627.0, 737.6666666666666], [628.0, 739.5], [626.0, 728.0], [625.0, 758.75], [621.0, 743.8], [617.0, 643.5], [668.0, 971.5], [671.0, 1098.3333333333333], [667.0, 1117.5], [647.0, 746.0], [646.0, 753.0], [643.0, 726.0], [642.0, 739.6666666666666], [640.0, 737.0], [661.0, 739.75], [659.0, 928.5], [656.0, 1123.0], [654.0, 1086.6], [653.0, 1123.0], [651.0, 980.6], [649.0, 753.0], [648.0, 756.0], [697.0, 907.4999999999999], [687.0, 898.5], [699.0, 919.9999999999999], [698.0, 990.625], [701.0, 998.0], [700.0, 954.75], [703.0, 931.0], [688.0, 989.5], [702.0, 937.0], [696.0, 852.4285714285714], [679.0, 814.6], [677.0, 954.5], [678.0, 753.5], [676.0, 922.3333333333334], [675.0, 891.5], [673.0, 939.6666666666666], [674.0, 730.6666666666666], [689.0, 926.4000000000001], [685.0, 972.6666666666667], [684.0, 836.75], [683.0, 830.1666666666667], [681.0, 827.2], [680.0, 962.0], [682.0, 940.25], [690.0, 942.5], [691.0, 971.5], [692.0, 874.0], [694.0, 951.0], [695.0, 1006.3333333333334], [693.0, 955.0], [686.0, 902.6666666666667], [730.0, 838.3333333333334], [722.0, 843.0], [732.0, 846.3333333333334], [733.0, 826.4], [721.0, 843.6666666666666], [720.0, 849.5], [731.0, 843.0], [728.0, 836.0], [709.0, 977.6666666666666], [708.0, 954.7142857142858], [707.0, 931.75], [704.0, 927.3333333333334], [706.0, 1104.5], [710.0, 1043.0], [717.0, 842.0], [716.0, 1024.7777777777776], [715.0, 994.5], [714.0, 993.4], [713.0, 1022.6666666666666], [712.0, 1027.6666666666667], [727.0, 839.6666666666666], [725.0, 841.0], [724.0, 847.5], [765.0, 832.25], [767.0, 836.5], [764.0, 830.0], [762.0, 847.0], [761.0, 827.5], [740.0, 845.3333333333334], [739.0, 831.0], [738.0, 836.3333333333334], [737.0, 842.3333333333334], [751.0, 835.25], [749.0, 833.3333333333334], [746.0, 795.0], [744.0, 847.0], [758.0, 832.5], [757.0, 832.0], [755.0, 838.0], [752.0, 815.6666666666666], [794.0, 736.6666666666666], [795.0, 704.8], [792.0, 733.6666666666666], [775.0, 821.0], [773.0, 823.75], [791.0, 739.0], [790.0, 739.0], [785.0, 745.8], [782.0, 831.0], [783.0, 824.0], [781.0, 816.0], [780.0, 836.75], [778.0, 840.0], [777.0, 831.5]], "isOverall": false, "label": "Access Animation Page", "isController": false}, {"data": [[460.42399999999924, 1387.231000000001]], "isOverall": false, "label": "Access Animation Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 795.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3900.0, "minX": 1.57232316E12, "maxY": 131468.96666666667, "series": [{"data": [[1.57232316E12, 131468.96666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57232316E12, 3900.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57232316E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1387.231000000001, "minX": 1.57232316E12, "maxY": 1387.231000000001, "series": [{"data": [[1.57232316E12, 1387.231000000001]], "isOverall": false, "label": "Access Animation Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57232316E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1133.8929999999996, "minX": 1.57232316E12, "maxY": 1133.8929999999996, "series": [{"data": [[1.57232316E12, 1133.8929999999996]], "isOverall": false, "label": "Access Animation Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57232316E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 774.6669999999991, "minX": 1.57232316E12, "maxY": 774.6669999999991, "series": [{"data": [[1.57232316E12, 774.6669999999991]], "isOverall": false, "label": "Access Animation Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57232316E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 275.0, "minX": 1.57232316E12, "maxY": 3904.0, "series": [{"data": [[1.57232316E12, 3904.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57232316E12, 275.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57232316E12, 3205.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57232316E12, 3571.83]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57232316E12, 3312.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57232316E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 868.5, "minX": 60.0, "maxY": 3318.5, "series": [{"data": [[279.0, 1385.0], [580.0, 868.5], [81.0, 3210.0], [60.0, 3318.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 580.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 687.5, "minX": 60.0, "maxY": 3305.5, "series": [{"data": [[279.0, 1229.0], [580.0, 687.5], [81.0, 3117.0], [60.0, 3305.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 580.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57232316E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57232316E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57232316E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57232316E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57232316E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57232316E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57232316E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57232316E12, 16.666666666666668]], "isOverall": false, "label": "Access Animation Page-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57232316E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57232316E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57232316E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57232316E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

