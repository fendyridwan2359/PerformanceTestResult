/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 4434.0, "series": [{"data": [[0.0, 10.0], [0.1, 14.0], [0.2, 14.0], [0.3, 14.0], [0.4, 16.0], [0.5, 17.0], [0.6, 18.0], [0.7, 18.0], [0.8, 18.0], [0.9, 19.0], [1.0, 20.0], [1.1, 20.0], [1.2, 21.0], [1.3, 21.0], [1.4, 21.0], [1.5, 22.0], [1.6, 23.0], [1.7, 23.0], [1.8, 24.0], [1.9, 24.0], [2.0, 85.0], [2.1, 171.0], [2.2, 174.0], [2.3, 174.0], [2.4, 175.0], [2.5, 175.0], [2.6, 179.0], [2.7, 182.0], [2.8, 185.0], [2.9, 189.0], [3.0, 190.0], [3.1, 190.0], [3.2, 191.0], [3.3, 192.0], [3.4, 194.0], [3.5, 195.0], [3.6, 198.0], [3.7, 204.0], [3.8, 206.0], [3.9, 208.0], [4.0, 209.0], [4.1, 209.0], [4.2, 209.0], [4.3, 210.0], [4.4, 210.0], [4.5, 211.0], [4.6, 211.0], [4.7, 211.0], [4.8, 211.0], [4.9, 212.0], [5.0, 212.0], [5.1, 212.0], [5.2, 213.0], [5.3, 213.0], [5.4, 213.0], [5.5, 214.0], [5.6, 214.0], [5.7, 215.0], [5.8, 215.0], [5.9, 215.0], [6.0, 215.0], [6.1, 215.0], [6.2, 215.0], [6.3, 216.0], [6.4, 217.0], [6.5, 217.0], [6.6, 219.0], [6.7, 220.0], [6.8, 222.0], [6.9, 222.0], [7.0, 223.0], [7.1, 223.0], [7.2, 224.0], [7.3, 224.0], [7.4, 225.0], [7.5, 225.0], [7.6, 226.0], [7.7, 226.0], [7.8, 227.0], [7.9, 227.0], [8.0, 227.0], [8.1, 228.0], [8.2, 229.0], [8.3, 230.0], [8.4, 230.0], [8.5, 230.0], [8.6, 230.0], [8.7, 232.0], [8.8, 232.0], [8.9, 232.0], [9.0, 233.0], [9.1, 234.0], [9.2, 235.0], [9.3, 237.0], [9.4, 237.0], [9.5, 238.0], [9.6, 239.0], [9.7, 242.0], [9.8, 242.0], [9.9, 243.0], [10.0, 244.0], [10.1, 245.0], [10.2, 247.0], [10.3, 250.0], [10.4, 254.0], [10.5, 254.0], [10.6, 260.0], [10.7, 261.0], [10.8, 267.0], [10.9, 270.0], [11.0, 273.0], [11.1, 275.0], [11.2, 285.0], [11.3, 302.0], [11.4, 303.0], [11.5, 304.0], [11.6, 304.0], [11.7, 305.0], [11.8, 306.0], [11.9, 306.0], [12.0, 308.0], [12.1, 329.0], [12.2, 370.0], [12.3, 376.0], [12.4, 379.0], [12.5, 380.0], [12.6, 386.0], [12.7, 387.0], [12.8, 388.0], [12.9, 389.0], [13.0, 391.0], [13.1, 392.0], [13.2, 410.0], [13.3, 412.0], [13.4, 416.0], [13.5, 417.0], [13.6, 424.0], [13.7, 431.0], [13.8, 436.0], [13.9, 440.0], [14.0, 442.0], [14.1, 446.0], [14.2, 449.0], [14.3, 449.0], [14.4, 451.0], [14.5, 451.0], [14.6, 453.0], [14.7, 455.0], [14.8, 455.0], [14.9, 456.0], [15.0, 456.0], [15.1, 459.0], [15.2, 459.0], [15.3, 463.0], [15.4, 467.0], [15.5, 590.0], [15.6, 591.0], [15.7, 592.0], [15.8, 595.0], [15.9, 597.0], [16.0, 598.0], [16.1, 600.0], [16.2, 601.0], [16.3, 604.0], [16.4, 606.0], [16.5, 608.0], [16.6, 608.0], [16.7, 608.0], [16.8, 609.0], [16.9, 611.0], [17.0, 614.0], [17.1, 615.0], [17.2, 616.0], [17.3, 618.0], [17.4, 619.0], [17.5, 620.0], [17.6, 620.0], [17.7, 642.0], [17.8, 644.0], [17.9, 647.0], [18.0, 655.0], [18.1, 656.0], [18.2, 663.0], [18.3, 682.0], [18.4, 682.0], [18.5, 765.0], [18.6, 800.0], [18.7, 807.0], [18.8, 814.0], [18.9, 816.0], [19.0, 820.0], [19.1, 823.0], [19.2, 830.0], [19.3, 833.0], [19.4, 838.0], [19.5, 842.0], [19.6, 843.0], [19.7, 847.0], [19.8, 860.0], [19.9, 887.0], [20.0, 892.0], [20.1, 893.0], [20.2, 1053.0], [20.3, 1057.0], [20.4, 1058.0], [20.5, 1063.0], [20.6, 1077.0], [20.7, 1077.0], [20.8, 1080.0], [20.9, 1132.0], [21.0, 1146.0], [21.1, 1147.0], [21.2, 1167.0], [21.3, 1186.0], [21.4, 1190.0], [21.5, 1193.0], [21.6, 1194.0], [21.7, 1194.0], [21.8, 1196.0], [21.9, 1196.0], [22.0, 1198.0], [22.1, 1204.0], [22.2, 1205.0], [22.3, 1212.0], [22.4, 1213.0], [22.5, 1215.0], [22.6, 1217.0], [22.7, 1218.0], [22.8, 1218.0], [22.9, 1218.0], [23.0, 1219.0], [23.1, 1219.0], [23.2, 1220.0], [23.3, 1220.0], [23.4, 1221.0], [23.5, 1222.0], [23.6, 1222.0], [23.7, 1225.0], [23.8, 1225.0], [23.9, 1227.0], [24.0, 1228.0], [24.1, 1229.0], [24.2, 1229.0], [24.3, 1232.0], [24.4, 1236.0], [24.5, 1236.0], [24.6, 1248.0], [24.7, 1256.0], [24.8, 1266.0], [24.9, 1304.0], [25.0, 1310.0], [25.1, 1314.0], [25.2, 1317.0], [25.3, 1317.0], [25.4, 1317.0], [25.5, 1319.0], [25.6, 1319.0], [25.7, 1319.0], [25.8, 1320.0], [25.9, 1320.0], [26.0, 1320.0], [26.1, 1321.0], [26.2, 1322.0], [26.3, 1326.0], [26.4, 1326.0], [26.5, 1329.0], [26.6, 1330.0], [26.7, 1330.0], [26.8, 1333.0], [26.9, 1333.0], [27.0, 1334.0], [27.1, 1335.0], [27.2, 1335.0], [27.3, 1336.0], [27.4, 1337.0], [27.5, 1337.0], [27.6, 1337.0], [27.7, 1337.0], [27.8, 1338.0], [27.9, 1338.0], [28.0, 1338.0], [28.1, 1338.0], [28.2, 1338.0], [28.3, 1340.0], [28.4, 1340.0], [28.5, 1341.0], [28.6, 1341.0], [28.7, 1341.0], [28.8, 1341.0], [28.9, 1342.0], [29.0, 1344.0], [29.1, 1348.0], [29.2, 1349.0], [29.3, 1356.0], [29.4, 1362.0], [29.5, 1366.0], [29.6, 1368.0], [29.7, 1371.0], [29.8, 1376.0], [29.9, 1378.0], [30.0, 1380.0], [30.1, 1381.0], [30.2, 1382.0], [30.3, 1383.0], [30.4, 1384.0], [30.5, 1385.0], [30.6, 1385.0], [30.7, 1388.0], [30.8, 1389.0], [30.9, 1389.0], [31.0, 1390.0], [31.1, 1392.0], [31.2, 1392.0], [31.3, 1395.0], [31.4, 1399.0], [31.5, 1399.0], [31.6, 1402.0], [31.7, 1403.0], [31.8, 1403.0], [31.9, 1405.0], [32.0, 1407.0], [32.1, 1408.0], [32.2, 1409.0], [32.3, 1409.0], [32.4, 1410.0], [32.5, 1410.0], [32.6, 1411.0], [32.7, 1413.0], [32.8, 1414.0], [32.9, 1414.0], [33.0, 1416.0], [33.1, 1423.0], [33.2, 1424.0], [33.3, 1427.0], [33.4, 1429.0], [33.5, 1431.0], [33.6, 1433.0], [33.7, 1434.0], [33.8, 1438.0], [33.9, 1438.0], [34.0, 1439.0], [34.1, 1442.0], [34.2, 1450.0], [34.3, 1455.0], [34.4, 1458.0], [34.5, 1467.0], [34.6, 1469.0], [34.7, 1470.0], [34.8, 1479.0], [34.9, 1479.0], [35.0, 1482.0], [35.1, 1487.0], [35.2, 1492.0], [35.3, 1492.0], [35.4, 1493.0], [35.5, 1495.0], [35.6, 1498.0], [35.7, 1499.0], [35.8, 1499.0], [35.9, 1501.0], [36.0, 1502.0], [36.1, 1503.0], [36.2, 1503.0], [36.3, 1504.0], [36.4, 1505.0], [36.5, 1505.0], [36.6, 1506.0], [36.7, 1506.0], [36.8, 1506.0], [36.9, 1506.0], [37.0, 1508.0], [37.1, 1509.0], [37.2, 1509.0], [37.3, 1510.0], [37.4, 1511.0], [37.5, 1512.0], [37.6, 1512.0], [37.7, 1513.0], [37.8, 1514.0], [37.9, 1514.0], [38.0, 1515.0], [38.1, 1516.0], [38.2, 1517.0], [38.3, 1517.0], [38.4, 1518.0], [38.5, 1519.0], [38.6, 1520.0], [38.7, 1520.0], [38.8, 1521.0], [38.9, 1521.0], [39.0, 1522.0], [39.1, 1523.0], [39.2, 1523.0], [39.3, 1523.0], [39.4, 1524.0], [39.5, 1525.0], [39.6, 1526.0], [39.7, 1526.0], [39.8, 1526.0], [39.9, 1528.0], [40.0, 1528.0], [40.1, 1528.0], [40.2, 1531.0], [40.3, 1532.0], [40.4, 1532.0], [40.5, 1532.0], [40.6, 1533.0], [40.7, 1534.0], [40.8, 1534.0], [40.9, 1534.0], [41.0, 1534.0], [41.1, 1535.0], [41.2, 1535.0], [41.3, 1538.0], [41.4, 1538.0], [41.5, 1539.0], [41.6, 1539.0], [41.7, 1539.0], [41.8, 1540.0], [41.9, 1540.0], [42.0, 1541.0], [42.1, 1542.0], [42.2, 1542.0], [42.3, 1542.0], [42.4, 1542.0], [42.5, 1543.0], [42.6, 1544.0], [42.7, 1544.0], [42.8, 1544.0], [42.9, 1545.0], [43.0, 1545.0], [43.1, 1545.0], [43.2, 1545.0], [43.3, 1545.0], [43.4, 1545.0], [43.5, 1546.0], [43.6, 1547.0], [43.7, 1547.0], [43.8, 1547.0], [43.9, 1547.0], [44.0, 1547.0], [44.1, 1547.0], [44.2, 1547.0], [44.3, 1547.0], [44.4, 1547.0], [44.5, 1548.0], [44.6, 1548.0], [44.7, 1548.0], [44.8, 1548.0], [44.9, 1548.0], [45.0, 1548.0], [45.1, 1549.0], [45.2, 1549.0], [45.3, 1549.0], [45.4, 1549.0], [45.5, 1549.0], [45.6, 1549.0], [45.7, 1550.0], [45.8, 1550.0], [45.9, 1550.0], [46.0, 1550.0], [46.1, 1550.0], [46.2, 1550.0], [46.3, 1550.0], [46.4, 1550.0], [46.5, 1550.0], [46.6, 1550.0], [46.7, 1550.0], [46.8, 1550.0], [46.9, 1550.0], [47.0, 1551.0], [47.1, 1551.0], [47.2, 1551.0], [47.3, 1551.0], [47.4, 1552.0], [47.5, 1552.0], [47.6, 1552.0], [47.7, 1552.0], [47.8, 1553.0], [47.9, 1553.0], [48.0, 1553.0], [48.1, 1553.0], [48.2, 1554.0], [48.3, 1554.0], [48.4, 1554.0], [48.5, 1554.0], [48.6, 1555.0], [48.7, 1555.0], [48.8, 1555.0], [48.9, 1556.0], [49.0, 1556.0], [49.1, 1556.0], [49.2, 1556.0], [49.3, 1556.0], [49.4, 1556.0], [49.5, 1556.0], [49.6, 1556.0], [49.7, 1556.0], [49.8, 1556.0], [49.9, 1557.0], [50.0, 1557.0], [50.1, 1557.0], [50.2, 1557.0], [50.3, 1557.0], [50.4, 1557.0], [50.5, 1557.0], [50.6, 1557.0], [50.7, 1558.0], [50.8, 1558.0], [50.9, 1558.0], [51.0, 1559.0], [51.1, 1559.0], [51.2, 1559.0], [51.3, 1559.0], [51.4, 1560.0], [51.5, 1560.0], [51.6, 1561.0], [51.7, 1561.0], [51.8, 1562.0], [51.9, 1562.0], [52.0, 1562.0], [52.1, 1562.0], [52.2, 1563.0], [52.3, 1563.0], [52.4, 1563.0], [52.5, 1563.0], [52.6, 1564.0], [52.7, 1564.0], [52.8, 1565.0], [52.9, 1565.0], [53.0, 1566.0], [53.1, 1566.0], [53.2, 1566.0], [53.3, 1567.0], [53.4, 1567.0], [53.5, 1567.0], [53.6, 1568.0], [53.7, 1568.0], [53.8, 1569.0], [53.9, 1569.0], [54.0, 1569.0], [54.1, 1570.0], [54.2, 1571.0], [54.3, 1571.0], [54.4, 1571.0], [54.5, 1572.0], [54.6, 1572.0], [54.7, 1573.0], [54.8, 1573.0], [54.9, 1573.0], [55.0, 1573.0], [55.1, 1573.0], [55.2, 1574.0], [55.3, 1574.0], [55.4, 1575.0], [55.5, 1575.0], [55.6, 1575.0], [55.7, 1577.0], [55.8, 1577.0], [55.9, 1579.0], [56.0, 1580.0], [56.1, 1581.0], [56.2, 1588.0], [56.3, 1589.0], [56.4, 1600.0], [56.5, 1607.0], [56.6, 1626.0], [56.7, 1654.0], [56.8, 1674.0], [56.9, 1682.0], [57.0, 1715.0], [57.1, 1717.0], [57.2, 1719.0], [57.3, 1750.0], [57.4, 1759.0], [57.5, 1760.0], [57.6, 1816.0], [57.7, 1874.0], [57.8, 1954.0], [57.9, 2098.0], [58.0, 2100.0], [58.1, 2101.0], [58.2, 2107.0], [58.3, 2107.0], [58.4, 2112.0], [58.5, 2113.0], [58.6, 2113.0], [58.7, 2114.0], [58.8, 2116.0], [58.9, 2116.0], [59.0, 2118.0], [59.1, 2118.0], [59.2, 2120.0], [59.3, 2122.0], [59.4, 2122.0], [59.5, 2123.0], [59.6, 2125.0], [59.7, 2126.0], [59.8, 2128.0], [59.9, 2128.0], [60.0, 2130.0], [60.1, 2134.0], [60.2, 2135.0], [60.3, 2140.0], [60.4, 2143.0], [60.5, 2144.0], [60.6, 2145.0], [60.7, 2146.0], [60.8, 2147.0], [60.9, 2148.0], [61.0, 2149.0], [61.1, 2149.0], [61.2, 2150.0], [61.3, 2150.0], [61.4, 2150.0], [61.5, 2151.0], [61.6, 2151.0], [61.7, 2151.0], [61.8, 2151.0], [61.9, 2152.0], [62.0, 2154.0], [62.1, 2154.0], [62.2, 2155.0], [62.3, 2157.0], [62.4, 2159.0], [62.5, 2159.0], [62.6, 2159.0], [62.7, 2160.0], [62.8, 2163.0], [62.9, 2163.0], [63.0, 2163.0], [63.1, 2164.0], [63.2, 2164.0], [63.3, 2164.0], [63.4, 2165.0], [63.5, 2173.0], [63.6, 2176.0], [63.7, 2207.0], [63.8, 2210.0], [63.9, 2213.0], [64.0, 2214.0], [64.1, 2214.0], [64.2, 2216.0], [64.3, 2217.0], [64.4, 2218.0], [64.5, 2219.0], [64.6, 2221.0], [64.7, 2221.0], [64.8, 2221.0], [64.9, 2222.0], [65.0, 2222.0], [65.1, 2223.0], [65.2, 2223.0], [65.3, 2225.0], [65.4, 2226.0], [65.5, 2228.0], [65.6, 2228.0], [65.7, 2232.0], [65.8, 2233.0], [65.9, 2233.0], [66.0, 2236.0], [66.1, 2238.0], [66.2, 2241.0], [66.3, 2241.0], [66.4, 2242.0], [66.5, 2249.0], [66.6, 2286.0], [66.7, 2289.0], [66.8, 2291.0], [66.9, 2292.0], [67.0, 2294.0], [67.1, 2295.0], [67.2, 2295.0], [67.3, 2296.0], [67.4, 2296.0], [67.5, 2297.0], [67.6, 2299.0], [67.7, 2300.0], [67.8, 2302.0], [67.9, 2304.0], [68.0, 2305.0], [68.1, 2305.0], [68.2, 2305.0], [68.3, 2310.0], [68.4, 2310.0], [68.5, 2310.0], [68.6, 2311.0], [68.7, 2312.0], [68.8, 2313.0], [68.9, 2313.0], [69.0, 2315.0], [69.1, 2318.0], [69.2, 2323.0], [69.3, 2324.0], [69.4, 2345.0], [69.5, 2349.0], [69.6, 2350.0], [69.7, 2351.0], [69.8, 2351.0], [69.9, 2354.0], [70.0, 2355.0], [70.1, 2360.0], [70.2, 2365.0], [70.3, 2367.0], [70.4, 2367.0], [70.5, 2367.0], [70.6, 2370.0], [70.7, 2371.0], [70.8, 2374.0], [70.9, 2379.0], [71.0, 2388.0], [71.1, 2388.0], [71.2, 2390.0], [71.3, 2398.0], [71.4, 2401.0], [71.5, 2411.0], [71.6, 2428.0], [71.7, 2443.0], [71.8, 2446.0], [71.9, 2452.0], [72.0, 2469.0], [72.1, 2469.0], [72.2, 2487.0], [72.3, 2503.0], [72.4, 2507.0], [72.5, 2508.0], [72.6, 2511.0], [72.7, 2523.0], [72.8, 2542.0], [72.9, 2546.0], [73.0, 2551.0], [73.1, 2556.0], [73.2, 2559.0], [73.3, 2561.0], [73.4, 2561.0], [73.5, 2562.0], [73.6, 2566.0], [73.7, 2573.0], [73.8, 2574.0], [73.9, 2575.0], [74.0, 2576.0], [74.1, 2580.0], [74.2, 2582.0], [74.3, 2583.0], [74.4, 2595.0], [74.5, 2596.0], [74.6, 2603.0], [74.7, 2603.0], [74.8, 2604.0], [74.9, 2608.0], [75.0, 2621.0], [75.1, 2653.0], [75.2, 2654.0], [75.3, 2672.0], [75.4, 2673.0], [75.5, 2677.0], [75.6, 2682.0], [75.7, 2682.0], [75.8, 2684.0], [75.9, 2685.0], [76.0, 2690.0], [76.1, 2691.0], [76.2, 2701.0], [76.3, 2715.0], [76.4, 2731.0], [76.5, 2732.0], [76.6, 2740.0], [76.7, 2746.0], [76.8, 2747.0], [76.9, 2759.0], [77.0, 2762.0], [77.1, 2785.0], [77.2, 2845.0], [77.3, 2933.0], [77.4, 3029.0], [77.5, 3107.0], [77.6, 3131.0], [77.7, 3153.0], [77.8, 3165.0], [77.9, 3177.0], [78.0, 3203.0], [78.1, 3208.0], [78.2, 3211.0], [78.3, 3250.0], [78.4, 3253.0], [78.5, 3259.0], [78.6, 3269.0], [78.7, 3273.0], [78.8, 3274.0], [78.9, 3276.0], [79.0, 3282.0], [79.1, 3284.0], [79.2, 3284.0], [79.3, 3286.0], [79.4, 3287.0], [79.5, 3287.0], [79.6, 3288.0], [79.7, 3290.0], [79.8, 3293.0], [79.9, 3294.0], [80.0, 3298.0], [80.1, 3298.0], [80.2, 3299.0], [80.3, 3299.0], [80.4, 3300.0], [80.5, 3301.0], [80.6, 3302.0], [80.7, 3303.0], [80.8, 3303.0], [80.9, 3304.0], [81.0, 3305.0], [81.1, 3306.0], [81.2, 3310.0], [81.3, 3313.0], [81.4, 3313.0], [81.5, 3313.0], [81.6, 3315.0], [81.7, 3318.0], [81.8, 3318.0], [81.9, 3319.0], [82.0, 3319.0], [82.1, 3320.0], [82.2, 3321.0], [82.3, 3322.0], [82.4, 3324.0], [82.5, 3330.0], [82.6, 3334.0], [82.7, 3336.0], [82.8, 3337.0], [82.9, 3339.0], [83.0, 3339.0], [83.1, 3341.0], [83.2, 3345.0], [83.3, 3358.0], [83.4, 3364.0], [83.5, 3367.0], [83.6, 3370.0], [83.7, 3373.0], [83.8, 3373.0], [83.9, 3374.0], [84.0, 3376.0], [84.1, 3377.0], [84.2, 3377.0], [84.3, 3379.0], [84.4, 3382.0], [84.5, 3397.0], [84.6, 3397.0], [84.7, 3409.0], [84.8, 3421.0], [84.9, 3425.0], [85.0, 3426.0], [85.1, 3427.0], [85.2, 3431.0], [85.3, 3433.0], [85.4, 3433.0], [85.5, 3434.0], [85.6, 3434.0], [85.7, 3435.0], [85.8, 3435.0], [85.9, 3435.0], [86.0, 3439.0], [86.1, 3442.0], [86.2, 3442.0], [86.3, 3442.0], [86.4, 3443.0], [86.5, 3443.0], [86.6, 3445.0], [86.7, 3446.0], [86.8, 3447.0], [86.9, 3448.0], [87.0, 3448.0], [87.1, 3449.0], [87.2, 3449.0], [87.3, 3450.0], [87.4, 3450.0], [87.5, 3451.0], [87.6, 3451.0], [87.7, 3451.0], [87.8, 3452.0], [87.9, 3452.0], [88.0, 3452.0], [88.1, 3452.0], [88.2, 3455.0], [88.3, 3456.0], [88.4, 3456.0], [88.5, 3456.0], [88.6, 3456.0], [88.7, 3457.0], [88.8, 3457.0], [88.9, 3457.0], [89.0, 3457.0], [89.1, 3458.0], [89.2, 3458.0], [89.3, 3459.0], [89.4, 3459.0], [89.5, 3459.0], [89.6, 3459.0], [89.7, 3460.0], [89.8, 3460.0], [89.9, 3461.0], [90.0, 3461.0], [90.1, 3461.0], [90.2, 3461.0], [90.3, 3462.0], [90.4, 3462.0], [90.5, 3462.0], [90.6, 3463.0], [90.7, 3464.0], [90.8, 3464.0], [90.9, 3464.0], [91.0, 3464.0], [91.1, 3465.0], [91.2, 3465.0], [91.3, 3466.0], [91.4, 3466.0], [91.5, 3468.0], [91.6, 3469.0], [91.7, 3469.0], [91.8, 3469.0], [91.9, 3470.0], [92.0, 3470.0], [92.1, 3471.0], [92.2, 3473.0], [92.3, 3473.0], [92.4, 3473.0], [92.5, 3474.0], [92.6, 3474.0], [92.7, 3475.0], [92.8, 3476.0], [92.9, 3477.0], [93.0, 3479.0], [93.1, 3479.0], [93.2, 3481.0], [93.3, 3483.0], [93.4, 3485.0], [93.5, 3486.0], [93.6, 3491.0], [93.7, 3492.0], [93.8, 3495.0], [93.9, 3495.0], [94.0, 3502.0], [94.1, 3511.0], [94.2, 3513.0], [94.3, 3514.0], [94.4, 3519.0], [94.5, 3535.0], [94.6, 3538.0], [94.7, 3538.0], [94.8, 3539.0], [94.9, 3546.0], [95.0, 3546.0], [95.1, 3547.0], [95.2, 3548.0], [95.3, 3549.0], [95.4, 3550.0], [95.5, 3552.0], [95.6, 3554.0], [95.7, 3555.0], [95.8, 3556.0], [95.9, 3557.0], [96.0, 3557.0], [96.1, 3558.0], [96.2, 3559.0], [96.3, 3562.0], [96.4, 3564.0], [96.5, 3569.0], [96.6, 3569.0], [96.7, 3571.0], [96.8, 3572.0], [96.9, 3580.0], [97.0, 3586.0], [97.1, 3587.0], [97.2, 3593.0], [97.3, 3594.0], [97.4, 3607.0], [97.5, 3607.0], [97.6, 3612.0], [97.7, 3614.0], [97.8, 3615.0], [97.9, 3615.0], [98.0, 3617.0], [98.1, 3618.0], [98.2, 3619.0], [98.3, 3624.0], [98.4, 3642.0], [98.5, 3642.0], [98.6, 3643.0], [98.7, 3669.0], [98.8, 3671.0], [98.9, 3672.0], [99.0, 3707.0], [99.1, 4190.0], [99.2, 4316.0], [99.3, 4321.0], [99.4, 4323.0], [99.5, 4327.0], [99.6, 4335.0], [99.7, 4335.0], [99.8, 4346.0], [99.9, 4434.0]], "isOverall": false, "label": "Access Movies Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 205.0, "series": [{"data": [[0.0, 21.0], [600.0, 23.0], [700.0, 1.0], [800.0, 16.0], [1000.0, 7.0], [1100.0, 12.0], [1200.0, 28.0], [1300.0, 67.0], [1400.0, 43.0], [1500.0, 205.0], [100.0, 15.0], [1600.0, 6.0], [1700.0, 6.0], [1800.0, 2.0], [1900.0, 1.0], [2000.0, 1.0], [2100.0, 57.0], [2200.0, 40.0], [2300.0, 37.0], [2400.0, 10.0], [2500.0, 23.0], [2600.0, 16.0], [2700.0, 10.0], [2800.0, 1.0], [2900.0, 1.0], [3000.0, 1.0], [3100.0, 5.0], [200.0, 77.0], [3200.0, 24.0], [3300.0, 43.0], [3400.0, 93.0], [3500.0, 34.0], [3600.0, 16.0], [3700.0, 1.0], [4300.0, 7.0], [4100.0, 1.0], [4400.0, 1.0], [300.0, 19.0], [400.0, 23.0], [500.0, 6.0]], "isOverall": false, "label": "Access Movies Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 155.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 642.0, "series": [{"data": [[0.0, 155.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 203.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 642.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 455.39300000000054, "minX": 1.57232172E12, "maxY": 455.39300000000054, "series": [{"data": [[1.57232172E12, 455.39300000000054]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57232172E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.0, "maxY": 4434.0, "series": [{"data": [[2.0, 3131.0], [3.0, 3208.0], [4.0, 3203.0], [5.0, 4434.0], [6.0, 4190.0], [10.0, 4327.0], [13.0, 4329.333333333333], [14.0, 3538.0], [15.0, 3029.0], [16.0, 1439.0], [18.0, 1430.0], [20.0, 3689.0], [21.0, 1433.0], [22.0, 1455.0], [23.0, 1266.0], [24.0, 3672.0], [25.0, 3669.0], [26.0, 1215.0], [27.0, 1218.0], [28.0, 1218.0], [30.0, 1220.5], [36.0, 1221.5], [38.0, 1232.0], [41.0, 2099.375], [47.0, 1229.0], [49.0, 1385.0], [51.0, 3615.0], [50.0, 2832.3333333333335], [52.0, 2059.3333333333335], [57.0, 1376.0], [56.0, 1282.5], [61.0, 3642.0], [62.0, 3272.857142857143], [67.0, 3593.5], [70.0, 3580.0], [68.0, 2465.0], [74.0, 1341.0], [72.0, 1334.6], [79.0, 1339.0], [77.0, 1337.0], [82.0, 1339.5], [81.0, 1340.0], [87.0, 1132.0], [86.0, 1339.5], [84.0, 1337.0], [89.0, 2358.5], [93.0, 3384.5], [98.0, 2182.6], [102.0, 1319.75], [107.0, 2578.5], [105.0, 2813.3333333333335], [111.0, 3397.0], [115.0, 3557.0], [112.0, 2433.0], [119.0, 3552.0], [118.0, 3460.5], [123.0, 1307.0], [122.0, 3546.0], [121.0, 3559.0], [120.0, 3548.0], [127.0, 1321.0], [126.0, 2438.0], [135.0, 3547.0], [133.0, 2999.25], [131.0, 1326.0], [129.0, 1885.0], [128.0, 1333.0], [142.0, 3529.3333333333335], [141.0, 3443.0], [137.0, 2435.0], [151.0, 3306.0], [146.0, 3499.3333333333335], [144.0, 3513.0], [199.0, 3358.0], [198.0, 3423.6666666666665], [197.0, 3482.0], [195.0, 3467.25], [194.0, 3486.0], [193.0, 3025.0], [192.0, 3319.0], [207.0, 3391.5], [205.0, 3472.0], [204.0, 3464.0], [203.0, 2442.6666666666665], [201.0, 3473.0], [200.0, 2785.0], [214.0, 3410.6666666666665], [213.0, 3465.0], [211.0, 3414.6666666666665], [210.0, 3462.0], [209.0, 3459.0], [208.0, 3102.5], [222.0, 3341.8333333333335], [221.0, 3469.0], [220.0, 3421.3333333333335], [217.0, 3459.0], [216.0, 3408.0], [231.0, 3375.3333333333335], [228.0, 3433.0], [226.0, 3287.0], [225.0, 3381.6666666666665], [239.0, 3406.0], [238.0, 3414.0], [237.0, 3367.0], [233.0, 3275.333333333333], [247.0, 3446.0], [245.0, 3376.5], [244.0, 3454.0], [243.0, 3451.0], [241.0, 3420.5], [253.0, 3181.6666666666665], [250.0, 3372.5], [248.0, 3410.6666666666665], [269.0, 3169.6666666666665], [266.0, 3394.6666666666665], [263.0, 3319.0], [262.0, 3259.0], [259.0, 3290.5], [257.0, 3303.0], [256.0, 3377.75], [287.0, 2300.3333333333335], [285.0, 3443.0], [280.0, 3418.1666666666665], [276.0, 3298.0], [275.0, 3396.5], [274.0, 2574.0], [273.0, 3301.0], [272.0, 3273.0], [303.0, 2673.0], [302.0, 1193.0], [301.0, 3417.5], [300.0, 3282.0], [297.0, 3180.75], [296.0, 3427.5], [293.0, 3429.75], [307.0, 3376.0], [318.0, 3322.0], [319.0, 3165.0], [317.0, 3235.5], [315.0, 3341.0], [314.0, 3212.6666666666665], [311.0, 3337.5], [309.0, 3364.0], [308.0, 3373.0], [306.0, 1167.0], [305.0, 3397.0], [304.0, 1190.0], [334.0, 777.4285714285714], [329.0, 459.0], [327.0, 449.0], [326.0, 451.0], [323.0, 260.0], [322.0, 275.0], [321.0, 308.0], [320.0, 3293.0], [347.0, 367.0], [345.0, 1134.6666666666667], [342.0, 254.33333333333334], [339.0, 2621.0], [367.0, 212.5], [365.0, 2653.5], [363.0, 2542.5], [361.0, 215.0], [360.0, 212.0], [359.0, 208.5], [357.0, 209.0], [356.0, 431.0], [355.0, 2390.0], [352.0, 2176.8], [381.0, 227.0], [383.0, 212.5], [380.0, 225.0], [379.0, 223.0], [378.0, 225.0], [377.0, 222.0], [374.0, 301.0], [372.0, 215.0], [371.0, 214.0], [370.0, 217.0], [369.0, 219.5], [399.0, 2486.0], [397.0, 2569.0], [395.0, 2566.0], [394.0, 2575.0], [393.0, 2595.0], [392.0, 2580.0], [391.0, 2573.0], [390.0, 1804.0], [387.0, 2238.5], [385.0, 212.0], [415.0, 2305.6666666666665], [412.0, 1679.6], [410.0, 2427.6666666666665], [408.0, 1727.142857142857], [405.0, 2027.6], [411.0, 2398.0], [413.0, 182.0], [409.0, 306.0], [407.0, 303.0], [401.0, 1431.5], [419.0, 1560.875], [424.0, 867.0], [430.0, 2174.0], [425.0, 2210.166666666667], [421.0, 194.5], [423.0, 236.66666666666666], [418.0, 2515.0], [416.0, 2272.75], [420.0, 1223.0], [427.0, 2428.0], [426.0, 2114.0], [429.0, 2407.0], [431.0, 958.3333333333334], [446.0, 2113.5], [440.0, 2309.5], [439.0, 2302.0], [435.0, 2346.0], [432.0, 2182.25], [434.0, 1717.0], [436.0, 1510.2], [463.0, 261.0], [462.0, 270.0], [461.0, 2115.2], [456.0, 2226.0], [454.0, 1927.0], [452.0, 2145.0], [451.0, 2206.0], [478.0, 2232.0], [476.0, 2118.0], [472.0, 217.0], [493.0, 2228.0], [492.0, 229.5], [491.0, 213.0], [490.0, 2201.5], [486.0, 2230.3333333333335], [483.0, 2223.0], [482.0, 2242.0], [480.0, 2233.0], [507.0, 2164.0], [504.0, 2231.0], [503.0, 2225.0], [502.0, 2196.6666666666665], [500.0, 2229.5], [498.0, 2217.0], [497.0, 245.0], [496.0, 1199.5], [543.0, 2158.0], [533.0, 217.4], [542.0, 2161.5], [540.0, 2160.25], [537.0, 2170.0], [536.0, 2165.0], [527.0, 207.0], [518.0, 2210.0], [512.0, 2214.0], [526.0, 210.0], [525.0, 198.0], [524.0, 179.0], [523.0, 171.0], [522.0, 175.0], [521.0, 1194.0], [534.0, 211.0], [532.0, 226.5], [531.0, 219.0], [530.0, 210.0], [528.0, 212.0], [551.0, 1999.4], [565.0, 1769.0], [562.0, 2107.0], [561.0, 1581.8571428571427], [558.0, 2124.333333333333], [556.0, 2122.0], [552.0, 2130.0], [550.0, 2147.0], [549.0, 2144.0], [548.0, 2151.0], [546.0, 2140.0], [545.0, 2150.0], [559.0, 2128.0], [700.0, 1533.0], [698.0, 682.875], [696.0, 1546.3333333333333], [684.0, 10.0], [695.0, 1473.5], [694.0, 1542.0], [699.0, 233.2], [697.0, 387.8571428571429], [701.0, 25.0], [690.0, 254.0], [692.0, 631.8461538461538], [691.0, 1422.386138613861], [722.0, 1338.0], [735.0, 1409.0], [732.0, 810.0], [729.0, 1544.0], [711.0, 772.0], [710.0, 1528.0], [709.0, 519.6666666666666], [706.0, 933.0], [704.0, 1214.6666666666667], [705.0, 21.0], [719.0, 1523.0], [718.0, 1463.0], [716.0, 16.333333333333332], [715.0, 1450.0], [714.0, 736.5], [713.0, 24.0], [712.0, 22.0], [727.0, 1354.2], [726.0, 1166.5], [725.0, 1518.0], [723.0, 1535.0], [721.0, 1451.0], [765.0, 1337.0], [766.0, 1519.0], [764.0, 1499.0], [763.0, 1461.0], [760.0, 1430.5], [742.0, 1516.5], [738.0, 1530.0], [736.0, 1344.25], [758.0, 1512.0], [756.0, 1514.0], [754.0, 1518.0], [751.0, 1506.0], [748.0, 1511.3333333333333], [746.0, 1506.0], [745.0, 1506.0], [744.0, 1517.0], [770.0, 1418.75], [771.0, 997.2], [776.0, 1138.75], [779.0, 1221.5], [780.0, 1240.6], [774.0, 1210.0], [777.0, 1415.5], [778.0, 1135.5], [773.0, 1416.0], [769.0, 1506.0], [768.0, 1349.0], [1.0, 3107.0]], "isOverall": false, "label": "Access Movies Page", "isController": false}, {"data": [[455.39199999999926, 1864.3179999999995]], "isOverall": false, "label": "Access Movies Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 780.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3850.0, "minX": 1.57232172E12, "maxY": 131352.96666666667, "series": [{"data": [[1.57232172E12, 131352.96666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57232172E12, 3850.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57232172E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1864.3179999999995, "minX": 1.57232172E12, "maxY": 1864.3179999999995, "series": [{"data": [[1.57232172E12, 1864.3179999999995]], "isOverall": false, "label": "Access Movies Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57232172E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1219.1259999999995, "minX": 1.57232172E12, "maxY": 1219.1259999999995, "series": [{"data": [[1.57232172E12, 1219.1259999999995]], "isOverall": false, "label": "Access Movies Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57232172E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 748.8569999999996, "minX": 1.57232172E12, "maxY": 748.8569999999996, "series": [{"data": [[1.57232172E12, 748.8569999999996]], "isOverall": false, "label": "Access Movies Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57232172E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.57232172E12, "maxY": 4434.0, "series": [{"data": [[1.57232172E12, 4434.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57232172E12, 10.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57232172E12, 3461.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57232172E12, 3706.6500000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57232172E12, 3546.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57232172E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1512.0, "minX": 4.0, "maxY": 4323.0, "series": [{"data": [[4.0, 3167.0], [307.0, 2145.0], [305.0, 3373.0], [11.0, 4323.0], [373.0, 1512.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 373.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1121.0, "minX": 4.0, "maxY": 3117.5, "series": [{"data": [[4.0, 3117.5], [307.0, 1189.0], [305.0, 1121.0], [11.0, 1182.0], [373.0, 1145.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 373.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57232172E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57232172E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57232172E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57232172E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57232172E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57232172E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57232172E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57232172E12, 16.666666666666668]], "isOverall": false, "label": "Access Movies Page-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57232172E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57232172E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57232172E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57232172E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

