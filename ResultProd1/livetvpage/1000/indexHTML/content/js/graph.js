/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 193.0, "minX": 0.0, "maxY": 4544.0, "series": [{"data": [[0.0, 193.0], [0.1, 202.0], [0.2, 203.0], [0.3, 203.0], [0.4, 210.0], [0.5, 211.0], [0.6, 214.0], [0.7, 216.0], [0.8, 223.0], [0.9, 228.0], [1.0, 231.0], [1.1, 232.0], [1.2, 233.0], [1.3, 235.0], [1.4, 235.0], [1.5, 242.0], [1.6, 247.0], [1.7, 249.0], [1.8, 249.0], [1.9, 250.0], [2.0, 251.0], [2.1, 252.0], [2.2, 254.0], [2.3, 256.0], [2.4, 256.0], [2.5, 257.0], [2.6, 257.0], [2.7, 261.0], [2.8, 261.0], [2.9, 262.0], [3.0, 262.0], [3.1, 266.0], [3.2, 267.0], [3.3, 268.0], [3.4, 270.0], [3.5, 270.0], [3.6, 275.0], [3.7, 275.0], [3.8, 276.0], [3.9, 276.0], [4.0, 277.0], [4.1, 278.0], [4.2, 279.0], [4.3, 280.0], [4.4, 281.0], [4.5, 281.0], [4.6, 281.0], [4.7, 281.0], [4.8, 282.0], [4.9, 282.0], [5.0, 282.0], [5.1, 283.0], [5.2, 283.0], [5.3, 283.0], [5.4, 285.0], [5.5, 285.0], [5.6, 285.0], [5.7, 286.0], [5.8, 286.0], [5.9, 286.0], [6.0, 286.0], [6.1, 286.0], [6.2, 287.0], [6.3, 287.0], [6.4, 288.0], [6.5, 288.0], [6.6, 288.0], [6.7, 289.0], [6.8, 289.0], [6.9, 290.0], [7.0, 290.0], [7.1, 290.0], [7.2, 291.0], [7.3, 291.0], [7.4, 292.0], [7.5, 293.0], [7.6, 294.0], [7.7, 294.0], [7.8, 295.0], [7.9, 295.0], [8.0, 295.0], [8.1, 295.0], [8.2, 296.0], [8.3, 296.0], [8.4, 296.0], [8.5, 296.0], [8.6, 297.0], [8.7, 298.0], [8.8, 298.0], [8.9, 299.0], [9.0, 299.0], [9.1, 299.0], [9.2, 299.0], [9.3, 299.0], [9.4, 300.0], [9.5, 300.0], [9.6, 300.0], [9.7, 300.0], [9.8, 301.0], [9.9, 302.0], [10.0, 302.0], [10.1, 302.0], [10.2, 302.0], [10.3, 302.0], [10.4, 302.0], [10.5, 304.0], [10.6, 305.0], [10.7, 306.0], [10.8, 306.0], [10.9, 306.0], [11.0, 306.0], [11.1, 307.0], [11.2, 307.0], [11.3, 308.0], [11.4, 308.0], [11.5, 309.0], [11.6, 309.0], [11.7, 309.0], [11.8, 309.0], [11.9, 310.0], [12.0, 310.0], [12.1, 311.0], [12.2, 311.0], [12.3, 311.0], [12.4, 311.0], [12.5, 312.0], [12.6, 313.0], [12.7, 314.0], [12.8, 314.0], [12.9, 314.0], [13.0, 314.0], [13.1, 314.0], [13.2, 315.0], [13.3, 315.0], [13.4, 316.0], [13.5, 317.0], [13.6, 317.0], [13.7, 318.0], [13.8, 318.0], [13.9, 319.0], [14.0, 319.0], [14.1, 319.0], [14.2, 319.0], [14.3, 319.0], [14.4, 319.0], [14.5, 319.0], [14.6, 319.0], [14.7, 320.0], [14.8, 320.0], [14.9, 320.0], [15.0, 320.0], [15.1, 322.0], [15.2, 322.0], [15.3, 323.0], [15.4, 324.0], [15.5, 324.0], [15.6, 325.0], [15.7, 325.0], [15.8, 326.0], [15.9, 326.0], [16.0, 326.0], [16.1, 327.0], [16.2, 327.0], [16.3, 327.0], [16.4, 328.0], [16.5, 328.0], [16.6, 329.0], [16.7, 330.0], [16.8, 331.0], [16.9, 333.0], [17.0, 333.0], [17.1, 335.0], [17.2, 335.0], [17.3, 335.0], [17.4, 336.0], [17.5, 338.0], [17.6, 338.0], [17.7, 339.0], [17.8, 340.0], [17.9, 342.0], [18.0, 349.0], [18.1, 353.0], [18.2, 353.0], [18.3, 354.0], [18.4, 355.0], [18.5, 355.0], [18.6, 356.0], [18.7, 357.0], [18.8, 358.0], [18.9, 358.0], [19.0, 358.0], [19.1, 359.0], [19.2, 359.0], [19.3, 360.0], [19.4, 361.0], [19.5, 361.0], [19.6, 362.0], [19.7, 363.0], [19.8, 364.0], [19.9, 365.0], [20.0, 365.0], [20.1, 366.0], [20.2, 368.0], [20.3, 368.0], [20.4, 368.0], [20.5, 369.0], [20.6, 370.0], [20.7, 370.0], [20.8, 371.0], [20.9, 372.0], [21.0, 373.0], [21.1, 373.0], [21.2, 374.0], [21.3, 375.0], [21.4, 375.0], [21.5, 375.0], [21.6, 376.0], [21.7, 376.0], [21.8, 376.0], [21.9, 378.0], [22.0, 379.0], [22.1, 381.0], [22.2, 385.0], [22.3, 387.0], [22.4, 388.0], [22.5, 388.0], [22.6, 390.0], [22.7, 392.0], [22.8, 394.0], [22.9, 394.0], [23.0, 395.0], [23.1, 396.0], [23.2, 398.0], [23.3, 399.0], [23.4, 409.0], [23.5, 413.0], [23.6, 413.0], [23.7, 413.0], [23.8, 415.0], [23.9, 418.0], [24.0, 418.0], [24.1, 418.0], [24.2, 419.0], [24.3, 420.0], [24.4, 420.0], [24.5, 421.0], [24.6, 421.0], [24.7, 422.0], [24.8, 422.0], [24.9, 423.0], [25.0, 423.0], [25.1, 423.0], [25.2, 423.0], [25.3, 423.0], [25.4, 423.0], [25.5, 423.0], [25.6, 423.0], [25.7, 423.0], [25.8, 424.0], [25.9, 424.0], [26.0, 424.0], [26.1, 424.0], [26.2, 426.0], [26.3, 426.0], [26.4, 428.0], [26.5, 433.0], [26.6, 433.0], [26.7, 433.0], [26.8, 434.0], [26.9, 434.0], [27.0, 435.0], [27.1, 435.0], [27.2, 435.0], [27.3, 438.0], [27.4, 438.0], [27.5, 439.0], [27.6, 440.0], [27.7, 441.0], [27.8, 441.0], [27.9, 441.0], [28.0, 443.0], [28.1, 443.0], [28.2, 443.0], [28.3, 443.0], [28.4, 445.0], [28.5, 445.0], [28.6, 445.0], [28.7, 445.0], [28.8, 446.0], [28.9, 446.0], [29.0, 446.0], [29.1, 446.0], [29.2, 447.0], [29.3, 448.0], [29.4, 449.0], [29.5, 449.0], [29.6, 449.0], [29.7, 450.0], [29.8, 450.0], [29.9, 450.0], [30.0, 451.0], [30.1, 451.0], [30.2, 452.0], [30.3, 452.0], [30.4, 452.0], [30.5, 453.0], [30.6, 453.0], [30.7, 454.0], [30.8, 455.0], [30.9, 455.0], [31.0, 455.0], [31.1, 456.0], [31.2, 457.0], [31.3, 457.0], [31.4, 457.0], [31.5, 457.0], [31.6, 458.0], [31.7, 458.0], [31.8, 458.0], [31.9, 458.0], [32.0, 459.0], [32.1, 459.0], [32.2, 460.0], [32.3, 460.0], [32.4, 462.0], [32.5, 462.0], [32.6, 464.0], [32.7, 465.0], [32.8, 465.0], [32.9, 470.0], [33.0, 474.0], [33.1, 476.0], [33.2, 483.0], [33.3, 484.0], [33.4, 485.0], [33.5, 485.0], [33.6, 487.0], [33.7, 489.0], [33.8, 489.0], [33.9, 489.0], [34.0, 491.0], [34.1, 491.0], [34.2, 492.0], [34.3, 492.0], [34.4, 496.0], [34.5, 497.0], [34.6, 498.0], [34.7, 498.0], [34.8, 498.0], [34.9, 499.0], [35.0, 500.0], [35.1, 500.0], [35.2, 502.0], [35.3, 502.0], [35.4, 504.0], [35.5, 506.0], [35.6, 508.0], [35.7, 509.0], [35.8, 512.0], [35.9, 519.0], [36.0, 519.0], [36.1, 520.0], [36.2, 520.0], [36.3, 523.0], [36.4, 529.0], [36.5, 530.0], [36.6, 541.0], [36.7, 543.0], [36.8, 544.0], [36.9, 544.0], [37.0, 546.0], [37.1, 546.0], [37.2, 547.0], [37.3, 547.0], [37.4, 549.0], [37.5, 552.0], [37.6, 553.0], [37.7, 555.0], [37.8, 558.0], [37.9, 560.0], [38.0, 567.0], [38.1, 568.0], [38.2, 571.0], [38.3, 571.0], [38.4, 576.0], [38.5, 579.0], [38.6, 579.0], [38.7, 580.0], [38.8, 581.0], [38.9, 584.0], [39.0, 585.0], [39.1, 591.0], [39.2, 591.0], [39.3, 591.0], [39.4, 592.0], [39.5, 593.0], [39.6, 593.0], [39.7, 595.0], [39.8, 596.0], [39.9, 597.0], [40.0, 597.0], [40.1, 598.0], [40.2, 598.0], [40.3, 599.0], [40.4, 600.0], [40.5, 601.0], [40.6, 602.0], [40.7, 602.0], [40.8, 602.0], [40.9, 603.0], [41.0, 603.0], [41.1, 604.0], [41.2, 605.0], [41.3, 605.0], [41.4, 607.0], [41.5, 610.0], [41.6, 610.0], [41.7, 614.0], [41.8, 614.0], [41.9, 615.0], [42.0, 617.0], [42.1, 618.0], [42.2, 618.0], [42.3, 619.0], [42.4, 622.0], [42.5, 622.0], [42.6, 622.0], [42.7, 624.0], [42.8, 625.0], [42.9, 625.0], [43.0, 625.0], [43.1, 626.0], [43.2, 626.0], [43.3, 627.0], [43.4, 627.0], [43.5, 632.0], [43.6, 633.0], [43.7, 634.0], [43.8, 636.0], [43.9, 636.0], [44.0, 637.0], [44.1, 638.0], [44.2, 638.0], [44.3, 642.0], [44.4, 643.0], [44.5, 645.0], [44.6, 649.0], [44.7, 650.0], [44.8, 651.0], [44.9, 662.0], [45.0, 663.0], [45.1, 663.0], [45.2, 665.0], [45.3, 670.0], [45.4, 673.0], [45.5, 681.0], [45.6, 689.0], [45.7, 691.0], [45.8, 718.0], [45.9, 718.0], [46.0, 721.0], [46.1, 723.0], [46.2, 724.0], [46.3, 725.0], [46.4, 729.0], [46.5, 731.0], [46.6, 732.0], [46.7, 733.0], [46.8, 734.0], [46.9, 734.0], [47.0, 738.0], [47.1, 739.0], [47.2, 739.0], [47.3, 739.0], [47.4, 740.0], [47.5, 741.0], [47.6, 748.0], [47.7, 749.0], [47.8, 750.0], [47.9, 750.0], [48.0, 752.0], [48.1, 752.0], [48.2, 753.0], [48.3, 754.0], [48.4, 754.0], [48.5, 757.0], [48.6, 757.0], [48.7, 758.0], [48.8, 758.0], [48.9, 759.0], [49.0, 759.0], [49.1, 766.0], [49.2, 771.0], [49.3, 775.0], [49.4, 780.0], [49.5, 781.0], [49.6, 781.0], [49.7, 783.0], [49.8, 790.0], [49.9, 793.0], [50.0, 795.0], [50.1, 795.0], [50.2, 797.0], [50.3, 800.0], [50.4, 800.0], [50.5, 801.0], [50.6, 801.0], [50.7, 802.0], [50.8, 805.0], [50.9, 813.0], [51.0, 814.0], [51.1, 822.0], [51.2, 822.0], [51.3, 823.0], [51.4, 824.0], [51.5, 868.0], [51.6, 872.0], [51.7, 873.0], [51.8, 876.0], [51.9, 878.0], [52.0, 880.0], [52.1, 884.0], [52.2, 894.0], [52.3, 897.0], [52.4, 898.0], [52.5, 901.0], [52.6, 902.0], [52.7, 909.0], [52.8, 914.0], [52.9, 920.0], [53.0, 933.0], [53.1, 933.0], [53.2, 934.0], [53.3, 938.0], [53.4, 944.0], [53.5, 944.0], [53.6, 1003.0], [53.7, 1007.0], [53.8, 1009.0], [53.9, 1027.0], [54.0, 1086.0], [54.1, 1107.0], [54.2, 1140.0], [54.3, 1142.0], [54.4, 1146.0], [54.5, 1147.0], [54.6, 1150.0], [54.7, 1151.0], [54.8, 1151.0], [54.9, 1154.0], [55.0, 1157.0], [55.1, 1159.0], [55.2, 1169.0], [55.3, 1170.0], [55.4, 1171.0], [55.5, 1172.0], [55.6, 1174.0], [55.7, 1177.0], [55.8, 1179.0], [55.9, 1190.0], [56.0, 1194.0], [56.1, 1195.0], [56.2, 1200.0], [56.3, 1201.0], [56.4, 1201.0], [56.5, 1203.0], [56.6, 1203.0], [56.7, 1204.0], [56.8, 1205.0], [56.9, 1205.0], [57.0, 1213.0], [57.1, 1217.0], [57.2, 1219.0], [57.3, 1220.0], [57.4, 1220.0], [57.5, 1224.0], [57.6, 1226.0], [57.7, 1226.0], [57.8, 1227.0], [57.9, 1228.0], [58.0, 1229.0], [58.1, 1230.0], [58.2, 1230.0], [58.3, 1230.0], [58.4, 1231.0], [58.5, 1231.0], [58.6, 1231.0], [58.7, 1233.0], [58.8, 1234.0], [58.9, 1237.0], [59.0, 1238.0], [59.1, 1239.0], [59.2, 1239.0], [59.3, 1240.0], [59.4, 1241.0], [59.5, 1244.0], [59.6, 1244.0], [59.7, 1249.0], [59.8, 1249.0], [59.9, 1250.0], [60.0, 1250.0], [60.1, 1250.0], [60.2, 1250.0], [60.3, 1251.0], [60.4, 1252.0], [60.5, 1253.0], [60.6, 1253.0], [60.7, 1253.0], [60.8, 1253.0], [60.9, 1254.0], [61.0, 1254.0], [61.1, 1254.0], [61.2, 1254.0], [61.3, 1255.0], [61.4, 1256.0], [61.5, 1256.0], [61.6, 1256.0], [61.7, 1257.0], [61.8, 1257.0], [61.9, 1257.0], [62.0, 1258.0], [62.1, 1259.0], [62.2, 1259.0], [62.3, 1259.0], [62.4, 1261.0], [62.5, 1261.0], [62.6, 1263.0], [62.7, 1264.0], [62.8, 1268.0], [62.9, 1270.0], [63.0, 1273.0], [63.1, 1283.0], [63.2, 1283.0], [63.3, 1283.0], [63.4, 1287.0], [63.5, 1289.0], [63.6, 1291.0], [63.7, 1291.0], [63.8, 1291.0], [63.9, 1292.0], [64.0, 1296.0], [64.1, 1302.0], [64.2, 1303.0], [64.3, 1303.0], [64.4, 1303.0], [64.5, 1305.0], [64.6, 1305.0], [64.7, 1306.0], [64.8, 1307.0], [64.9, 1308.0], [65.0, 1308.0], [65.1, 1308.0], [65.2, 1309.0], [65.3, 1310.0], [65.4, 1310.0], [65.5, 1310.0], [65.6, 1311.0], [65.7, 1312.0], [65.8, 1312.0], [65.9, 1313.0], [66.0, 1313.0], [66.1, 1314.0], [66.2, 1314.0], [66.3, 1315.0], [66.4, 1315.0], [66.5, 1315.0], [66.6, 1318.0], [66.7, 1319.0], [66.8, 1319.0], [66.9, 1325.0], [67.0, 1327.0], [67.1, 1328.0], [67.2, 1328.0], [67.3, 1329.0], [67.4, 1329.0], [67.5, 1330.0], [67.6, 1331.0], [67.7, 1332.0], [67.8, 1334.0], [67.9, 1334.0], [68.0, 1342.0], [68.1, 1343.0], [68.2, 1343.0], [68.3, 1343.0], [68.4, 1344.0], [68.5, 1349.0], [68.6, 1350.0], [68.7, 1351.0], [68.8, 1352.0], [68.9, 1352.0], [69.0, 1352.0], [69.1, 1353.0], [69.2, 1354.0], [69.3, 1355.0], [69.4, 1357.0], [69.5, 1357.0], [69.6, 1357.0], [69.7, 1358.0], [69.8, 1359.0], [69.9, 1360.0], [70.0, 1361.0], [70.1, 1362.0], [70.2, 1364.0], [70.3, 1364.0], [70.4, 1365.0], [70.5, 1365.0], [70.6, 1366.0], [70.7, 1366.0], [70.8, 1367.0], [70.9, 1370.0], [71.0, 1371.0], [71.1, 1372.0], [71.2, 1378.0], [71.3, 1379.0], [71.4, 1382.0], [71.5, 1384.0], [71.6, 1385.0], [71.7, 1388.0], [71.8, 1393.0], [71.9, 1412.0], [72.0, 1416.0], [72.1, 1417.0], [72.2, 1422.0], [72.3, 1426.0], [72.4, 1427.0], [72.5, 1427.0], [72.6, 1432.0], [72.7, 1433.0], [72.8, 1436.0], [72.9, 1438.0], [73.0, 1441.0], [73.1, 1443.0], [73.2, 1448.0], [73.3, 1458.0], [73.4, 1470.0], [73.5, 1478.0], [73.6, 1484.0], [73.7, 1488.0], [73.8, 1503.0], [73.9, 1509.0], [74.0, 1511.0], [74.1, 1513.0], [74.2, 1519.0], [74.3, 1531.0], [74.4, 1531.0], [74.5, 1537.0], [74.6, 1539.0], [74.7, 1541.0], [74.8, 1541.0], [74.9, 1543.0], [75.0, 1543.0], [75.1, 1543.0], [75.2, 1544.0], [75.3, 1545.0], [75.4, 1545.0], [75.5, 1545.0], [75.6, 1547.0], [75.7, 1549.0], [75.8, 1550.0], [75.9, 1552.0], [76.0, 1555.0], [76.1, 1555.0], [76.2, 1556.0], [76.3, 1560.0], [76.4, 1563.0], [76.5, 1567.0], [76.6, 1568.0], [76.7, 1569.0], [76.8, 1575.0], [76.9, 1579.0], [77.0, 1612.0], [77.1, 1662.0], [77.2, 1677.0], [77.3, 1679.0], [77.4, 1684.0], [77.5, 1686.0], [77.6, 1701.0], [77.7, 1703.0], [77.8, 1705.0], [77.9, 1708.0], [78.0, 1712.0], [78.1, 1713.0], [78.2, 1714.0], [78.3, 1715.0], [78.4, 1723.0], [78.5, 1723.0], [78.6, 1724.0], [78.7, 1726.0], [78.8, 1729.0], [78.9, 1730.0], [79.0, 1731.0], [79.1, 1732.0], [79.2, 1733.0], [79.3, 1736.0], [79.4, 1737.0], [79.5, 1738.0], [79.6, 1740.0], [79.7, 1741.0], [79.8, 1742.0], [79.9, 1743.0], [80.0, 1743.0], [80.1, 1745.0], [80.2, 1748.0], [80.3, 1748.0], [80.4, 1758.0], [80.5, 1759.0], [80.6, 1761.0], [80.7, 1763.0], [80.8, 1764.0], [80.9, 1767.0], [81.0, 1769.0], [81.1, 1769.0], [81.2, 1771.0], [81.3, 1771.0], [81.4, 1773.0], [81.5, 1788.0], [81.6, 1788.0], [81.7, 1789.0], [81.8, 1790.0], [81.9, 1795.0], [82.0, 1795.0], [82.1, 1796.0], [82.2, 1796.0], [82.3, 1796.0], [82.4, 1797.0], [82.5, 1800.0], [82.6, 1801.0], [82.7, 1805.0], [82.8, 1806.0], [82.9, 1810.0], [83.0, 1810.0], [83.1, 1812.0], [83.2, 1812.0], [83.3, 1817.0], [83.4, 1820.0], [83.5, 1821.0], [83.6, 1821.0], [83.7, 1826.0], [83.8, 1829.0], [83.9, 1834.0], [84.0, 1836.0], [84.1, 1839.0], [84.2, 1840.0], [84.3, 1841.0], [84.4, 1842.0], [84.5, 1844.0], [84.6, 1845.0], [84.7, 1845.0], [84.8, 1849.0], [84.9, 1853.0], [85.0, 1854.0], [85.1, 1854.0], [85.2, 1855.0], [85.3, 1861.0], [85.4, 1863.0], [85.5, 1863.0], [85.6, 1863.0], [85.7, 1863.0], [85.8, 1863.0], [85.9, 1864.0], [86.0, 1864.0], [86.1, 1865.0], [86.2, 1865.0], [86.3, 1865.0], [86.4, 1866.0], [86.5, 1867.0], [86.6, 1869.0], [86.7, 1876.0], [86.8, 1880.0], [86.9, 1883.0], [87.0, 1884.0], [87.1, 1890.0], [87.2, 1890.0], [87.3, 1891.0], [87.4, 1893.0], [87.5, 1894.0], [87.6, 1897.0], [87.7, 1899.0], [87.8, 1900.0], [87.9, 1900.0], [88.0, 1901.0], [88.1, 1902.0], [88.2, 1902.0], [88.3, 1905.0], [88.4, 1905.0], [88.5, 1907.0], [88.6, 1910.0], [88.7, 1918.0], [88.8, 1919.0], [88.9, 1921.0], [89.0, 1923.0], [89.1, 1923.0], [89.2, 1926.0], [89.3, 1927.0], [89.4, 1957.0], [89.5, 1963.0], [89.6, 1968.0], [89.7, 1979.0], [89.8, 1991.0], [89.9, 1993.0], [90.0, 1994.0], [90.1, 2000.0], [90.2, 2000.0], [90.3, 2251.0], [90.4, 2259.0], [90.5, 2305.0], [90.6, 2380.0], [90.7, 2428.0], [90.8, 2579.0], [90.9, 2641.0], [91.0, 2641.0], [91.1, 2644.0], [91.2, 3016.0], [91.3, 3018.0], [91.4, 3018.0], [91.5, 3019.0], [91.6, 3020.0], [91.7, 3020.0], [91.8, 3021.0], [91.9, 3022.0], [92.0, 3022.0], [92.1, 3023.0], [92.2, 3024.0], [92.3, 3027.0], [92.4, 3032.0], [92.5, 3033.0], [92.6, 3035.0], [92.7, 3035.0], [92.8, 3036.0], [92.9, 3037.0], [93.0, 3037.0], [93.1, 3038.0], [93.2, 3039.0], [93.3, 3039.0], [93.4, 3040.0], [93.5, 3041.0], [93.6, 3041.0], [93.7, 3043.0], [93.8, 3043.0], [93.9, 3045.0], [94.0, 3046.0], [94.1, 3046.0], [94.2, 3048.0], [94.3, 3048.0], [94.4, 3060.0], [94.5, 3060.0], [94.6, 3061.0], [94.7, 3061.0], [94.8, 3062.0], [94.9, 3063.0], [95.0, 3063.0], [95.1, 3064.0], [95.2, 3065.0], [95.3, 3066.0], [95.4, 3066.0], [95.5, 3066.0], [95.6, 3070.0], [95.7, 3075.0], [95.8, 3075.0], [95.9, 3076.0], [96.0, 3076.0], [96.1, 3077.0], [96.2, 3077.0], [96.3, 3078.0], [96.4, 3078.0], [96.5, 3081.0], [96.6, 3082.0], [96.7, 3082.0], [96.8, 3084.0], [96.9, 3086.0], [97.0, 3087.0], [97.1, 3087.0], [97.2, 3089.0], [97.3, 3092.0], [97.4, 3099.0], [97.5, 3109.0], [97.6, 3110.0], [97.7, 3121.0], [97.8, 3122.0], [97.9, 3129.0], [98.0, 3131.0], [98.1, 3136.0], [98.2, 3143.0], [98.3, 3143.0], [98.4, 3144.0], [98.5, 3147.0], [98.6, 3372.0], [98.7, 3373.0], [98.8, 3430.0], [98.9, 3433.0], [99.0, 3433.0], [99.1, 3435.0], [99.2, 3439.0], [99.3, 3445.0], [99.4, 3446.0], [99.5, 3446.0], [99.6, 3594.0], [99.7, 3695.0], [99.8, 3710.0], [99.9, 4544.0]], "isOverall": false, "label": "Access Live TV Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 139.0, "series": [{"data": [[600.0, 54.0], [700.0, 45.0], [800.0, 22.0], [900.0, 11.0], [1000.0, 5.0], [1100.0, 21.0], [1200.0, 79.0], [1300.0, 78.0], [1400.0, 19.0], [1500.0, 33.0], [100.0, 1.0], [1600.0, 6.0], [1700.0, 49.0], [1800.0, 53.0], [1900.0, 23.0], [2000.0, 2.0], [2200.0, 2.0], [2300.0, 2.0], [2400.0, 1.0], [2500.0, 1.0], [2600.0, 3.0], [3000.0, 63.0], [3100.0, 11.0], [200.0, 93.0], [3300.0, 2.0], [3400.0, 8.0], [3500.0, 1.0], [3600.0, 1.0], [3700.0, 1.0], [4500.0, 1.0], [300.0, 139.0], [400.0, 116.0], [500.0, 54.0]], "isOverall": false, "label": "Access Live TV Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 263.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 386.0, "series": [{"data": [[0.0, 351.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 386.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 263.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 358.44400000000024, "minX": 1.57232328E12, "maxY": 358.44400000000024, "series": [{"data": [[1.57232328E12, 358.44400000000024]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57232328E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 193.0, "minX": 1.0, "maxY": 4544.0, "series": [{"data": [[2.0, 3075.0], [3.0, 3070.0], [4.0, 3039.0], [5.0, 3033.0], [8.0, 3036.0], [9.0, 3043.0], [11.0, 3045.5], [12.0, 3060.0], [14.0, 3063.5], [16.0, 3061.0], [17.0, 3046.0], [19.0, 3044.5], [21.0, 3063.5], [22.0, 3065.0], [23.0, 3023.0], [24.0, 3035.0], [26.0, 3021.5], [27.0, 3019.0], [28.0, 3020.0], [30.0, 3017.0], [31.0, 3018.0], [33.0, 3086.0], [32.0, 3020.0], [37.0, 3089.0], [36.0, 3105.3333333333335], [39.0, 3106.5], [41.0, 3099.0], [42.0, 3145.5], [45.0, 3129.0], [44.0, 3143.0], [47.0, 3133.5], [48.0, 3075.0], [50.0, 3072.0], [53.0, 3109.0], [52.0, 3087.0], [55.0, 3076.0], [57.0, 3022.0], [56.0, 3027.0], [59.0, 3710.0], [58.0, 3024.0], [61.0, 3594.0], [60.0, 3695.0], [63.0, 3046.0], [62.0, 3045.0], [67.0, 3080.0], [65.0, 3062.0], [71.0, 3077.0], [69.0, 3081.5], [74.0, 3036.0], [73.0, 3372.0], [72.0, 3066.0], [79.0, 3040.5], [77.0, 3036.6666666666665], [82.0, 3445.5], [80.0, 3439.0], [86.0, 3435.0], [84.0, 3438.0], [91.0, 1552.0], [90.0, 1543.0], [89.0, 1511.0], [88.0, 3413.0], [94.0, 1291.0], [93.0, 2644.0], [92.0, 2579.0], [97.0, 1350.5], [96.0, 1291.0], [103.0, 1261.0], [102.0, 1264.0], [101.0, 1365.0], [100.0, 1255.6666666666667], [106.0, 1253.0], [111.0, 1287.0], [110.0, 1259.0], [108.0, 1270.0], [112.0, 1426.0], [118.0, 1251.0], [117.0, 1358.6], [123.0, 2641.0], [122.0, 2534.5], [120.0, 1256.0], [127.0, 1231.0], [126.0, 1315.0], [125.0, 1310.0], [124.0, 1314.0], [134.0, 1545.0], [133.0, 1541.0], [132.0, 1227.0], [131.0, 1271.5], [129.0, 1229.0], [128.0, 1233.0], [143.0, 1416.0], [142.0, 1334.0], [141.0, 1531.0], [140.0, 1543.0], [139.0, 1230.0], [138.0, 1451.5], [136.0, 1319.5], [151.0, 1563.0], [150.0, 1411.6666666666667], [147.0, 1371.0], [146.0, 1448.0], [145.0, 1238.0], [158.0, 1244.0], [157.0, 1259.0], [155.0, 1249.0], [154.0, 1886.5], [152.0, 1388.0], [167.0, 1313.5], [165.0, 1365.0], [164.0, 1250.0], [163.0, 1241.0], [162.0, 1253.25], [175.0, 1256.0], [174.0, 1253.0], [173.0, 1310.0], [172.0, 1303.0], [171.0, 1226.0], [170.0, 1342.5], [168.0, 1230.0], [183.0, 1781.0], [181.0, 1311.0], [180.0, 1239.0], [179.0, 1231.0], [178.0, 2305.0], [177.0, 1328.0], [190.0, 1420.5], [188.0, 1231.0], [187.0, 1304.3333333333333], [184.0, 2251.0], [199.0, 1492.0], [197.0, 1205.0], [196.0, 1219.0], [195.0, 1217.0], [194.0, 1289.0], [193.0, 1304.0], [192.0, 1309.0], [207.0, 1384.0], [206.0, 1198.0], [204.0, 1203.0], [203.0, 1230.0], [202.0, 1224.0], [201.0, 1329.5], [215.0, 1205.0], [214.0, 1204.0], [213.0, 1304.0], [210.0, 1383.5], [208.0, 1200.0], [223.0, 1543.0], [222.0, 1194.0], [221.0, 1470.0], [220.0, 1378.0], [219.0, 1364.0], [218.0, 1362.0], [217.0, 1385.0], [216.0, 1382.0], [230.0, 1366.0], [229.0, 1362.6666666666667], [226.0, 1344.0], [225.0, 1196.5], [239.0, 1274.6666666666667], [236.0, 1257.0], [235.0, 1318.5], [234.0, 1357.0], [246.0, 610.0], [245.0, 1236.0], [243.0, 1250.5], [241.0, 1301.5], [255.0, 1707.5], [253.0, 1379.0], [252.0, 1997.0], [250.0, 1814.25], [264.0, 1963.0], [268.0, 1213.0], [267.0, 1343.0], [266.0, 1283.0], [265.0, 1441.0], [263.0, 1962.5], [261.0, 1414.5], [259.0, 1425.3333333333333], [257.0, 1432.0], [284.0, 1324.25], [280.0, 1314.0], [278.0, 1322.0], [276.0, 1807.6666666666667], [275.0, 1237.0], [301.0, 1902.6666666666667], [300.0, 1901.3333333333333], [297.0, 1902.5], [296.0, 1624.5], [294.0, 1910.0], [292.0, 1893.0], [291.0, 1902.0], [290.0, 1334.0], [317.0, 1869.0], [316.0, 1713.0], [315.0, 1441.0], [313.0, 1698.6666666666667], [310.0, 1876.0], [311.0, 1890.0], [308.0, 1458.0], [305.0, 1880.75], [333.0, 1013.0], [331.0, 462.0], [330.0, 1717.5], [325.0, 1580.3333333333333], [323.0, 1645.5], [322.0, 1864.0], [320.0, 1852.5], [351.0, 567.5], [350.0, 1613.5], [349.0, 1854.0], [348.0, 1854.0], [343.0, 1849.5], [341.0, 1857.0], [340.0, 1863.0], [337.0, 1864.0], [354.0, 544.3333333333334], [366.0, 1519.25], [367.0, 355.0], [364.0, 1365.3333333333333], [355.0, 857.5], [358.0, 626.0], [356.0, 1829.0], [353.0, 879.5], [352.0, 1552.0], [361.0, 1821.0], [360.0, 1826.0], [359.0, 1612.3333333333333], [370.0, 1167.7142857142856], [374.0, 619.0], [373.0, 629.0], [372.0, 1414.6666666666667], [371.0, 555.0], [369.0, 520.0], [375.0, 1795.6666666666667], [382.0, 1787.0], [380.0, 1766.3333333333333], [377.0, 1795.5], [387.0, 722.6666666666666], [391.0, 723.0], [386.0, 413.0], [385.0, 859.0], [390.0, 1052.6666666666667], [389.0, 1134.5714285714284], [395.0, 737.3333333333334], [394.0, 750.0], [393.0, 748.5], [392.0, 739.0], [399.0, 818.25], [398.0, 1764.5], [396.0, 1722.8333333333333], [413.0, 1020.2], [415.0, 624.2857142857143], [414.0, 594.1875000000001], [410.0, 717.75], [412.0, 574.0], [409.0, 566.3333333333334], [406.0, 898.0], [404.0, 742.3333333333334], [405.0, 1115.0], [403.0, 532.8571428571429], [400.0, 675.3333333333333], [407.0, 740.3333333333334], [401.0, 860.1818181818182], [418.0, 520.8749999999999], [426.0, 434.42857142857144], [421.0, 605.2083333333334], [420.0, 977.1666666666666], [422.0, 474.0], [416.0, 588.6], [417.0, 1093.6], [427.0, 498.0], [424.0, 474.59999999999997], [425.0, 920.4166666666667], [423.0, 605.8125000000001], [419.0, 542.875], [428.0, 1022.8], [431.0, 1723.0], [430.0, 1567.0], [447.0, 754.0], [445.0, 336.0], [434.0, 1569.0], [442.0, 458.0], [441.0, 232.0], [440.0, 281.0], [438.0, 284.6666666666667], [439.0, 1473.5], [443.0, 1388.25], [437.0, 1602.0], [451.0, 1106.6], [462.0, 674.5], [460.0, 478.235294117647], [459.0, 919.875], [458.0, 1002.75], [456.0, 393.7142857142857], [463.0, 984.6666666666667], [455.0, 338.0], [453.0, 1247.3333333333333], [454.0, 338.0], [450.0, 426.0], [449.0, 453.0], [448.0, 904.5], [466.0, 817.75], [472.0, 325.1111111111111], [471.0, 623.75], [476.0, 338.7857142857142], [474.0, 359.75], [473.0, 193.0], [470.0, 460.5], [468.0, 306.5], [469.0, 582.0], [467.0, 346.0], [465.0, 249.33333333333334], [477.0, 371.0], [478.0, 285.0], [479.0, 286.0], [480.0, 353.0], [484.0, 370.4], [485.0, 399.0], [483.0, 311.0], [482.0, 285.0], [481.0, 286.0], [491.0, 270.25], [488.0, 524.5], [494.0, 312.5], [492.0, 378.0], [489.0, 500.0], [487.0, 489.0], [486.0, 593.0], [510.0, 560.6], [503.0, 451.0], [504.0, 279.0], [511.0, 311.0], [502.0, 247.0], [501.0, 405.5], [509.0, 888.0], [508.0, 288.0], [506.0, 293.0], [507.0, 477.5], [505.0, 289.6666666666667], [497.0, 283.0], [496.0, 886.0], [499.0, 309.0], [498.0, 318.0], [516.0, 542.0909090909091], [530.0, 345.24999999999994], [531.0, 300.5], [535.0, 418.0], [532.0, 463.5], [528.0, 474.875], [524.0, 776.2307692307692], [512.0, 1177.0], [527.0, 295.0], [526.0, 405.0], [523.0, 374.5], [522.0, 784.3333333333334], [520.0, 720.25], [521.0, 297.5], [518.0, 330.8], [517.0, 302.5], [519.0, 391.28571428571433], [537.0, 324.0], [536.0, 422.6666666666667], [541.0, 324.0], [542.0, 770.6666666666666], [514.0, 1147.0], [515.0, 305.0], [513.0, 792.5], [550.0, 538.0], [546.0, 663.0], [551.0, 783.0], [552.0, 401.25], [556.0, 311.25], [545.0, 584.8], [549.0, 350.0], [574.0, 459.71428571428567], [567.0, 701.0], [565.0, 360.5], [563.0, 378.5], [562.0, 410.75], [560.0, 318.0], [578.0, 364.0], [590.0, 371.0], [587.0, 383.5], [586.0, 375.0], [585.0, 434.0], [582.0, 366.6666666666667], [580.0, 357.0], [579.0, 358.0], [576.0, 396.5], [1.0, 4544.0]], "isOverall": false, "label": "Access Live TV Page", "isController": false}, {"data": [[358.44299999999976, 1102.881999999999]], "isOverall": false, "label": "Access Live TV Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 590.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3816.6666666666665, "minX": 1.57232328E12, "maxY": 131111.86666666667, "series": [{"data": [[1.57232328E12, 131111.86666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57232328E12, 3816.6666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57232328E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1102.881999999999, "minX": 1.57232328E12, "maxY": 1102.881999999999, "series": [{"data": [[1.57232328E12, 1102.881999999999]], "isOverall": false, "label": "Access Live TV Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57232328E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 713.2599999999996, "minX": 1.57232328E12, "maxY": 713.2599999999996, "series": [{"data": [[1.57232328E12, 713.2599999999996]], "isOverall": false, "label": "Access Live TV Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57232328E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 468.32500000000016, "minX": 1.57232328E12, "maxY": 468.32500000000016, "series": [{"data": [[1.57232328E12, 468.32500000000016]], "isOverall": false, "label": "Access Live TV Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57232328E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 193.0, "minX": 1.57232328E12, "maxY": 4544.0, "series": [{"data": [[1.57232328E12, 4544.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57232328E12, 193.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57232328E12, 1993.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57232328E12, 3433.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57232328E12, 3063.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57232328E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 467.5, "minX": 22.0, "maxY": 3081.5, "series": [{"data": [[66.0, 3081.5], [346.0, 467.5], [22.0, 3054.0], [439.0, 1226.0], [127.0, 1307.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 439.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 223.0, "minX": 22.0, "maxY": 3062.0, "series": [{"data": [[66.0, 3062.0], [346.0, 383.0], [22.0, 3029.0], [439.0, 286.0], [127.0, 223.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 439.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57232328E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57232328E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57232328E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57232328E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57232328E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57232328E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57232328E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57232328E12, 16.666666666666668]], "isOverall": false, "label": "Access Live TV Page-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57232328E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57232328E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57232328E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57232328E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

