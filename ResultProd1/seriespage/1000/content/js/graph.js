/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 260.0, "minX": 0.0, "maxY": 4461.0, "series": [{"data": [[0.0, 260.0], [0.1, 262.0], [0.2, 264.0], [0.3, 264.0], [0.4, 265.0], [0.5, 265.0], [0.6, 265.0], [0.7, 266.0], [0.8, 267.0], [0.9, 268.0], [1.0, 270.0], [1.1, 271.0], [1.2, 271.0], [1.3, 274.0], [1.4, 275.0], [1.5, 280.0], [1.6, 280.0], [1.7, 282.0], [1.8, 283.0], [1.9, 283.0], [2.0, 284.0], [2.1, 284.0], [2.2, 285.0], [2.3, 285.0], [2.4, 286.0], [2.5, 286.0], [2.6, 287.0], [2.7, 288.0], [2.8, 289.0], [2.9, 289.0], [3.0, 289.0], [3.1, 290.0], [3.2, 290.0], [3.3, 290.0], [3.4, 291.0], [3.5, 292.0], [3.6, 294.0], [3.7, 295.0], [3.8, 295.0], [3.9, 296.0], [4.0, 297.0], [4.1, 297.0], [4.2, 298.0], [4.3, 298.0], [4.4, 300.0], [4.5, 300.0], [4.6, 300.0], [4.7, 301.0], [4.8, 301.0], [4.9, 301.0], [5.0, 303.0], [5.1, 303.0], [5.2, 304.0], [5.3, 305.0], [5.4, 305.0], [5.5, 305.0], [5.6, 306.0], [5.7, 306.0], [5.8, 307.0], [5.9, 307.0], [6.0, 308.0], [6.1, 308.0], [6.2, 309.0], [6.3, 309.0], [6.4, 309.0], [6.5, 310.0], [6.6, 311.0], [6.7, 311.0], [6.8, 313.0], [6.9, 315.0], [7.0, 316.0], [7.1, 317.0], [7.2, 318.0], [7.3, 318.0], [7.4, 319.0], [7.5, 319.0], [7.6, 320.0], [7.7, 322.0], [7.8, 322.0], [7.9, 324.0], [8.0, 325.0], [8.1, 327.0], [8.2, 327.0], [8.3, 327.0], [8.4, 328.0], [8.5, 329.0], [8.6, 329.0], [8.7, 330.0], [8.8, 330.0], [8.9, 331.0], [9.0, 332.0], [9.1, 332.0], [9.2, 333.0], [9.3, 333.0], [9.4, 341.0], [9.5, 349.0], [9.6, 357.0], [9.7, 358.0], [9.8, 361.0], [9.9, 367.0], [10.0, 368.0], [10.1, 368.0], [10.2, 369.0], [10.3, 371.0], [10.4, 379.0], [10.5, 385.0], [10.6, 387.0], [10.7, 389.0], [10.8, 391.0], [10.9, 391.0], [11.0, 399.0], [11.1, 404.0], [11.2, 405.0], [11.3, 416.0], [11.4, 416.0], [11.5, 437.0], [11.6, 440.0], [11.7, 440.0], [11.8, 440.0], [11.9, 446.0], [12.0, 446.0], [12.1, 448.0], [12.2, 449.0], [12.3, 458.0], [12.4, 472.0], [12.5, 478.0], [12.6, 485.0], [12.7, 489.0], [12.8, 490.0], [12.9, 492.0], [13.0, 495.0], [13.1, 496.0], [13.2, 497.0], [13.3, 500.0], [13.4, 505.0], [13.5, 509.0], [13.6, 509.0], [13.7, 509.0], [13.8, 515.0], [13.9, 518.0], [14.0, 521.0], [14.1, 525.0], [14.2, 529.0], [14.3, 530.0], [14.4, 534.0], [14.5, 542.0], [14.6, 545.0], [14.7, 546.0], [14.8, 547.0], [14.9, 552.0], [15.0, 561.0], [15.1, 561.0], [15.2, 565.0], [15.3, 583.0], [15.4, 583.0], [15.5, 584.0], [15.6, 585.0], [15.7, 590.0], [15.8, 591.0], [15.9, 596.0], [16.0, 599.0], [16.1, 600.0], [16.2, 600.0], [16.3, 601.0], [16.4, 603.0], [16.5, 603.0], [16.6, 609.0], [16.7, 609.0], [16.8, 609.0], [16.9, 610.0], [17.0, 614.0], [17.1, 624.0], [17.2, 638.0], [17.3, 641.0], [17.4, 643.0], [17.5, 652.0], [17.6, 653.0], [17.7, 653.0], [17.8, 653.0], [17.9, 654.0], [18.0, 655.0], [18.1, 657.0], [18.2, 659.0], [18.3, 661.0], [18.4, 682.0], [18.5, 704.0], [18.6, 708.0], [18.7, 710.0], [18.8, 720.0], [18.9, 720.0], [19.0, 723.0], [19.1, 727.0], [19.2, 743.0], [19.3, 749.0], [19.4, 753.0], [19.5, 767.0], [19.6, 770.0], [19.7, 778.0], [19.8, 778.0], [19.9, 781.0], [20.0, 783.0], [20.1, 788.0], [20.2, 792.0], [20.3, 798.0], [20.4, 799.0], [20.5, 806.0], [20.6, 808.0], [20.7, 809.0], [20.8, 814.0], [20.9, 836.0], [21.0, 842.0], [21.1, 843.0], [21.2, 853.0], [21.3, 860.0], [21.4, 868.0], [21.5, 875.0], [21.6, 893.0], [21.7, 898.0], [21.8, 899.0], [21.9, 903.0], [22.0, 911.0], [22.1, 920.0], [22.2, 925.0], [22.3, 925.0], [22.4, 939.0], [22.5, 947.0], [22.6, 966.0], [22.7, 969.0], [22.8, 973.0], [22.9, 977.0], [23.0, 1000.0], [23.1, 1020.0], [23.2, 1022.0], [23.3, 1031.0], [23.4, 1033.0], [23.5, 1048.0], [23.6, 1049.0], [23.7, 1058.0], [23.8, 1071.0], [23.9, 1082.0], [24.0, 1083.0], [24.1, 1092.0], [24.2, 1095.0], [24.3, 1101.0], [24.4, 1108.0], [24.5, 1127.0], [24.6, 1146.0], [24.7, 1157.0], [24.8, 1158.0], [24.9, 1159.0], [25.0, 1161.0], [25.1, 1163.0], [25.2, 1173.0], [25.3, 1192.0], [25.4, 1197.0], [25.5, 1218.0], [25.6, 1219.0], [25.7, 1229.0], [25.8, 1250.0], [25.9, 1251.0], [26.0, 1261.0], [26.1, 1261.0], [26.2, 1264.0], [26.3, 1265.0], [26.4, 1266.0], [26.5, 1267.0], [26.6, 1272.0], [26.7, 1273.0], [26.8, 1274.0], [26.9, 1279.0], [27.0, 1280.0], [27.1, 1282.0], [27.2, 1284.0], [27.3, 1290.0], [27.4, 1293.0], [27.5, 1295.0], [27.6, 1296.0], [27.7, 1296.0], [27.8, 1296.0], [27.9, 1297.0], [28.0, 1298.0], [28.1, 1298.0], [28.2, 1298.0], [28.3, 1299.0], [28.4, 1300.0], [28.5, 1306.0], [28.6, 1307.0], [28.7, 1308.0], [28.8, 1309.0], [28.9, 1311.0], [29.0, 1313.0], [29.1, 1318.0], [29.2, 1318.0], [29.3, 1319.0], [29.4, 1323.0], [29.5, 1325.0], [29.6, 1327.0], [29.7, 1329.0], [29.8, 1332.0], [29.9, 1334.0], [30.0, 1337.0], [30.1, 1337.0], [30.2, 1338.0], [30.3, 1356.0], [30.4, 1363.0], [30.5, 1365.0], [30.6, 1369.0], [30.7, 1372.0], [30.8, 1374.0], [30.9, 1375.0], [31.0, 1375.0], [31.1, 1378.0], [31.2, 1380.0], [31.3, 1380.0], [31.4, 1382.0], [31.5, 1385.0], [31.6, 1390.0], [31.7, 1393.0], [31.8, 1414.0], [31.9, 1435.0], [32.0, 1437.0], [32.1, 1439.0], [32.2, 1443.0], [32.3, 1445.0], [32.4, 1445.0], [32.5, 1454.0], [32.6, 1472.0], [32.7, 1474.0], [32.8, 1476.0], [32.9, 1477.0], [33.0, 1480.0], [33.1, 1486.0], [33.2, 1490.0], [33.3, 1491.0], [33.4, 1500.0], [33.5, 1503.0], [33.6, 1504.0], [33.7, 1504.0], [33.8, 1506.0], [33.9, 1507.0], [34.0, 1508.0], [34.1, 1512.0], [34.2, 1530.0], [34.3, 1534.0], [34.4, 1543.0], [34.5, 1543.0], [34.6, 1547.0], [34.7, 1551.0], [34.8, 1551.0], [34.9, 1552.0], [35.0, 1552.0], [35.1, 1558.0], [35.2, 1558.0], [35.3, 1561.0], [35.4, 1563.0], [35.5, 1569.0], [35.6, 1569.0], [35.7, 1569.0], [35.8, 1574.0], [35.9, 1596.0], [36.0, 1597.0], [36.1, 1597.0], [36.2, 1597.0], [36.3, 1600.0], [36.4, 1600.0], [36.5, 1602.0], [36.6, 1603.0], [36.7, 1605.0], [36.8, 1612.0], [36.9, 1615.0], [37.0, 1615.0], [37.1, 1617.0], [37.2, 1620.0], [37.3, 1623.0], [37.4, 1624.0], [37.5, 1626.0], [37.6, 1626.0], [37.7, 1626.0], [37.8, 1626.0], [37.9, 1627.0], [38.0, 1627.0], [38.1, 1628.0], [38.2, 1628.0], [38.3, 1628.0], [38.4, 1628.0], [38.5, 1630.0], [38.6, 1632.0], [38.7, 1637.0], [38.8, 1637.0], [38.9, 1638.0], [39.0, 1639.0], [39.1, 1640.0], [39.2, 1642.0], [39.3, 1642.0], [39.4, 1644.0], [39.5, 1648.0], [39.6, 1655.0], [39.7, 1655.0], [39.8, 1657.0], [39.9, 1657.0], [40.0, 1658.0], [40.1, 1659.0], [40.2, 1660.0], [40.3, 1661.0], [40.4, 1661.0], [40.5, 1661.0], [40.6, 1661.0], [40.7, 1661.0], [40.8, 1662.0], [40.9, 1662.0], [41.0, 1663.0], [41.1, 1663.0], [41.2, 1663.0], [41.3, 1663.0], [41.4, 1665.0], [41.5, 1667.0], [41.6, 1668.0], [41.7, 1669.0], [41.8, 1669.0], [41.9, 1669.0], [42.0, 1674.0], [42.1, 1676.0], [42.2, 1678.0], [42.3, 1680.0], [42.4, 1680.0], [42.5, 1687.0], [42.6, 1689.0], [42.7, 1690.0], [42.8, 1691.0], [42.9, 1691.0], [43.0, 1694.0], [43.1, 1694.0], [43.2, 1696.0], [43.3, 1697.0], [43.4, 1699.0], [43.5, 1700.0], [43.6, 1703.0], [43.7, 1711.0], [43.8, 1713.0], [43.9, 1714.0], [44.0, 1715.0], [44.1, 1720.0], [44.2, 1723.0], [44.3, 1723.0], [44.4, 1725.0], [44.5, 1727.0], [44.6, 1733.0], [44.7, 1737.0], [44.8, 1740.0], [44.9, 1747.0], [45.0, 1749.0], [45.1, 1755.0], [45.2, 1755.0], [45.3, 1756.0], [45.4, 1757.0], [45.5, 1757.0], [45.6, 1758.0], [45.7, 1758.0], [45.8, 1760.0], [45.9, 1762.0], [46.0, 1762.0], [46.1, 1763.0], [46.2, 1763.0], [46.3, 1766.0], [46.4, 1766.0], [46.5, 1767.0], [46.6, 1768.0], [46.7, 1768.0], [46.8, 1769.0], [46.9, 1769.0], [47.0, 1770.0], [47.1, 1776.0], [47.2, 1777.0], [47.3, 1779.0], [47.4, 1787.0], [47.5, 1787.0], [47.6, 1789.0], [47.7, 1790.0], [47.8, 1793.0], [47.9, 1793.0], [48.0, 1795.0], [48.1, 1796.0], [48.2, 1797.0], [48.3, 1797.0], [48.4, 1798.0], [48.5, 1798.0], [48.6, 1799.0], [48.7, 1801.0], [48.8, 1801.0], [48.9, 1802.0], [49.0, 1803.0], [49.1, 1803.0], [49.2, 1806.0], [49.3, 1809.0], [49.4, 1809.0], [49.5, 1818.0], [49.6, 1818.0], [49.7, 1820.0], [49.8, 1824.0], [49.9, 1827.0], [50.0, 1828.0], [50.1, 1830.0], [50.2, 1831.0], [50.3, 1832.0], [50.4, 1832.0], [50.5, 1834.0], [50.6, 1835.0], [50.7, 1836.0], [50.8, 1840.0], [50.9, 1842.0], [51.0, 1842.0], [51.1, 1845.0], [51.2, 1846.0], [51.3, 1848.0], [51.4, 1849.0], [51.5, 1850.0], [51.6, 1851.0], [51.7, 1853.0], [51.8, 1853.0], [51.9, 1854.0], [52.0, 1857.0], [52.1, 1857.0], [52.2, 1857.0], [52.3, 1857.0], [52.4, 1858.0], [52.5, 1865.0], [52.6, 1875.0], [52.7, 1877.0], [52.8, 1879.0], [52.9, 1879.0], [53.0, 1881.0], [53.1, 1881.0], [53.2, 1884.0], [53.3, 1888.0], [53.4, 1888.0], [53.5, 1889.0], [53.6, 1891.0], [53.7, 1891.0], [53.8, 1893.0], [53.9, 1895.0], [54.0, 1898.0], [54.1, 1898.0], [54.2, 1898.0], [54.3, 1902.0], [54.4, 1902.0], [54.5, 1903.0], [54.6, 1903.0], [54.7, 1903.0], [54.8, 1906.0], [54.9, 1908.0], [55.0, 1909.0], [55.1, 1910.0], [55.2, 1910.0], [55.3, 1911.0], [55.4, 1912.0], [55.5, 1912.0], [55.6, 1913.0], [55.7, 1914.0], [55.8, 1915.0], [55.9, 1915.0], [56.0, 1916.0], [56.1, 1916.0], [56.2, 1921.0], [56.3, 1929.0], [56.4, 1931.0], [56.5, 1932.0], [56.6, 1933.0], [56.7, 1937.0], [56.8, 1937.0], [56.9, 1940.0], [57.0, 1941.0], [57.1, 1942.0], [57.2, 1944.0], [57.3, 1944.0], [57.4, 1949.0], [57.5, 1950.0], [57.6, 1951.0], [57.7, 1951.0], [57.8, 1952.0], [57.9, 1953.0], [58.0, 1956.0], [58.1, 1959.0], [58.2, 1963.0], [58.3, 1966.0], [58.4, 1967.0], [58.5, 1972.0], [58.6, 1973.0], [58.7, 1974.0], [58.8, 1974.0], [58.9, 1975.0], [59.0, 1976.0], [59.1, 1980.0], [59.2, 1988.0], [59.3, 1990.0], [59.4, 1990.0], [59.5, 1992.0], [59.6, 1994.0], [59.7, 1994.0], [59.8, 1999.0], [59.9, 2002.0], [60.0, 2005.0], [60.1, 2005.0], [60.2, 2008.0], [60.3, 2010.0], [60.4, 2010.0], [60.5, 2013.0], [60.6, 2014.0], [60.7, 2014.0], [60.8, 2015.0], [60.9, 2015.0], [61.0, 2017.0], [61.1, 2017.0], [61.2, 2021.0], [61.3, 2021.0], [61.4, 2022.0], [61.5, 2022.0], [61.6, 2025.0], [61.7, 2026.0], [61.8, 2027.0], [61.9, 2028.0], [62.0, 2028.0], [62.1, 2029.0], [62.2, 2036.0], [62.3, 2039.0], [62.4, 2043.0], [62.5, 2049.0], [62.6, 2053.0], [62.7, 2056.0], [62.8, 2056.0], [62.9, 2058.0], [63.0, 2062.0], [63.1, 2062.0], [63.2, 2063.0], [63.3, 2063.0], [63.4, 2066.0], [63.5, 2066.0], [63.6, 2067.0], [63.7, 2071.0], [63.8, 2071.0], [63.9, 2076.0], [64.0, 2078.0], [64.1, 2078.0], [64.2, 2079.0], [64.3, 2080.0], [64.4, 2082.0], [64.5, 2084.0], [64.6, 2085.0], [64.7, 2085.0], [64.8, 2085.0], [64.9, 2086.0], [65.0, 2088.0], [65.1, 2088.0], [65.2, 2090.0], [65.3, 2091.0], [65.4, 2091.0], [65.5, 2092.0], [65.6, 2092.0], [65.7, 2092.0], [65.8, 2093.0], [65.9, 2095.0], [66.0, 2095.0], [66.1, 2096.0], [66.2, 2097.0], [66.3, 2097.0], [66.4, 2100.0], [66.5, 2100.0], [66.6, 2108.0], [66.7, 2114.0], [66.8, 2116.0], [66.9, 2119.0], [67.0, 2121.0], [67.1, 2121.0], [67.2, 2122.0], [67.3, 2122.0], [67.4, 2123.0], [67.5, 2126.0], [67.6, 2129.0], [67.7, 2133.0], [67.8, 2135.0], [67.9, 2137.0], [68.0, 2138.0], [68.1, 2141.0], [68.2, 2147.0], [68.3, 2149.0], [68.4, 2152.0], [68.5, 2154.0], [68.6, 2155.0], [68.7, 2156.0], [68.8, 2158.0], [68.9, 2160.0], [69.0, 2161.0], [69.1, 2162.0], [69.2, 2162.0], [69.3, 2163.0], [69.4, 2165.0], [69.5, 2168.0], [69.6, 2174.0], [69.7, 2178.0], [69.8, 2179.0], [69.9, 2179.0], [70.0, 2180.0], [70.1, 2181.0], [70.2, 2183.0], [70.3, 2183.0], [70.4, 2184.0], [70.5, 2184.0], [70.6, 2185.0], [70.7, 2186.0], [70.8, 2187.0], [70.9, 2189.0], [71.0, 2190.0], [71.1, 2191.0], [71.2, 2192.0], [71.3, 2196.0], [71.4, 2197.0], [71.5, 2197.0], [71.6, 2199.0], [71.7, 2204.0], [71.8, 2207.0], [71.9, 2207.0], [72.0, 2207.0], [72.1, 2209.0], [72.2, 2210.0], [72.3, 2211.0], [72.4, 2212.0], [72.5, 2212.0], [72.6, 2212.0], [72.7, 2217.0], [72.8, 2227.0], [72.9, 2232.0], [73.0, 2236.0], [73.1, 2237.0], [73.2, 2237.0], [73.3, 2243.0], [73.4, 2256.0], [73.5, 2554.0], [73.6, 2556.0], [73.7, 2581.0], [73.8, 2583.0], [73.9, 2685.0], [74.0, 2698.0], [74.1, 2703.0], [74.2, 2720.0], [74.3, 2721.0], [74.4, 2751.0], [74.5, 2760.0], [74.6, 2765.0], [74.7, 2768.0], [74.8, 2770.0], [74.9, 2777.0], [75.0, 2790.0], [75.1, 2791.0], [75.2, 2792.0], [75.3, 2794.0], [75.4, 2828.0], [75.5, 2828.0], [75.6, 2831.0], [75.7, 2832.0], [75.8, 2843.0], [75.9, 2853.0], [76.0, 2857.0], [76.1, 2865.0], [76.2, 2866.0], [76.3, 2868.0], [76.4, 2869.0], [76.5, 2872.0], [76.6, 2872.0], [76.7, 2884.0], [76.8, 2888.0], [76.9, 2890.0], [77.0, 2891.0], [77.1, 2894.0], [77.2, 2902.0], [77.3, 2904.0], [77.4, 2905.0], [77.5, 2916.0], [77.6, 2917.0], [77.7, 2919.0], [77.8, 2919.0], [77.9, 2919.0], [78.0, 2931.0], [78.1, 2931.0], [78.2, 2932.0], [78.3, 2933.0], [78.4, 2935.0], [78.5, 2940.0], [78.6, 2941.0], [78.7, 2941.0], [78.8, 2942.0], [78.9, 2942.0], [79.0, 2942.0], [79.1, 2943.0], [79.2, 2946.0], [79.3, 2946.0], [79.4, 2949.0], [79.5, 2950.0], [79.6, 2952.0], [79.7, 2952.0], [79.8, 2955.0], [79.9, 2961.0], [80.0, 2961.0], [80.1, 2963.0], [80.2, 2963.0], [80.3, 2964.0], [80.4, 2964.0], [80.5, 2966.0], [80.6, 2971.0], [80.7, 2972.0], [80.8, 3001.0], [80.9, 3017.0], [81.0, 3021.0], [81.1, 3026.0], [81.2, 3027.0], [81.3, 3027.0], [81.4, 3027.0], [81.5, 3027.0], [81.6, 3028.0], [81.7, 3028.0], [81.8, 3028.0], [81.9, 3029.0], [82.0, 3029.0], [82.1, 3030.0], [82.2, 3030.0], [82.3, 3030.0], [82.4, 3031.0], [82.5, 3031.0], [82.6, 3032.0], [82.7, 3032.0], [82.8, 3032.0], [82.9, 3032.0], [83.0, 3032.0], [83.1, 3032.0], [83.2, 3032.0], [83.3, 3032.0], [83.4, 3033.0], [83.5, 3034.0], [83.6, 3035.0], [83.7, 3035.0], [83.8, 3037.0], [83.9, 3038.0], [84.0, 3041.0], [84.1, 3041.0], [84.2, 3042.0], [84.3, 3046.0], [84.4, 3046.0], [84.5, 3049.0], [84.6, 3054.0], [84.7, 3056.0], [84.8, 3058.0], [84.9, 3063.0], [85.0, 3065.0], [85.1, 3068.0], [85.2, 3068.0], [85.3, 3070.0], [85.4, 3073.0], [85.5, 3081.0], [85.6, 3084.0], [85.7, 3086.0], [85.8, 3102.0], [85.9, 3105.0], [86.0, 3118.0], [86.1, 3119.0], [86.2, 3119.0], [86.3, 3120.0], [86.4, 3123.0], [86.5, 3124.0], [86.6, 3126.0], [86.7, 3127.0], [86.8, 3128.0], [86.9, 3129.0], [87.0, 3132.0], [87.1, 3134.0], [87.2, 3137.0], [87.3, 3138.0], [87.4, 3143.0], [87.5, 3143.0], [87.6, 3144.0], [87.7, 3146.0], [87.8, 3147.0], [87.9, 3150.0], [88.0, 3152.0], [88.1, 3154.0], [88.2, 3155.0], [88.3, 3158.0], [88.4, 3161.0], [88.5, 3161.0], [88.6, 3162.0], [88.7, 3207.0], [88.8, 3213.0], [88.9, 3284.0], [89.0, 3297.0], [89.1, 3317.0], [89.2, 3342.0], [89.3, 3346.0], [89.4, 3362.0], [89.5, 3362.0], [89.6, 3384.0], [89.7, 3410.0], [89.8, 3418.0], [89.9, 3419.0], [90.0, 3421.0], [90.1, 3424.0], [90.2, 3439.0], [90.3, 3451.0], [90.4, 3471.0], [90.5, 3474.0], [90.6, 3490.0], [90.7, 3499.0], [90.8, 3508.0], [90.9, 3522.0], [91.0, 3537.0], [91.1, 3537.0], [91.2, 3543.0], [91.3, 3549.0], [91.4, 3550.0], [91.5, 3554.0], [91.6, 3556.0], [91.7, 3561.0], [91.8, 3583.0], [91.9, 3588.0], [92.0, 3592.0], [92.1, 3600.0], [92.2, 3625.0], [92.3, 3625.0], [92.4, 3635.0], [92.5, 3636.0], [92.6, 3640.0], [92.7, 3642.0], [92.8, 3645.0], [92.9, 3650.0], [93.0, 3651.0], [93.1, 3654.0], [93.2, 3654.0], [93.3, 3655.0], [93.4, 3655.0], [93.5, 3658.0], [93.6, 3660.0], [93.7, 3660.0], [93.8, 3661.0], [93.9, 3663.0], [94.0, 3664.0], [94.1, 3674.0], [94.2, 3675.0], [94.3, 3676.0], [94.4, 3676.0], [94.5, 3676.0], [94.6, 3676.0], [94.7, 3677.0], [94.8, 3678.0], [94.9, 3685.0], [95.0, 3695.0], [95.1, 3696.0], [95.2, 3738.0], [95.3, 3743.0], [95.4, 3755.0], [95.5, 3767.0], [95.6, 3771.0], [95.7, 3785.0], [95.8, 3790.0], [95.9, 3797.0], [96.0, 3806.0], [96.1, 3813.0], [96.2, 3815.0], [96.3, 3818.0], [96.4, 3820.0], [96.5, 3836.0], [96.6, 3837.0], [96.7, 3840.0], [96.8, 3843.0], [96.9, 3848.0], [97.0, 3856.0], [97.1, 3882.0], [97.2, 3889.0], [97.3, 3900.0], [97.4, 3906.0], [97.5, 3906.0], [97.6, 3912.0], [97.7, 3916.0], [97.8, 3916.0], [97.9, 3918.0], [98.0, 3922.0], [98.1, 3923.0], [98.2, 3925.0], [98.3, 3926.0], [98.4, 3935.0], [98.5, 3937.0], [98.6, 3943.0], [98.7, 3943.0], [98.8, 3944.0], [98.9, 3945.0], [99.0, 3951.0], [99.1, 3980.0], [99.2, 3983.0], [99.3, 3983.0], [99.4, 3986.0], [99.5, 3988.0], [99.6, 3988.0], [99.7, 3999.0], [99.8, 4203.0], [99.9, 4461.0]], "isOverall": false, "label": "Access Movies Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 72.0, "series": [{"data": [[600.0, 24.0], [700.0, 19.0], [800.0, 14.0], [900.0, 11.0], [1000.0, 13.0], [1100.0, 12.0], [1200.0, 29.0], [1300.0, 34.0], [1400.0, 16.0], [1500.0, 29.0], [1600.0, 72.0], [1700.0, 52.0], [1800.0, 56.0], [1900.0, 56.0], [2000.0, 65.0], [2100.0, 53.0], [2200.0, 18.0], [2500.0, 4.0], [2600.0, 2.0], [2700.0, 13.0], [2800.0, 18.0], [2900.0, 37.0], [3000.0, 50.0], [3100.0, 29.0], [200.0, 44.0], [3200.0, 4.0], [3300.0, 6.0], [3400.0, 11.0], [3500.0, 13.0], [3600.0, 31.0], [3700.0, 8.0], [3800.0, 13.0], [3900.0, 25.0], [4200.0, 1.0], [4400.0, 1.0], [300.0, 67.0], [400.0, 22.0], [500.0, 28.0]], "isOverall": false, "label": "Access Movies Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 134.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 666.0, "series": [{"data": [[0.0, 134.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 200.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 666.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 488.796, "minX": 1.5723219E12, "maxY": 488.796, "series": [{"data": [[1.5723219E12, 488.796]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5723219E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 260.0, "minX": 1.0, "maxY": 4461.0, "series": [{"data": [[2.0, 4203.0], [3.0, 3049.0], [4.0, 3032.0], [5.0, 3035.0], [7.0, 3030.0], [8.0, 3054.0], [9.0, 3032.0], [10.0, 3026.0], [11.0, 3028.0], [13.0, 3028.0], [14.0, 3028.5], [16.0, 3032.5], [18.0, 3031.5], [19.0, 3031.0], [22.0, 3033.0], [24.0, 3033.0], [26.0, 3036.0], [27.0, 3027.0], [28.0, 3999.0], [30.0, 3983.0], [32.0, 3024.0], [35.0, 3916.0], [34.0, 3793.0], [37.0, 3949.0], [39.0, 3187.0], [40.0, 3550.0], [43.0, 3943.0], [42.0, 3363.5], [44.0, 3945.0], [49.0, 3951.0], [48.0, 3967.0], [51.0, 3654.0], [50.0, 3658.0], [53.0, 3822.0], [55.0, 3763.5], [57.0, 3029.0], [56.0, 3685.0], [59.0, 3936.0], [61.0, 3943.0], [60.0, 3922.0], [64.0, 3624.3333333333335], [70.0, 3785.0], [68.0, 3688.25], [75.0, 3070.0], [74.0, 3068.0], [73.0, 3327.3333333333335], [78.0, 3316.0], [83.0, 3065.5], [81.0, 3633.3333333333335], [87.0, 3778.5], [85.0, 3785.0], [84.0, 3843.0], [91.0, 3735.5], [89.0, 3837.0], [88.0, 3840.0], [95.0, 3797.0], [94.0, 3813.0], [93.0, 3818.0], [92.0, 3820.0], [99.0, 3128.0], [98.0, 3119.0], [97.0, 3743.0], [96.0, 3806.0], [102.0, 3128.5], [100.0, 3132.0], [106.0, 3126.0], [105.0, 3119.0], [104.0, 3125.5], [110.0, 3143.0], [108.0, 3137.5], [114.0, 3147.6666666666665], [112.0, 3136.5], [118.0, 3160.0], [116.0, 3143.0], [123.0, 3225.5], [121.0, 3351.6666666666665], [135.0, 3637.3333333333335], [134.0, 3675.0], [133.0, 3676.0], [132.0, 3678.0], [131.0, 3661.0], [129.0, 3663.0], [143.0, 3655.0], [141.0, 3640.0], [140.0, 3636.0], [139.0, 3642.0], [138.0, 3537.0], [137.0, 3535.0], [150.0, 3601.3333333333335], [148.0, 3490.0], [146.0, 3581.5], [145.0, 3650.0], [144.0, 3676.0], [158.0, 3362.0], [157.0, 3418.0], [156.0, 3419.0], [155.0, 3384.0], [154.0, 3512.0], [152.0, 3549.5], [167.0, 3413.5], [165.0, 3625.0], [164.0, 3451.0], [163.0, 3511.0], [160.0, 3531.5], [174.0, 3314.6666666666665], [171.0, 3549.0], [170.0, 3439.5], [168.0, 3556.0], [183.0, 3128.5], [181.0, 3210.0], [179.0, 3086.0], [178.0, 3439.0], [177.0, 3084.0], [176.0, 3471.5], [189.0, 2994.0], [187.0, 3110.0], [185.0, 3056.0], [184.0, 3120.0], [199.0, 2581.0], [198.0, 2932.0], [197.0, 2583.0], [196.0, 2821.6666666666665], [193.0, 2971.0], [192.0, 2958.3333333333335], [207.0, 2966.0], [203.0, 2554.0], [202.0, 2972.0], [201.0, 3001.0], [200.0, 2943.0], [214.0, 2896.0], [212.0, 2915.0], [208.0, 2943.75], [221.0, 2883.0], [217.0, 2961.0], [229.0, 2940.0], [227.0, 2924.3333333333335], [224.0, 2923.6666666666665], [239.0, 2924.3333333333335], [236.0, 2939.0], [233.0, 2919.0], [232.0, 2952.0], [247.0, 2894.0], [246.0, 2775.0], [244.0, 2806.0], [243.0, 2751.0], [242.0, 2853.0], [255.0, 2866.5], [251.0, 2872.0], [250.0, 1795.0], [249.0, 2891.0], [248.0, 2904.0], [268.0, 1266.0], [270.0, 1552.0], [271.0, 1218.0], [269.0, 1279.0], [267.0, 2745.3333333333335], [264.0, 2791.0], [263.0, 2828.0], [261.0, 2800.5], [259.0, 2699.5], [257.0, 2793.0], [287.0, 1479.0], [283.0, 2201.0], [278.0, 2110.75], [274.0, 1337.0], [273.0, 1439.0], [272.0, 1477.0], [302.0, 1373.0], [300.0, 1767.5], [299.0, 1319.0], [298.0, 1315.6666666666667], [294.0, 1809.6666666666667], [293.0, 1933.0], [289.0, 1978.5], [315.0, 1943.75], [311.0, 1704.5], [307.0, 1377.6], [330.0, 2001.0], [328.0, 1311.0], [327.0, 1309.0], [326.0, 1296.0], [324.0, 2212.0], [323.0, 1280.0], [322.0, 2158.0], [349.0, 2162.8333333333335], [348.0, 2207.0], [345.0, 1743.0], [344.0, 2194.5384615384614], [362.0, 2082.5], [361.0, 2152.0], [360.0, 2190.0], [357.0, 2114.0], [356.0, 2117.666666666667], [355.0, 2187.0], [381.0, 1956.0], [382.0, 2086.0], [380.0, 1994.0], [370.0, 2035.0], [378.0, 1879.0], [377.0, 2119.0], [376.0, 2110.0], [374.0, 2181.0], [373.0, 1315.0], [372.0, 1739.0], [399.0, 2102.0], [397.0, 2035.5], [394.0, 2085.25], [393.0, 2116.0], [391.0, 2100.0], [388.0, 2127.0], [385.0, 2095.0], [403.0, 2113.0], [414.0, 2141.0], [415.0, 1909.0], [413.0, 2026.25], [409.0, 2082.0], [408.0, 2074.5], [406.0, 1958.5], [404.0, 2119.2], [402.0, 2092.0], [401.0, 2161.0], [430.0, 1832.0], [431.0, 1840.0], [429.0, 1680.0], [428.0, 1756.0], [426.0, 1690.0], [425.0, 1735.5], [424.0, 1975.5], [423.0, 1846.0], [417.0, 2135.0], [418.0, 2063.0], [422.0, 1999.3333333333333], [447.0, 1831.0], [446.0, 2080.0], [444.0, 1836.0], [443.0, 1945.8], [438.0, 1942.3333333333333], [436.0, 1791.5], [435.0, 2091.0], [433.0, 2022.0], [461.0, 1919.0], [460.0, 2086.0], [457.0, 2064.5], [455.0, 2080.3333333333335], [452.0, 2019.5], [450.0, 2012.3333333333333], [479.0, 2005.0], [477.0, 2056.0], [472.0, 1782.4285714285716], [470.0, 1414.0], [468.0, 1445.0], [467.0, 1867.0], [494.0, 2028.0], [493.0, 1657.0], [489.0, 1787.0], [488.0, 1951.6666666666667], [486.0, 2043.0], [485.0, 1881.6666666666667], [481.0, 1650.8], [509.0, 1988.0], [507.0, 1841.0], [505.0, 1959.0], [504.0, 2014.0], [502.0, 2006.0], [500.0, 1387.5], [499.0, 1777.0], [497.0, 1893.4], [532.0, 1801.0], [540.0, 1812.0], [538.0, 1926.0], [536.0, 1915.0], [517.0, 2014.6666666666667], [516.0, 1877.5], [512.0, 1900.3333333333333], [535.0, 1902.0], [534.0, 1944.0], [533.0, 1720.0], [529.0, 1800.5], [527.0, 1971.0], [523.0, 1963.3333333333333], [520.0, 1884.3333333333333], [574.0, 1845.0], [575.0, 1898.0], [573.0, 1849.5], [572.0, 1715.0], [570.0, 1907.0], [568.0, 1909.5], [556.0, 1760.5], [551.0, 1891.0], [548.0, 1895.0], [547.0, 1914.6666666666667], [545.0, 1879.0], [544.0, 1828.6666666666667], [554.0, 1851.8], [566.0, 1847.25], [562.0, 1610.0], [560.0, 1874.0], [595.0, 1676.0], [607.0, 1723.0], [599.0, 1763.0], [598.0, 1757.0], [597.0, 1719.5], [594.0, 1672.5], [592.0, 1799.5], [590.0, 1742.5], [588.0, 1727.6666666666667], [585.0, 1688.4], [623.0, 1723.0], [635.0, 1745.3333333333333], [636.0, 1512.0], [632.0, 1713.0], [614.0, 1799.0], [611.0, 1782.0], [609.0, 1664.0], [631.0, 1780.8333333333335], [630.0, 1759.0], [622.0, 1642.0], [620.0, 642.0], [618.0, 1036.6666666666667], [616.0, 659.0], [665.0, 1669.0], [670.0, 1653.5], [667.0, 1602.0], [666.0, 1506.0], [655.0, 1588.5], [641.0, 1704.0], [640.0, 1569.0], [643.0, 1696.0], [642.0, 1616.6666666666667], [645.0, 1703.0], [644.0, 1763.0], [653.0, 1626.5], [649.0, 1500.0], [647.0, 1308.0], [646.0, 1694.0], [690.0, 1642.2857142857142], [702.0, 1634.0], [700.0, 1528.0], [699.0, 1638.0], [697.0, 1639.0], [684.0, 1646.5], [676.0, 1591.2], [672.0, 1664.0], [679.0, 1667.0], [678.0, 1658.0], [681.0, 1607.75], [680.0, 1657.0], [695.0, 1620.0], [694.0, 1535.5], [692.0, 1443.5], [689.0, 1600.0], [733.0, 306.0], [735.0, 780.0], [723.0, 1458.6666666666667], [720.0, 1529.5], [732.0, 1071.0], [731.0, 1504.0], [730.0, 1508.0], [729.0, 1445.0], [728.0, 1474.0], [711.0, 1612.5], [709.0, 1627.0], [708.0, 1622.0], [718.0, 1558.0], [717.0, 1596.5], [715.0, 1434.0], [713.0, 1526.0], [727.0, 1491.0], [726.0, 1535.3333333333333], [753.0, 767.0], [756.0, 704.0], [755.0, 709.4285714285714], [754.0, 552.0], [752.0, 814.0], [757.0, 621.4545454545454], [759.0, 671.0], [758.0, 260.0], [761.0, 806.0], [760.0, 530.5], [740.0, 505.3333333333333], [737.0, 496.0], [751.0, 535.8333333333334], [749.0, 518.0], [744.0, 537.5], [766.0, 669.0], [765.0, 268.5], [763.0, 267.0], [762.0, 264.0], [797.0, 295.0], [772.0, 638.0], [773.0, 266.6666666666667], [780.0, 281.5], [768.0, 763.5], [771.0, 1337.0], [769.0, 770.0], [776.0, 494.1538461538461], [778.0, 288.5], [779.0, 559.090909090909], [785.0, 603.875], [784.0, 282.0], [791.0, 285.0], [790.0, 274.0], [799.0, 367.0], [798.0, 727.0], [793.0, 320.0], [792.0, 286.0], [826.0, 896.0], [809.0, 625.2], [808.0, 929.5], [810.0, 925.0], [811.0, 368.0], [815.0, 446.0], [801.0, 1327.0], [800.0, 689.5], [805.0, 584.5714285714286], [802.0, 1263.0], [814.0, 747.25], [831.0, 788.0], [829.0, 298.5], [825.0, 309.0], [824.0, 391.0], [823.0, 1195.0], [821.0, 315.0], [820.0, 872.0], [818.0, 1291.6666666666667], [858.0, 386.3333333333333], [834.0, 966.0], [839.0, 886.6666666666666], [837.0, 289.3333333333333], [835.0, 288.0], [841.0, 553.5], [840.0, 301.5], [847.0, 313.75], [833.0, 301.0], [843.0, 302.6666666666667], [860.0, 973.5], [862.0, 385.0], [853.0, 317.5], [861.0, 1239.8], [859.0, 344.0], [856.0, 947.0], [864.0, 685.0], [871.0, 465.75], [867.0, 762.5], [866.0, 860.0], [889.0, 327.0], [895.0, 613.5], [891.0, 537.25], [873.0, 412.0], [875.0, 708.5], [880.0, 1083.0], [883.0, 328.0], [885.0, 720.5], [886.0, 583.6666666666667], [884.0, 903.0], [882.0, 427.6666666666667], [879.0, 999.25], [877.0, 987.0], [876.0, 304.0], [878.0, 592.6666666666666], [874.0, 987.3333333333334], [872.0, 748.3333333333334], [906.0, 1157.5], [904.0, 311.0], [903.0, 305.0], [902.0, 306.0], [898.0, 330.3333333333333], [896.0, 330.0], [1.0, 4461.0]], "isOverall": false, "label": "Access Movies Page", "isController": false}, {"data": [[488.7909999999986, 1873.5449999999992]], "isOverall": false, "label": "Access Movies Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 906.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3850.0, "minX": 1.5723219E12, "maxY": 131557.96666666667, "series": [{"data": [[1.5723219E12, 131557.96666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5723219E12, 3850.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5723219E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1873.5449999999992, "minX": 1.5723219E12, "maxY": 1873.5449999999992, "series": [{"data": [[1.5723219E12, 1873.5449999999992]], "isOverall": false, "label": "Access Movies Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5723219E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1166.3489999999995, "minX": 1.5723219E12, "maxY": 1166.3489999999995, "series": [{"data": [[1.5723219E12, 1166.3489999999995]], "isOverall": false, "label": "Access Movies Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5723219E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 834.4649999999998, "minX": 1.5723219E12, "maxY": 834.4649999999998, "series": [{"data": [[1.5723219E12, 834.4649999999998]], "isOverall": false, "label": "Access Movies Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5723219E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 260.0, "minX": 1.5723219E12, "maxY": 4461.0, "series": [{"data": [[1.5723219E12, 4461.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5723219E12, 260.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5723219E12, 3420.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5723219E12, 3950.94]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5723219E12, 3694.499999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5723219E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 656.0, "minX": 8.0, "maxY": 3537.0, "series": [{"data": [[8.0, 3042.0], [175.0, 3537.0], [94.0, 656.0], [221.0, 2186.0], [502.0, 1628.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 502.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 573.0, "minX": 8.0, "maxY": 3079.0, "series": [{"data": [[8.0, 3024.5], [175.0, 3079.0], [94.0, 573.0], [221.0, 787.0], [502.0, 631.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 502.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.5723219E12, "maxY": 16.666666666666668, "series": [{"data": [[1.5723219E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5723219E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.5723219E12, "maxY": 16.666666666666668, "series": [{"data": [[1.5723219E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5723219E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.5723219E12, "maxY": 16.666666666666668, "series": [{"data": [[1.5723219E12, 16.666666666666668]], "isOverall": false, "label": "Access Movies Page-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5723219E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.5723219E12, "maxY": 16.666666666666668, "series": [{"data": [[1.5723219E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5723219E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

