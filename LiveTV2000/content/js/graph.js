/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 874.0, "minX": 0.0, "maxY": 37460.0, "series": [{"data": [[0.0, 874.0], [0.1, 957.0], [0.2, 993.0], [0.3, 1049.0], [0.4, 1140.0], [0.5, 1197.0], [0.6, 1202.0], [0.7, 1205.0], [0.8, 1209.0], [0.9, 1224.0], [1.0, 1228.0], [1.1, 1231.0], [1.2, 1246.0], [1.3, 1266.0], [1.4, 1292.0], [1.5, 1407.0], [1.6, 1413.0], [1.7, 1415.0], [1.8, 1416.0], [1.9, 1418.0], [2.0, 1422.0], [2.1, 1424.0], [2.2, 1582.0], [2.3, 1611.0], [2.4, 1660.0], [2.5, 1668.0], [2.6, 1679.0], [2.7, 1727.0], [2.8, 1733.0], [2.9, 1797.0], [3.0, 1815.0], [3.1, 1824.0], [3.2, 1845.0], [3.3, 1850.0], [3.4, 1852.0], [3.5, 1862.0], [3.6, 1867.0], [3.7, 1894.0], [3.8, 1897.0], [3.9, 1903.0], [4.0, 1939.0], [4.1, 1942.0], [4.2, 1981.0], [4.3, 2028.0], [4.4, 2091.0], [4.5, 2123.0], [4.6, 2194.0], [4.7, 2245.0], [4.8, 2259.0], [4.9, 2316.0], [5.0, 2416.0], [5.1, 2438.0], [5.2, 2447.0], [5.3, 2461.0], [5.4, 2464.0], [5.5, 2479.0], [5.6, 2489.0], [5.7, 2494.0], [5.8, 2500.0], [5.9, 2545.0], [6.0, 2572.0], [6.1, 2578.0], [6.2, 2593.0], [6.3, 2614.0], [6.4, 2638.0], [6.5, 2674.0], [6.6, 2716.0], [6.7, 2747.0], [6.8, 3006.0], [6.9, 3012.0], [7.0, 3025.0], [7.1, 3027.0], [7.2, 3028.0], [7.3, 3062.0], [7.4, 3087.0], [7.5, 3094.0], [7.6, 3097.0], [7.7, 3103.0], [7.8, 3124.0], [7.9, 3126.0], [8.0, 3134.0], [8.1, 3137.0], [8.2, 3146.0], [8.3, 3201.0], [8.4, 3246.0], [8.5, 3335.0], [8.6, 3353.0], [8.7, 3377.0], [8.8, 3401.0], [8.9, 3424.0], [9.0, 3427.0], [9.1, 3432.0], [9.2, 3440.0], [9.3, 3443.0], [9.4, 3452.0], [9.5, 3475.0], [9.6, 3495.0], [9.7, 3498.0], [9.8, 3513.0], [9.9, 3516.0], [10.0, 3520.0], [10.1, 3521.0], [10.2, 3534.0], [10.3, 3540.0], [10.4, 3549.0], [10.5, 3564.0], [10.6, 3567.0], [10.7, 3569.0], [10.8, 3604.0], [10.9, 3622.0], [11.0, 3657.0], [11.1, 3681.0], [11.2, 3694.0], [11.3, 3700.0], [11.4, 3749.0], [11.5, 3820.0], [11.6, 3838.0], [11.7, 3855.0], [11.8, 3876.0], [11.9, 3914.0], [12.0, 3953.0], [12.1, 3974.0], [12.2, 3981.0], [12.3, 4001.0], [12.4, 4067.0], [12.5, 4121.0], [12.6, 4192.0], [12.7, 4203.0], [12.8, 4232.0], [12.9, 4258.0], [13.0, 4259.0], [13.1, 4283.0], [13.2, 4331.0], [13.3, 4405.0], [13.4, 4440.0], [13.5, 4453.0], [13.6, 4466.0], [13.7, 4472.0], [13.8, 4488.0], [13.9, 4558.0], [14.0, 4593.0], [14.1, 4637.0], [14.2, 4656.0], [14.3, 4671.0], [14.4, 4689.0], [14.5, 4719.0], [14.6, 4722.0], [14.7, 4755.0], [14.8, 4770.0], [14.9, 4791.0], [15.0, 4814.0], [15.1, 4841.0], [15.2, 4847.0], [15.3, 4862.0], [15.4, 4865.0], [15.5, 4873.0], [15.6, 4883.0], [15.7, 4891.0], [15.8, 4893.0], [15.9, 4923.0], [16.0, 4938.0], [16.1, 4940.0], [16.2, 4958.0], [16.3, 4969.0], [16.4, 4972.0], [16.5, 5011.0], [16.6, 5042.0], [16.7, 5111.0], [16.8, 5126.0], [16.9, 5129.0], [17.0, 5145.0], [17.1, 5153.0], [17.2, 5158.0], [17.3, 5193.0], [17.4, 5197.0], [17.5, 5206.0], [17.6, 5218.0], [17.7, 5260.0], [17.8, 5282.0], [17.9, 5303.0], [18.0, 5335.0], [18.1, 5340.0], [18.2, 5377.0], [18.3, 5409.0], [18.4, 5453.0], [18.5, 5463.0], [18.6, 5474.0], [18.7, 5491.0], [18.8, 5506.0], [18.9, 5512.0], [19.0, 5542.0], [19.1, 5546.0], [19.2, 5550.0], [19.3, 5557.0], [19.4, 5563.0], [19.5, 5615.0], [19.6, 5664.0], [19.7, 5700.0], [19.8, 5729.0], [19.9, 5752.0], [20.0, 5799.0], [20.1, 5820.0], [20.2, 5835.0], [20.3, 5850.0], [20.4, 5853.0], [20.5, 5857.0], [20.6, 5863.0], [20.7, 5883.0], [20.8, 5889.0], [20.9, 5891.0], [21.0, 5899.0], [21.1, 5909.0], [21.2, 5922.0], [21.3, 5932.0], [21.4, 5944.0], [21.5, 5949.0], [21.6, 5954.0], [21.7, 5963.0], [21.8, 5986.0], [21.9, 5991.0], [22.0, 5997.0], [22.1, 6019.0], [22.2, 6033.0], [22.3, 6062.0], [22.4, 6068.0], [22.5, 6088.0], [22.6, 6107.0], [22.7, 6124.0], [22.8, 6144.0], [22.9, 6158.0], [23.0, 6163.0], [23.1, 6166.0], [23.2, 6175.0], [23.3, 6176.0], [23.4, 6185.0], [23.5, 6189.0], [23.6, 6198.0], [23.7, 6211.0], [23.8, 6212.0], [23.9, 6225.0], [24.0, 6227.0], [24.1, 6240.0], [24.2, 6250.0], [24.3, 6253.0], [24.4, 6263.0], [24.5, 6276.0], [24.6, 6283.0], [24.7, 6295.0], [24.8, 6303.0], [24.9, 6321.0], [25.0, 6326.0], [25.1, 6349.0], [25.2, 6355.0], [25.3, 6357.0], [25.4, 6368.0], [25.5, 6374.0], [25.6, 6379.0], [25.7, 6380.0], [25.8, 6389.0], [25.9, 6393.0], [26.0, 6398.0], [26.1, 6415.0], [26.2, 6417.0], [26.3, 6429.0], [26.4, 6433.0], [26.5, 6443.0], [26.6, 6447.0], [26.7, 6457.0], [26.8, 6459.0], [26.9, 6465.0], [27.0, 6470.0], [27.1, 6488.0], [27.2, 6494.0], [27.3, 6512.0], [27.4, 6513.0], [27.5, 6527.0], [27.6, 6532.0], [27.7, 6546.0], [27.8, 6555.0], [27.9, 6563.0], [28.0, 6575.0], [28.1, 6584.0], [28.2, 6610.0], [28.3, 6613.0], [28.4, 6614.0], [28.5, 6618.0], [28.6, 6623.0], [28.7, 6632.0], [28.8, 6637.0], [28.9, 6640.0], [29.0, 6648.0], [29.1, 6656.0], [29.2, 6661.0], [29.3, 6664.0], [29.4, 6668.0], [29.5, 6669.0], [29.6, 6683.0], [29.7, 6690.0], [29.8, 6693.0], [29.9, 6703.0], [30.0, 6709.0], [30.1, 6712.0], [30.2, 6720.0], [30.3, 6726.0], [30.4, 6732.0], [30.5, 6740.0], [30.6, 6743.0], [30.7, 6743.0], [30.8, 6747.0], [30.9, 6750.0], [31.0, 6763.0], [31.1, 6771.0], [31.2, 6773.0], [31.3, 6791.0], [31.4, 6792.0], [31.5, 6803.0], [31.6, 6809.0], [31.7, 6821.0], [31.8, 6831.0], [31.9, 6859.0], [32.0, 6862.0], [32.1, 6864.0], [32.2, 6876.0], [32.3, 6896.0], [32.4, 6899.0], [32.5, 6904.0], [32.6, 6918.0], [32.7, 6921.0], [32.8, 6931.0], [32.9, 6935.0], [33.0, 6943.0], [33.1, 6947.0], [33.2, 6954.0], [33.3, 6970.0], [33.4, 6984.0], [33.5, 6989.0], [33.6, 6997.0], [33.7, 7000.0], [33.8, 7026.0], [33.9, 7027.0], [34.0, 7029.0], [34.1, 7031.0], [34.2, 7036.0], [34.3, 7037.0], [34.4, 7041.0], [34.5, 7049.0], [34.6, 7051.0], [34.7, 7056.0], [34.8, 7060.0], [34.9, 7065.0], [35.0, 7070.0], [35.1, 7073.0], [35.2, 7074.0], [35.3, 7081.0], [35.4, 7091.0], [35.5, 7096.0], [35.6, 7109.0], [35.7, 7115.0], [35.8, 7122.0], [35.9, 7131.0], [36.0, 7136.0], [36.1, 7141.0], [36.2, 7151.0], [36.3, 7158.0], [36.4, 7163.0], [36.5, 7164.0], [36.6, 7169.0], [36.7, 7173.0], [36.8, 7178.0], [36.9, 7185.0], [37.0, 7199.0], [37.1, 7210.0], [37.2, 7226.0], [37.3, 7239.0], [37.4, 7240.0], [37.5, 7264.0], [37.6, 7268.0], [37.7, 7286.0], [37.8, 7292.0], [37.9, 7296.0], [38.0, 7304.0], [38.1, 7324.0], [38.2, 7340.0], [38.3, 7356.0], [38.4, 7357.0], [38.5, 7368.0], [38.6, 7369.0], [38.7, 7375.0], [38.8, 7403.0], [38.9, 7410.0], [39.0, 7443.0], [39.1, 7455.0], [39.2, 7467.0], [39.3, 7471.0], [39.4, 7475.0], [39.5, 7481.0], [39.6, 7482.0], [39.7, 7488.0], [39.8, 7496.0], [39.9, 7519.0], [40.0, 7522.0], [40.1, 7533.0], [40.2, 7544.0], [40.3, 7549.0], [40.4, 7551.0], [40.5, 7553.0], [40.6, 7557.0], [40.7, 7581.0], [40.8, 7592.0], [40.9, 7598.0], [41.0, 7613.0], [41.1, 7652.0], [41.2, 7655.0], [41.3, 7664.0], [41.4, 7687.0], [41.5, 7697.0], [41.6, 7703.0], [41.7, 7712.0], [41.8, 7726.0], [41.9, 7751.0], [42.0, 7753.0], [42.1, 7766.0], [42.2, 7775.0], [42.3, 7788.0], [42.4, 7794.0], [42.5, 7843.0], [42.6, 7851.0], [42.7, 7895.0], [42.8, 7903.0], [42.9, 7912.0], [43.0, 7921.0], [43.1, 7942.0], [43.2, 7960.0], [43.3, 7969.0], [43.4, 7989.0], [43.5, 8000.0], [43.6, 8075.0], [43.7, 8094.0], [43.8, 8099.0], [43.9, 8104.0], [44.0, 8120.0], [44.1, 8136.0], [44.2, 8179.0], [44.3, 8190.0], [44.4, 8271.0], [44.5, 8291.0], [44.6, 8322.0], [44.7, 8331.0], [44.8, 8352.0], [44.9, 8365.0], [45.0, 8385.0], [45.1, 8391.0], [45.2, 8406.0], [45.3, 8435.0], [45.4, 8462.0], [45.5, 8469.0], [45.6, 8473.0], [45.7, 8486.0], [45.8, 8525.0], [45.9, 8539.0], [46.0, 8545.0], [46.1, 8582.0], [46.2, 8621.0], [46.3, 8634.0], [46.4, 8657.0], [46.5, 8661.0], [46.6, 8669.0], [46.7, 8704.0], [46.8, 8706.0], [46.9, 8709.0], [47.0, 8715.0], [47.1, 8720.0], [47.2, 8723.0], [47.3, 8727.0], [47.4, 8741.0], [47.5, 8744.0], [47.6, 8747.0], [47.7, 8756.0], [47.8, 8767.0], [47.9, 8779.0], [48.0, 8808.0], [48.1, 8812.0], [48.2, 8818.0], [48.3, 8825.0], [48.4, 8833.0], [48.5, 8844.0], [48.6, 8845.0], [48.7, 8850.0], [48.8, 8855.0], [48.9, 8863.0], [49.0, 8867.0], [49.1, 8869.0], [49.2, 8883.0], [49.3, 8895.0], [49.4, 8906.0], [49.5, 8911.0], [49.6, 8914.0], [49.7, 8917.0], [49.8, 8927.0], [49.9, 8928.0], [50.0, 8930.0], [50.1, 8936.0], [50.2, 8940.0], [50.3, 8943.0], [50.4, 8952.0], [50.5, 8957.0], [50.6, 8989.0], [50.7, 8999.0], [50.8, 9007.0], [50.9, 9010.0], [51.0, 9014.0], [51.1, 9021.0], [51.2, 9036.0], [51.3, 9042.0], [51.4, 9046.0], [51.5, 9064.0], [51.6, 9082.0], [51.7, 9115.0], [51.8, 9120.0], [51.9, 9131.0], [52.0, 9140.0], [52.1, 9150.0], [52.2, 9155.0], [52.3, 9158.0], [52.4, 9171.0], [52.5, 9176.0], [52.6, 9189.0], [52.7, 9200.0], [52.8, 9221.0], [52.9, 9223.0], [53.0, 9233.0], [53.1, 9240.0], [53.2, 9241.0], [53.3, 9250.0], [53.4, 9257.0], [53.5, 9275.0], [53.6, 9289.0], [53.7, 9305.0], [53.8, 9325.0], [53.9, 9327.0], [54.0, 9329.0], [54.1, 9342.0], [54.2, 9353.0], [54.3, 9356.0], [54.4, 9358.0], [54.5, 9361.0], [54.6, 9363.0], [54.7, 9370.0], [54.8, 9382.0], [54.9, 9383.0], [55.0, 9390.0], [55.1, 9393.0], [55.2, 9397.0], [55.3, 9400.0], [55.4, 9406.0], [55.5, 9416.0], [55.6, 9428.0], [55.7, 9432.0], [55.8, 9435.0], [55.9, 9453.0], [56.0, 9453.0], [56.1, 9465.0], [56.2, 9471.0], [56.3, 9472.0], [56.4, 9496.0], [56.5, 9518.0], [56.6, 9526.0], [56.7, 9529.0], [56.8, 9538.0], [56.9, 9539.0], [57.0, 9545.0], [57.1, 9557.0], [57.2, 9560.0], [57.3, 9566.0], [57.4, 9579.0], [57.5, 9585.0], [57.6, 9598.0], [57.7, 9620.0], [57.8, 9621.0], [57.9, 9627.0], [58.0, 9630.0], [58.1, 9633.0], [58.2, 9637.0], [58.3, 9641.0], [58.4, 9644.0], [58.5, 9648.0], [58.6, 9663.0], [58.7, 9672.0], [58.8, 9688.0], [58.9, 9705.0], [59.0, 9710.0], [59.1, 9715.0], [59.2, 9720.0], [59.3, 9724.0], [59.4, 9727.0], [59.5, 9783.0], [59.6, 9787.0], [59.7, 9812.0], [59.8, 9819.0], [59.9, 9824.0], [60.0, 9840.0], [60.1, 9845.0], [60.2, 9859.0], [60.3, 9870.0], [60.4, 9887.0], [60.5, 9897.0], [60.6, 9919.0], [60.7, 9927.0], [60.8, 9929.0], [60.9, 9931.0], [61.0, 9937.0], [61.1, 9948.0], [61.2, 9957.0], [61.3, 9964.0], [61.4, 9970.0], [61.5, 9976.0], [61.6, 9990.0], [61.7, 10000.0], [61.8, 10004.0], [61.9, 10015.0], [62.0, 10019.0], [62.1, 10025.0], [62.2, 10041.0], [62.3, 10064.0], [62.4, 10068.0], [62.5, 10079.0], [62.6, 10092.0], [62.7, 10097.0], [62.8, 10108.0], [62.9, 10115.0], [63.0, 10118.0], [63.1, 10125.0], [63.2, 10136.0], [63.3, 10140.0], [63.4, 10151.0], [63.5, 10162.0], [63.6, 10175.0], [63.7, 10183.0], [63.8, 10190.0], [63.9, 10192.0], [64.0, 10206.0], [64.1, 10212.0], [64.2, 10219.0], [64.3, 10226.0], [64.4, 10227.0], [64.5, 10233.0], [64.6, 10237.0], [64.7, 10245.0], [64.8, 10258.0], [64.9, 10275.0], [65.0, 10283.0], [65.1, 10292.0], [65.2, 10293.0], [65.3, 10298.0], [65.4, 10299.0], [65.5, 10301.0], [65.6, 10304.0], [65.7, 10306.0], [65.8, 10307.0], [65.9, 10310.0], [66.0, 10311.0], [66.1, 10312.0], [66.2, 10313.0], [66.3, 10319.0], [66.4, 10323.0], [66.5, 10328.0], [66.6, 10331.0], [66.7, 10334.0], [66.8, 10336.0], [66.9, 10337.0], [67.0, 10338.0], [67.1, 10341.0], [67.2, 10341.0], [67.3, 10345.0], [67.4, 10349.0], [67.5, 10351.0], [67.6, 10354.0], [67.7, 10357.0], [67.8, 10360.0], [67.9, 10366.0], [68.0, 10370.0], [68.1, 10382.0], [68.2, 10389.0], [68.3, 10395.0], [68.4, 10399.0], [68.5, 10405.0], [68.6, 10407.0], [68.7, 10410.0], [68.8, 10412.0], [68.9, 10413.0], [69.0, 10417.0], [69.1, 10422.0], [69.2, 10423.0], [69.3, 10426.0], [69.4, 10427.0], [69.5, 10427.0], [69.6, 10428.0], [69.7, 10429.0], [69.8, 10430.0], [69.9, 10436.0], [70.0, 10439.0], [70.1, 10442.0], [70.2, 10448.0], [70.3, 10452.0], [70.4, 10455.0], [70.5, 10455.0], [70.6, 10460.0], [70.7, 10473.0], [70.8, 10477.0], [70.9, 10479.0], [71.0, 10481.0], [71.1, 10487.0], [71.2, 10487.0], [71.3, 10497.0], [71.4, 10498.0], [71.5, 10507.0], [71.6, 10510.0], [71.7, 10530.0], [71.8, 10536.0], [71.9, 10540.0], [72.0, 10542.0], [72.1, 10548.0], [72.2, 10550.0], [72.3, 10556.0], [72.4, 10574.0], [72.5, 10580.0], [72.6, 10586.0], [72.7, 10589.0], [72.8, 10591.0], [72.9, 10604.0], [73.0, 10621.0], [73.1, 10628.0], [73.2, 10630.0], [73.3, 10633.0], [73.4, 10634.0], [73.5, 10635.0], [73.6, 10637.0], [73.7, 10639.0], [73.8, 10642.0], [73.9, 10649.0], [74.0, 10656.0], [74.1, 10658.0], [74.2, 10661.0], [74.3, 10663.0], [74.4, 10664.0], [74.5, 10670.0], [74.6, 10697.0], [74.7, 10707.0], [74.8, 10754.0], [74.9, 10778.0], [75.0, 10792.0], [75.1, 10856.0], [75.2, 10911.0], [75.3, 10922.0], [75.4, 10935.0], [75.5, 10954.0], [75.6, 11001.0], [75.7, 11007.0], [75.8, 11027.0], [75.9, 11044.0], [76.0, 11081.0], [76.1, 11096.0], [76.2, 11151.0], [76.3, 11159.0], [76.4, 11169.0], [76.5, 11171.0], [76.6, 11180.0], [76.7, 11193.0], [76.8, 11203.0], [76.9, 11212.0], [77.0, 11222.0], [77.1, 11244.0], [77.2, 11268.0], [77.3, 11295.0], [77.4, 11299.0], [77.5, 11301.0], [77.6, 11305.0], [77.7, 11311.0], [77.8, 11316.0], [77.9, 11319.0], [78.0, 11324.0], [78.1, 11339.0], [78.2, 11350.0], [78.3, 11359.0], [78.4, 11379.0], [78.5, 11381.0], [78.6, 11397.0], [78.7, 11410.0], [78.8, 11414.0], [78.9, 11420.0], [79.0, 11422.0], [79.1, 11431.0], [79.2, 11443.0], [79.3, 11492.0], [79.4, 11497.0], [79.5, 11514.0], [79.6, 11526.0], [79.7, 11527.0], [79.8, 11535.0], [79.9, 11541.0], [80.0, 11560.0], [80.1, 11568.0], [80.2, 11587.0], [80.3, 11598.0], [80.4, 11630.0], [80.5, 11672.0], [80.6, 11686.0], [80.7, 11698.0], [80.8, 11701.0], [80.9, 11711.0], [81.0, 11716.0], [81.1, 11724.0], [81.2, 11728.0], [81.3, 11752.0], [81.4, 11763.0], [81.5, 11774.0], [81.6, 11780.0], [81.7, 11785.0], [81.8, 11791.0], [81.9, 11802.0], [82.0, 11834.0], [82.1, 11865.0], [82.2, 11872.0], [82.3, 11880.0], [82.4, 11894.0], [82.5, 11900.0], [82.6, 11906.0], [82.7, 11907.0], [82.8, 11914.0], [82.9, 11916.0], [83.0, 11930.0], [83.1, 11938.0], [83.2, 11955.0], [83.3, 11960.0], [83.4, 11966.0], [83.5, 11978.0], [83.6, 11999.0], [83.7, 12000.0], [83.8, 12009.0], [83.9, 12016.0], [84.0, 12023.0], [84.1, 12041.0], [84.2, 12046.0], [84.3, 12068.0], [84.4, 12073.0], [84.5, 12077.0], [84.6, 12089.0], [84.7, 12095.0], [84.8, 12107.0], [84.9, 12131.0], [85.0, 12135.0], [85.1, 12151.0], [85.2, 12170.0], [85.3, 12199.0], [85.4, 12211.0], [85.5, 12213.0], [85.6, 12215.0], [85.7, 12217.0], [85.8, 12267.0], [85.9, 12291.0], [86.0, 12298.0], [86.1, 12318.0], [86.2, 12324.0], [86.3, 12347.0], [86.4, 12370.0], [86.5, 12383.0], [86.6, 12386.0], [86.7, 12399.0], [86.8, 12402.0], [86.9, 12409.0], [87.0, 12423.0], [87.1, 12452.0], [87.2, 12463.0], [87.3, 12478.0], [87.4, 12499.0], [87.5, 12510.0], [87.6, 12512.0], [87.7, 12519.0], [87.8, 12527.0], [87.9, 12537.0], [88.0, 12544.0], [88.1, 12549.0], [88.2, 12556.0], [88.3, 12558.0], [88.4, 12559.0], [88.5, 12561.0], [88.6, 12562.0], [88.7, 12567.0], [88.8, 12570.0], [88.9, 12577.0], [89.0, 12607.0], [89.1, 12620.0], [89.2, 12633.0], [89.3, 12638.0], [89.4, 12651.0], [89.5, 12658.0], [89.6, 12663.0], [89.7, 12673.0], [89.8, 12676.0], [89.9, 12692.0], [90.0, 12709.0], [90.1, 12714.0], [90.2, 12720.0], [90.3, 12721.0], [90.4, 12736.0], [90.5, 12742.0], [90.6, 12749.0], [90.7, 12758.0], [90.8, 12760.0], [90.9, 12772.0], [91.0, 12779.0], [91.1, 12807.0], [91.2, 12813.0], [91.3, 12837.0], [91.4, 12844.0], [91.5, 12868.0], [91.6, 12885.0], [91.7, 12895.0], [91.8, 12907.0], [91.9, 12916.0], [92.0, 12928.0], [92.1, 12930.0], [92.2, 12936.0], [92.3, 12937.0], [92.4, 12947.0], [92.5, 12949.0], [92.6, 12950.0], [92.7, 12955.0], [92.8, 12960.0], [92.9, 12980.0], [93.0, 13023.0], [93.1, 13025.0], [93.2, 13034.0], [93.3, 13058.0], [93.4, 13109.0], [93.5, 13120.0], [93.6, 13123.0], [93.7, 13139.0], [93.8, 13155.0], [93.9, 13164.0], [94.0, 13182.0], [94.1, 13184.0], [94.2, 13189.0], [94.3, 13207.0], [94.4, 13215.0], [94.5, 13226.0], [94.6, 13295.0], [94.7, 13329.0], [94.8, 13383.0], [94.9, 13424.0], [95.0, 13478.0], [95.1, 13610.0], [95.2, 13806.0], [95.3, 13935.0], [95.4, 14025.0], [95.5, 14042.0], [95.6, 14316.0], [95.7, 14457.0], [95.8, 14463.0], [95.9, 14491.0], [96.0, 14519.0], [96.1, 14541.0], [96.2, 14563.0], [96.3, 14637.0], [96.4, 14679.0], [96.5, 14726.0], [96.6, 14758.0], [96.7, 15007.0], [96.8, 15073.0], [96.9, 15290.0], [97.0, 15638.0], [97.1, 15707.0], [97.2, 15796.0], [97.3, 15859.0], [97.4, 15894.0], [97.5, 15922.0], [97.6, 15932.0], [97.7, 16022.0], [97.8, 16025.0], [97.9, 16030.0], [98.0, 16054.0], [98.1, 16200.0], [98.2, 16379.0], [98.3, 16487.0], [98.4, 16522.0], [98.5, 16592.0], [98.6, 16714.0], [98.7, 16886.0], [98.8, 16970.0], [98.9, 17012.0], [99.0, 17343.0], [99.1, 17504.0], [99.2, 17977.0], [99.3, 18440.0], [99.4, 18833.0], [99.5, 18882.0], [99.6, 19038.0], [99.7, 19181.0], [99.8, 20165.0], [99.9, 20679.0]], "isOverall": false, "label": "Access Live TV Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 800.0, "maxY": 60.0, "series": [{"data": [[800.0, 2.0], [900.0, 4.0], [1000.0, 2.0], [1100.0, 4.0], [1200.0, 16.0], [1300.0, 1.0], [1400.0, 14.0], [1500.0, 1.0], [1600.0, 9.0], [1700.0, 6.0], [1800.0, 18.0], [1900.0, 8.0], [2000.0, 5.0], [2100.0, 3.0], [2200.0, 4.0], [2300.0, 3.0], [2400.0, 16.0], [2500.0, 9.0], [2600.0, 7.0], [2700.0, 4.0], [3000.0, 17.0], [3100.0, 13.0], [3200.0, 3.0], [3300.0, 7.0], [3400.0, 19.0], [3500.0, 20.0], [3600.0, 10.0], [3700.0, 3.0], [3800.0, 9.0], [3900.0, 8.0], [4000.0, 3.0], [4100.0, 5.0], [4200.0, 10.0], [4300.0, 2.0], [4500.0, 4.0], [4400.0, 11.0], [4600.0, 8.0], [4700.0, 10.0], [4800.0, 18.0], [4900.0, 13.0], [5000.0, 4.0], [5100.0, 15.0], [5200.0, 9.0], [5300.0, 7.0], [5500.0, 14.0], [5600.0, 4.0], [5400.0, 11.0], [5800.0, 20.0], [5700.0, 7.0], [5900.0, 21.0], [6000.0, 10.0], [6100.0, 21.0], [6200.0, 23.0], [6300.0, 25.0], [6400.0, 25.0], [6500.0, 18.0], [6600.0, 34.0], [6700.0, 32.0], [6800.0, 19.0], [6900.0, 25.0], [7000.0, 37.0], [7100.0, 30.0], [7200.0, 19.0], [7300.0, 16.0], [7400.0, 22.0], [7500.0, 22.0], [7600.0, 12.0], [7700.0, 18.0], [7900.0, 14.0], [7800.0, 7.0], [8000.0, 7.0], [8100.0, 10.0], [8200.0, 5.0], [8300.0, 12.0], [8400.0, 12.0], [8500.0, 8.0], [8600.0, 10.0], [8700.0, 26.0], [8800.0, 27.0], [8900.0, 28.0], [9000.0, 19.0], [9100.0, 20.0], [9200.0, 19.0], [9300.0, 33.0], [9400.0, 23.0], [9500.0, 24.0], [9600.0, 25.0], [9700.0, 16.0], [9900.0, 23.0], [9800.0, 17.0], [10000.0, 21.0], [10100.0, 25.0], [10200.0, 29.0], [10400.0, 60.0], [10500.0, 29.0], [10600.0, 35.0], [10300.0, 60.0], [10700.0, 8.0], [10800.0, 3.0], [10900.0, 8.0], [11000.0, 11.0], [11100.0, 12.0], [11200.0, 15.0], [11300.0, 23.0], [11400.0, 16.0], [11600.0, 9.0], [11700.0, 22.0], [11500.0, 18.0], [11800.0, 12.0], [11900.0, 23.0], [12000.0, 22.0], [12100.0, 12.0], [12200.0, 14.0], [12300.0, 15.0], [12400.0, 13.0], [12500.0, 31.0], [12600.0, 20.0], [12700.0, 22.0], [12900.0, 25.0], [13100.0, 17.0], [12800.0, 13.0], [13000.0, 8.0], [13200.0, 8.0], [13300.0, 5.0], [13400.0, 3.0], [13600.0, 2.0], [13500.0, 1.0], [13800.0, 1.0], [14200.0, 1.0], [14000.0, 3.0], [13900.0, 3.0], [14300.0, 2.0], [14400.0, 6.0], [14500.0, 5.0], [14700.0, 4.0], [14600.0, 4.0], [14900.0, 1.0], [15200.0, 2.0], [15000.0, 3.0], [15500.0, 1.0], [15600.0, 2.0], [15700.0, 3.0], [15800.0, 5.0], [15900.0, 3.0], [16000.0, 8.0], [16100.0, 1.0], [16300.0, 1.0], [16200.0, 2.0], [16800.0, 2.0], [16700.0, 1.0], [16900.0, 3.0], [16500.0, 4.0], [17300.0, 2.0], [16400.0, 2.0], [17000.0, 1.0], [16600.0, 1.0], [17400.0, 1.0], [17500.0, 2.0], [18000.0, 1.0], [17900.0, 1.0], [18400.0, 2.0], [19100.0, 2.0], [18900.0, 1.0], [18800.0, 3.0], [19000.0, 1.0], [19400.0, 1.0], [20100.0, 1.0], [20200.0, 1.0], [20600.0, 1.0], [37400.0, 1.0]], "isOverall": false, "label": "Access Live TV Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 37400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 43.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1957.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 43.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1957.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 967.8725000000014, "minX": 1.57139478E12, "maxY": 967.8725000000014, "series": [{"data": [[1.57139478E12, 967.8725000000014]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139478E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1229.5, "minX": 1.0, "maxY": 37460.0, "series": [{"data": [[2.0, 19447.0], [3.0, 19166.0], [4.0, 20679.0], [5.0, 19038.0], [6.0, 20234.0], [7.0, 20165.0], [8.0, 18440.0], [9.0, 18833.0], [10.0, 18838.0], [11.0, 18882.0], [12.0, 18467.0], [13.0, 18928.0], [14.0, 19181.0], [15.0, 17584.0], [16.0, 16970.0], [17.0, 16838.0], [18.0, 17977.0], [19.0, 17343.0], [20.0, 16487.0], [21.0, 16253.0], [22.0, 16200.0], [23.0, 16522.0], [24.0, 16592.0], [25.0, 17448.0], [26.0, 16576.0], [27.0, 16628.0], [28.0, 18069.0], [29.0, 17012.0], [30.0, 16401.0], [31.0, 16379.0], [33.0, 16939.0], [32.0, 15922.0], [35.0, 16511.0], [34.0, 17315.0], [37.0, 16022.0], [36.0, 16054.0], [39.0, 17504.0], [38.0, 16017.0], [41.0, 15007.0], [40.0, 15671.0], [43.0, 15922.0], [42.0, 15025.0], [45.0, 16973.0], [44.0, 15274.0], [47.0, 16714.0], [46.0, 16886.0], [49.0, 14540.0], [48.0, 14551.0], [51.0, 14637.0], [50.0, 14461.0], [53.0, 14588.5], [55.0, 14847.0], [57.0, 16040.0], [56.0, 16147.0], [61.0, 15826.0], [63.0, 15551.4], [67.0, 15899.0], [66.0, 15894.0], [65.0, 15733.0], [64.0, 15932.0], [71.0, 13385.5], [69.0, 15860.0], [75.0, 15290.0], [74.0, 14563.0], [73.0, 15796.0], [72.0, 13340.0], [79.0, 13226.0], [78.0, 13329.0], [77.0, 15707.0], [76.0, 13317.0], [83.0, 14491.0], [82.0, 13956.0], [81.0, 13182.0], [80.0, 15638.0], [87.0, 13122.0], [86.0, 15536.0], [85.0, 13184.0], [84.0, 13155.0], [91.0, 13295.0], [90.0, 13139.0], [89.0, 13109.0], [88.0, 13123.0], [95.0, 13205.0], [94.0, 13434.0], [93.0, 14929.0], [92.0, 14758.0], [99.0, 13236.0], [98.0, 13199.5], [96.0, 13189.0], [103.0, 13174.0], [102.0, 14316.0], [101.0, 13155.0], [100.0, 13216.0], [107.0, 13111.0], [106.0, 14380.0], [105.0, 14702.5], [111.0, 12990.0], [110.0, 14025.0], [109.0, 14457.0], [108.0, 14658.0], [115.0, 12960.0], [114.0, 12950.0], [113.0, 12754.0], [112.0, 14745.0], [119.0, 12974.0], [117.0, 12746.0], [116.0, 14497.0], [123.0, 12670.0], [122.0, 13935.0], [121.0, 13187.0], [120.0, 13207.0], [127.0, 12638.0], [126.0, 12577.0], [125.0, 13023.0], [124.0, 12635.0], [135.0, 13028.0], [134.0, 12633.0], [133.0, 13091.5], [131.0, 13034.0], [130.0, 12813.0], [129.0, 12674.0], [128.0, 12807.0], [142.0, 12760.0], [141.0, 12749.0], [140.0, 12643.5], [138.0, 12955.0], [137.0, 13059.0], [136.0, 14541.0], [149.0, 12930.0], [148.0, 12709.0], [147.0, 12758.0], [146.0, 12724.0], [144.0, 12997.0], [159.0, 12844.0], [158.0, 13024.5], [156.0, 12673.0], [155.0, 13290.5], [153.0, 12723.25], [167.0, 12922.0], [166.0, 12954.0], [165.0, 12610.0], [164.0, 12808.0], [163.0, 13439.5], [161.0, 12646.0], [160.0, 12967.0], [174.0, 12561.0], [172.0, 12928.0], [171.0, 12930.0], [170.0, 12932.0], [169.0, 12559.0], [168.0, 12562.0], [183.0, 12712.5], [181.0, 12936.0], [180.0, 12927.0], [178.0, 12835.0], [176.0, 12820.0], [190.0, 14027.0], [189.0, 12555.0], [188.0, 12452.0], [187.0, 12556.0], [186.0, 12916.0], [185.0, 12926.5], [199.0, 12524.0], [198.0, 12544.5], [196.0, 12904.0], [195.0, 14519.0], [194.0, 13806.0], [193.0, 12789.0], [192.0, 12568.0], [207.0, 12504.5], [205.0, 13511.0], [204.0, 12873.0], [202.0, 12885.0], [201.0, 12893.5], [215.0, 12720.0], [214.0, 12389.0], [213.0, 11999.0], [212.0, 12475.0], [211.0, 12694.0], [210.0, 12560.0], [209.0, 13537.0], [208.0, 12411.0], [223.0, 12324.0], [222.0, 12609.5], [220.0, 14216.0], [219.0, 12519.0], [217.0, 12736.0], [216.0, 12742.0], [231.0, 12537.0], [230.0, 12980.0], [229.0, 12387.5], [227.0, 12199.0], [226.0, 12095.0], [225.0, 12630.0], [224.0, 12046.0], [238.0, 12460.0], [237.0, 12720.0], [236.0, 12041.0], [235.0, 12843.0], [234.0, 12504.0], [233.0, 12510.0], [232.0, 12544.0], [247.0, 12867.0], [246.0, 12374.0], [245.0, 12712.0], [244.0, 12347.0], [243.0, 12721.0], [242.0, 12279.0], [241.0, 12759.0], [240.0, 12570.0], [254.0, 12135.0], [253.0, 12267.0], [252.0, 11747.0], [251.0, 12314.75], [270.0, 13610.0], [271.0, 12081.0], [269.0, 12651.0], [268.0, 11303.0], [267.0, 11299.0], [266.0, 11305.0], [265.0, 12570.0], [264.0, 11324.0], [263.0, 11951.5], [256.0, 11248.5], [261.0, 11483.4], [285.0, 12534.0], [287.0, 12189.0], [284.0, 13478.0], [275.0, 11960.0], [274.0, 12516.0], [273.0, 12264.5], [283.0, 11938.0], [282.0, 12000.0], [281.0, 12029.0], [279.0, 11958.5], [277.0, 12016.0], [276.0, 12620.0], [291.0, 11916.0], [301.0, 11906.0], [300.0, 11880.0], [290.0, 12549.0], [289.0, 12478.0], [288.0, 12438.0], [299.0, 11151.0], [298.0, 11159.0], [297.0, 12399.0], [295.0, 11728.0], [294.0, 13424.0], [293.0, 12386.0], [292.0, 12367.0], [317.0, 11802.0], [318.0, 12423.0], [316.0, 12607.0], [306.0, 11897.0], [305.0, 12228.0], [304.0, 11805.666666666666], [315.0, 11793.0], [314.0, 11171.0], [313.0, 12404.0], [312.0, 11431.0], [311.0, 12211.0], [310.0, 12383.0], [309.0, 11903.0], [308.0, 11500.5], [334.0, 13164.0], [335.0, 11351.0], [333.0, 12460.0], [323.0, 11193.0], [322.0, 11785.0], [321.0, 11791.0], [320.0, 11715.5], [331.0, 11321.0], [330.0, 11560.0], [329.0, 11558.0], [328.0, 12212.0], [327.0, 11211.0], [326.0, 11203.0], [325.0, 11774.0], [324.0, 11781.0], [350.0, 11359.0], [351.0, 11350.0], [349.0, 12009.0], [348.0, 12170.0], [347.0, 11379.0], [346.0, 11381.0], [345.0, 12772.0], [344.0, 12318.0], [343.0, 12370.0], [337.0, 11521.0], [336.0, 12213.0], [339.0, 11431.0], [338.0, 13136.0], [342.0, 11541.0], [341.0, 12107.0], [340.0, 13120.0], [366.0, 12717.0], [367.0, 12663.0], [365.0, 10530.0], [364.0, 11900.0], [363.0, 11414.0], [362.0, 11785.5], [360.0, 11423.0], [359.0, 12185.0], [353.0, 12131.0], [352.0, 11527.0], [355.0, 10552.0], [354.0, 12572.0], [357.0, 12077.0], [356.0, 11955.0], [382.0, 11979.0], [383.0, 11216.0], [381.0, 10452.0], [380.0, 11316.0], [379.0, 11162.0], [378.0, 12213.0], [377.0, 11159.0], [376.0, 11965.0], [375.0, 11408.0], [369.0, 11775.0], [368.0, 11415.0], [371.0, 11422.0], [370.0, 12026.0], [374.0, 12384.0], [373.0, 11421.0], [372.0, 12402.0], [397.0, 10334.0], [399.0, 10335.0], [396.0, 10306.0], [387.0, 10292.0], [386.0, 10427.0], [385.0, 10323.0], [384.0, 11937.0], [395.0, 10307.0], [394.0, 10310.0], [393.0, 12073.0], [392.0, 10281.0], [391.0, 10283.0], [390.0, 10354.0], [389.0, 10291.0], [388.0, 10292.0], [413.0, 10580.0], [415.0, 11109.0], [412.0, 10578.0], [403.0, 10337.0], [402.0, 10338.0], [401.0, 10342.0], [400.0, 10340.0], [411.0, 11966.0], [410.0, 11056.0], [408.0, 11284.5], [406.0, 10341.0], [405.0, 10331.0], [404.0, 11725.0], [429.0, 11872.0], [431.0, 11625.5], [428.0, 11158.0], [426.0, 11724.0], [425.0, 11880.0], [424.0, 10452.5], [422.0, 10774.0], [421.0, 11862.0], [419.0, 11639.0], [418.0, 11258.5], [416.0, 11716.0], [446.0, 10206.0], [447.0, 11674.0], [445.0, 10412.0], [444.0, 10212.0], [443.0, 10411.0], [442.0, 10407.0], [441.0, 11914.0], [440.0, 11921.0], [439.0, 11261.5], [432.0, 11711.0], [435.0, 10478.0], [434.0, 11897.5], [437.0, 12074.0], [436.0, 10115.0], [462.0, 10233.0], [463.0, 10427.0], [461.0, 11752.0], [460.0, 10423.0], [459.0, 10424.0], [458.0, 10420.0], [457.0, 10427.0], [456.0, 10602.0], [454.0, 11577.0], [450.0, 12000.0], [449.0, 11441.0], [453.0, 11786.0], [452.0, 11455.0], [478.0, 10312.0], [479.0, 11568.0], [477.0, 11370.0], [467.0, 10430.0], [466.0, 11001.0], [465.0, 11598.0], [464.0, 11495.0], [474.0, 11539.0], [473.0, 11497.0], [472.0, 10469.5], [470.0, 10442.0], [469.0, 11501.0], [468.0, 10429.0], [494.0, 12324.0], [495.0, 11514.0], [493.0, 10308.0], [492.0, 11701.0], [491.0, 10589.0], [490.0, 11212.0], [489.0, 10621.0], [488.0, 10542.0], [487.0, 10386.0], [481.0, 12185.0], [480.0, 10162.0], [483.0, 12409.0], [482.0, 10298.0], [486.0, 10140.0], [485.0, 10167.0], [484.0, 11957.0], [509.0, 10454.0], [510.0, 11699.0], [508.0, 10628.0], [499.0, 10150.5], [497.0, 10092.0], [496.0, 10054.0], [506.0, 11327.0], [505.0, 12291.0], [504.0, 11376.5], [502.0, 11339.0], [501.0, 10548.0], [500.0, 11587.0], [538.0, 10721.0], [542.0, 10487.0], [528.0, 10556.0], [530.0, 11380.0], [540.0, 10574.0], [512.0, 10149.0], [514.0, 11755.0], [516.0, 10434.0], [518.0, 11763.0], [526.0, 10498.0], [522.0, 9897.0], [520.0, 11527.0], [534.0, 11189.0], [532.0, 10448.0], [548.0, 11327.0], [570.0, 10934.5], [568.0, 10508.0], [550.0, 12151.0], [546.0, 11233.0], [544.0, 10935.0], [558.0, 11222.0], [556.0, 10064.0], [554.0, 10550.0], [552.0, 10507.0], [566.0, 10361.5], [564.0, 11221.0], [604.0, 10074.0], [606.0, 11686.0], [592.0, 10301.0], [594.0, 9870.0], [596.0, 9727.0], [600.0, 11942.0], [580.0, 10138.5], [578.0, 11301.0], [588.0, 10268.5], [586.0, 11319.0], [584.0, 10382.0], [598.0, 10335.0], [632.0, 11834.0], [636.0, 9929.0], [626.0, 10327.333333333334], [638.0, 10357.0], [634.0, 10954.0], [608.0, 10293.0], [612.0, 10819.666666666666], [614.0, 9928.0], [622.0, 10081.0], [620.0, 10261.0], [618.0, 9981.0], [616.0, 11027.0], [628.0, 10950.0], [668.0, 9630.0], [656.0, 9428.0], [658.0, 10642.0], [660.0, 9949.5], [670.0, 10659.0], [666.0, 9453.0], [664.0, 10183.0], [640.0, 11780.0], [642.0, 10982.0], [644.0, 10911.0], [646.0, 10662.0], [654.0, 10792.0], [652.0, 10922.0], [650.0, 9383.0], [662.0, 10664.0], [700.0, 10540.0], [702.0, 10964.5], [692.0, 10623.0], [688.0, 10637.0], [696.0, 10097.0], [678.0, 10633.0], [676.0, 10639.0], [674.0, 11630.0], [672.0, 10656.0], [686.0, 10630.0], [684.0, 10630.0], [682.0, 10636.0], [680.0, 10634.0], [694.0, 9453.0], [728.0, 10788.0], [720.0, 9415.0], [732.0, 10190.0], [730.0, 10563.0], [718.0, 10480.0], [704.0, 9585.0], [706.0, 9875.0], [710.0, 10718.25], [716.0, 9828.0], [714.0, 10258.0], [726.0, 10481.0], [724.0, 10468.0], [760.0, 10413.0], [766.0, 10400.0], [752.0, 10004.0], [762.0, 10226.0], [736.0, 9724.0], [738.0, 9720.0], [740.0, 10422.0], [742.0, 10428.0], [750.0, 10163.0], [748.0, 10697.0], [744.0, 10622.5], [758.0, 10417.0], [770.0, 10367.0], [784.0, 10405.0], [796.0, 10305.0], [794.0, 10302.0], [768.0, 10389.0], [772.0, 10360.0], [774.0, 10341.0], [782.0, 9398.0], [778.0, 10341.0], [776.0, 10349.0], [790.0, 10445.0], [788.0, 10363.0], [806.0, 10921.0], [816.0, 9682.0], [828.0, 9133.0], [824.0, 8605.0], [804.0, 9465.0], [802.0, 10319.0], [800.0, 10298.0], [814.0, 10817.0], [812.0, 10079.0], [810.0, 9171.0], [808.0, 9242.0], [822.0, 8792.0], [820.0, 9824.0], [856.0, 9021.5], [860.0, 9545.0], [832.0, 9007.0], [854.0, 9684.0], [848.0, 8705.0], [844.0, 8736.0], [842.0, 8714.0], [890.0, 9840.0], [888.0, 8540.0], [872.0, 9428.25], [868.0, 9640.0], [924.0, 9727.333333333332], [920.0, 10226.0], [916.0, 8789.0], [912.0, 9483.0], [908.0, 9615.0], [904.0, 8716.5], [954.0, 9101.666666666666], [956.0, 9976.0], [958.0, 8564.0], [944.0, 9444.0], [928.0, 7912.0], [942.0, 8599.0], [940.0, 9254.666666666666], [938.0, 7942.0], [936.0, 7895.0], [950.0, 8845.5], [948.0, 9328.0], [946.0, 9392.0], [988.0, 7481.5], [990.0, 7471.0], [976.0, 9910.0], [978.0, 8000.0], [980.0, 7481.0], [986.0, 7734.0], [984.0, 9131.0], [966.0, 7992.0], [964.0, 9931.0], [962.0, 9036.0], [960.0, 8910.5], [974.0, 9645.0], [970.0, 8818.0], [968.0, 9723.0], [982.0, 7488.0], [1018.0, 7288.0], [1012.0, 7324.0], [1008.0, 9783.0], [1020.0, 8893.0], [1016.0, 8920.0], [998.0, 8947.0], [996.0, 8927.0], [992.0, 8935.0], [1002.0, 9076.0], [1014.0, 8707.0], [1032.0, 9024.0], [1060.0, 5514.5], [1076.0, 1681.8461538461538], [1072.0, 9579.0], [1024.0, 7304.0], [1052.0, 7921.0], [1044.0, 9042.0], [1040.0, 8929.0], [1068.0, 1232.0], [1064.0, 6037.333333333333], [1056.0, 6010.6], [1080.0, 8911.0], [1136.0, 8957.0], [1144.0, 6984.0], [1120.0, 7288.0], [1124.0, 8472.0], [1128.0, 8780.5], [1132.0, 9361.0], [1100.0, 9471.0], [1096.0, 7741.0], [1092.0, 8477.0], [1088.0, 7557.0], [1116.0, 8225.0], [1112.0, 9050.5], [1108.0, 7553.0], [1104.0, 7432.0], [1208.0, 6659.0], [1212.0, 7960.0], [1184.0, 7596.0], [1188.0, 9186.0], [1192.0, 7166.0], [1196.0, 7051.0], [1204.0, 7464.5], [1200.0, 7142.0], [1152.0, 7348.0], [1156.0, 6864.0], [1160.0, 8045.5], [1180.0, 8900.5], [1176.0, 8291.0], [1172.0, 9021.0], [1168.0, 8479.5], [1272.0, 6970.5], [1276.0, 5106.333333333333], [1248.0, 6896.5], [1252.0, 7268.0], [1260.0, 7331.0], [1268.0, 7023.5], [1264.0, 6997.0], [1228.0, 6656.0], [1224.0, 6623.0], [1220.0, 6723.5], [1244.0, 6640.0], [1240.0, 6998.0], [1232.0, 6693.0], [1292.0, 6814.0], [1280.0, 4294.5], [1308.0, 7073.0], [1304.0, 6644.0], [1300.0, 7060.0], [1328.0, 6656.0], [1288.0, 8193.0], [1284.0, 8835.0], [1324.0, 5178.0], [1320.0, 6244.0], [1316.0, 6613.0], [1312.0, 6494.0], [1332.0, 3767.666666666667], [1340.0, 7036.0], [1336.0, 7438.5], [1356.0, 6108.0], [1352.0, 6923.0], [1392.0, 7164.0], [1396.0, 6270.0], [1400.0, 8087.0], [1404.0, 6525.0], [1376.0, 6176.0], [1372.0, 2904.25], [1364.0, 6720.0], [1360.0, 7281.0], [1344.0, 6572.0], [1348.0, 8435.0], [1388.0, 4217.25], [1384.0, 5041.333333333333], [1420.0, 7063.0], [1464.0, 5856.0], [1408.0, 5752.0], [1436.0, 6852.0], [1432.0, 6862.0], [1416.0, 7911.0], [1412.0, 6805.5], [1456.0, 7216.0], [1460.0, 6512.0], [1468.0, 6771.0], [1424.0, 7703.0], [1428.0, 6554.5], [1452.0, 5303.0], [1444.0, 7287.0], [1448.0, 6518.0], [1528.0, 7206.0], [1532.0, 7163.0], [1492.0, 6417.0], [1496.0, 6690.0], [1500.0, 5011.0], [1472.0, 7551.0], [1476.0, 7533.0], [1504.0, 6355.0], [1508.0, 6712.0], [1512.0, 6418.0], [1524.0, 7240.0], [1520.0, 6668.0], [1484.0, 6492.0], [1536.0, 6393.0], [1540.0, 6555.0], [1564.0, 6240.0], [1560.0, 6740.0], [1556.0, 5664.0], [1552.0, 6073.0], [1584.0, 4860.0], [1548.0, 7029.0], [1596.0, 3485.0], [1580.0, 4639.0], [1576.0, 6308.0], [1572.0, 6788.0], [1568.0, 4678.0], [1592.0, 6020.0], [1588.0, 6068.0], [1608.0, 3481.5], [1660.0, 4264.0], [1600.0, 4431.0], [1604.0, 4448.0], [1648.0, 5883.0], [1652.0, 6129.0], [1620.0, 6357.0], [1616.0, 5557.0], [1628.0, 2126.0], [1632.0, 5799.0], [1636.0, 4661.5], [1640.0, 4121.0], [1644.0, 5114.0], [1656.0, 5906.0], [1672.0, 4462.5], [1720.0, 3520.0], [1688.0, 3962.0], [1684.0, 4392.0], [1692.0, 5932.0], [1700.0, 4054.0], [1704.0, 3883.0], [1708.0, 4469.0], [1724.0, 5165.5], [1696.0, 5889.0], [1716.0, 3604.0], [1712.0, 5495.0], [1676.0, 5418.0], [1728.0, 4592.5], [1740.0, 3823.0], [1788.0, 4843.0], [1732.0, 4471.75], [1756.0, 3024.0], [1752.0, 4259.0], [1748.0, 3026.0], [1744.0, 5543.0], [1760.0, 4293.0], [1764.0, 5194.0], [1768.0, 3113.0], [1772.0, 4972.0], [1784.0, 4624.0], [1780.0, 3221.0], [1776.0, 4737.5], [1848.0, 3531.0], [1852.0, 3492.0], [1824.0, 3449.0], [1828.0, 3726.0], [1832.0, 3138.0], [1844.0, 3439.0], [1840.0, 3100.0], [1804.0, 3552.0], [1800.0, 4593.0], [1796.0, 4720.0], [1792.0, 4791.0], [1820.0, 3428.5], [1816.0, 4226.0], [1812.0, 3495.0], [1808.0, 3564.0], [1864.0, 3012.0], [1872.0, 2564.0], [1868.0, 2727.0], [1860.0, 3132.0], [1884.0, 2572.0], [1880.0, 2416.0], [1876.0, 2438.0], [1896.0, 2464.0], [1892.0, 2492.5], [1888.0, 2500.0], [1037.0, 8126.0], [1073.0, 7580.0], [1033.0, 7790.0], [1029.0, 9274.0], [1053.0, 7368.0], [1041.0, 7519.0], [1077.0, 4254.0], [1069.0, 4230.4], [1065.0, 7382.0], [1061.0, 1413.0], [1057.0, 4233.5], [1085.0, 8713.5], [1081.0, 9541.0], [1145.0, 7169.0], [1121.0, 9397.0], [1149.0, 8954.0], [1129.0, 7155.0], [1133.0, 7726.0], [1141.0, 8228.5], [1101.0, 8486.0], [1093.0, 8440.0], [1109.0, 7546.0], [1105.0, 9453.0], [1201.0, 7589.0], [1213.0, 6669.0], [1185.0, 5389.5], [1189.0, 9176.0], [1193.0, 8075.0], [1197.0, 7092.0], [1153.0, 9289.0], [1157.0, 8241.0], [1165.0, 8069.0], [1181.0, 7115.0], [1177.0, 9233.0], [1173.0, 7046.0], [1169.0, 9257.0], [1225.0, 6794.0], [1265.0, 8928.0], [1273.0, 4372.0], [1277.0, 3458.333333333333], [1253.0, 8525.0], [1257.0, 7438.0], [1221.0, 6749.0], [1217.0, 8054.5], [1245.0, 7245.0], [1237.0, 6795.0], [1293.0, 6596.0], [1341.0, 8545.0], [1309.0, 8712.0], [1305.0, 8748.0], [1301.0, 7058.0], [1297.0, 6927.0], [1289.0, 6941.0], [1285.0, 8365.0], [1281.0, 8863.0], [1321.0, 6409.0], [1317.0, 6617.0], [1313.0, 8389.0], [1325.0, 8634.0], [1333.0, 7522.0], [1397.0, 5944.0], [1357.0, 6465.0], [1353.0, 6283.0], [1393.0, 6433.0], [1401.0, 5700.0], [1405.0, 6935.0], [1377.0, 6326.0], [1381.0, 6875.5], [1369.0, 7581.5], [1365.0, 7552.0], [1361.0, 6379.0], [1373.0, 6827.0], [1345.0, 8463.0], [1349.0, 6743.0], [1389.0, 3769.666666666667], [1413.0, 6212.0], [1409.0, 3340.0], [1437.0, 6176.0], [1433.0, 6388.0], [1417.0, 7027.0], [1421.0, 6323.0], [1457.0, 7652.0], [1465.0, 7605.0], [1425.0, 1918.0], [1429.0, 3796.5], [1453.0, 7679.0], [1441.0, 6847.0], [1445.0, 7753.0], [1449.0, 7687.0], [1501.0, 5729.0], [1489.0, 7462.5], [1493.0, 5453.0], [1497.0, 6397.0], [1477.0, 6918.0], [1481.0, 5698.5], [1505.0, 7369.0], [1509.0, 7346.0], [1517.0, 7234.0], [1533.0, 6253.0], [1529.0, 6227.0], [1525.0, 4993.0], [1521.0, 7264.0], [1485.0, 6371.0], [1549.0, 6460.0], [1585.0, 6164.0], [1537.0, 5157.0], [1541.0, 6459.0], [1565.0, 5135.0], [1561.0, 6877.0], [1553.0, 6734.0], [1545.0, 6812.0], [1597.0, 3702.5], [1581.0, 6062.0], [1577.0, 5922.0], [1569.0, 6166.0], [1593.0, 5552.0], [1589.0, 6088.0], [1605.0, 4883.0], [1649.0, 5127.0], [1629.0, 3977.5], [1613.0, 5558.0], [1609.0, 5820.0], [1625.0, 5134.0], [1621.0, 4453.0], [1617.0, 5892.0], [1633.0, 6250.0], [1637.0, 5126.0], [1641.0, 5111.0], [1645.0, 5282.0], [1661.0, 4259.0], [1657.0, 3749.0], [1669.0, 5942.5], [1673.0, 1900.0], [1681.0, 5663.0], [1689.0, 3694.0], [1693.0, 5912.0], [1665.0, 4880.5], [1701.0, 5857.0], [1705.0, 3995.0], [1709.0, 3377.0], [1697.0, 3876.0], [1721.0, 3694.0], [1717.0, 5632.0], [1713.0, 3549.0], [1677.0, 5999.0], [1733.0, 3981.0], [1737.0, 3920.0], [1729.0, 5106.333333333333], [1757.0, 5260.0], [1753.0, 3028.0], [1749.0, 4873.0], [1745.0, 3006.0], [1741.0, 3911.2], [1761.0, 5206.0], [1765.0, 5153.0], [1769.0, 3124.0], [1773.0, 4766.0], [1789.0, 4656.0], [1785.0, 4862.0], [1781.0, 4909.0], [1777.0, 4637.0], [1849.0, 3518.0], [1825.0, 3440.0], [1829.0, 3681.0], [1837.0, 3379.0], [1853.0, 3181.0], [1841.0, 3090.0], [1805.0, 4503.0], [1801.0, 3513.0], [1797.0, 4722.0], [1793.0, 4784.0], [1821.0, 3424.0], [1817.0, 4192.0], [1813.0, 3452.0], [1809.0, 4184.0], [1861.0, 3103.0], [1893.0, 2479.0], [1873.0, 2509.6666666666665], [1869.0, 2716.0], [1865.0, 2786.0], [1857.0, 3348.0], [1885.0, 2558.0], [1881.0, 2574.0], [1877.0, 2614.0], [541.0, 10497.0], [543.0, 11593.0], [529.0, 10312.0], [531.0, 10549.0], [539.0, 11609.0], [527.0, 11200.0], [513.0, 10442.0], [515.0, 10436.0], [517.0, 10428.0], [519.0, 10423.0], [525.0, 10180.0], [523.0, 11527.0], [521.0, 10333.0], [535.0, 10536.0], [533.0, 10458.0], [551.0, 10460.0], [573.0, 10474.5], [575.0, 10236.0], [571.0, 10521.0], [549.0, 10510.0], [557.0, 12104.0], [555.0, 11233.0], [553.0, 12133.0], [567.0, 10108.0], [563.0, 11749.5], [605.0, 10015.0], [607.0, 11081.0], [593.0, 9757.5], [595.0, 11311.0], [597.0, 10041.0], [603.0, 10312.0], [601.0, 10337.0], [583.0, 10938.5], [581.0, 11443.0], [577.0, 11288.5], [585.0, 10570.0], [599.0, 10034.0], [633.0, 9948.0], [639.0, 10245.0], [637.0, 9472.0], [635.0, 9937.0], [623.0, 9927.0], [609.0, 10224.0], [613.0, 10215.0], [615.0, 9990.0], [619.0, 11169.0], [617.0, 10872.0], [631.0, 10488.666666666666], [669.0, 10670.0], [671.0, 10658.0], [657.0, 9848.0], [661.0, 10666.0], [667.0, 10670.0], [665.0, 10652.0], [655.0, 11179.0], [643.0, 9325.0], [645.0, 10661.0], [647.0, 9787.0], [653.0, 9468.0], [651.0, 10219.0], [649.0, 10208.5], [663.0, 10658.0], [699.0, 10432.666666666666], [703.0, 10381.0], [691.0, 10375.5], [689.0, 10630.0], [679.0, 10649.0], [677.0, 10635.0], [675.0, 10642.0], [673.0, 9382.0], [687.0, 10639.0], [685.0, 10628.0], [683.0, 10068.0], [681.0, 10643.0], [695.0, 11350.0], [693.0, 10621.0], [731.0, 10439.0], [733.0, 10428.0], [735.0, 9871.5], [723.0, 10090.5], [721.0, 10477.0], [705.0, 11171.0], [711.0, 9964.0], [717.0, 10487.0], [715.0, 11367.0], [713.0, 10037.0], [727.0, 9240.0], [725.0, 10487.0], [761.0, 10019.0], [767.0, 10409.0], [753.0, 9430.0], [765.0, 10035.333333333334], [751.0, 10427.0], [737.0, 9115.0], [739.0, 8867.0], [741.0, 10412.0], [747.0, 10324.5], [745.0, 10414.0], [759.0, 9400.0], [757.0, 10088.0], [755.0, 10151.5], [793.0, 9924.5], [797.0, 10304.0], [799.0, 9513.0], [787.0, 10210.5], [785.0, 10323.0], [795.0, 10306.0], [783.0, 10326.0], [769.0, 9352.0], [771.0, 10140.0], [773.0, 10349.0], [781.0, 9869.5], [779.0, 10337.0], [777.0, 8999.0], [791.0, 9991.0], [789.0, 10455.0], [807.0, 10025.0], [827.0, 8958.666666666666], [819.0, 9194.0], [829.0, 9812.0], [831.0, 9233.0], [817.0, 10003.0], [805.0, 8914.0], [803.0, 10318.0], [801.0, 10328.0], [815.0, 10634.0], [813.0, 9250.0], [811.0, 10243.0], [809.0, 9957.0], [821.0, 9327.0], [839.0, 9398.666666666666], [859.0, 9672.0], [837.0, 10000.0], [835.0, 9909.0], [833.0, 8879.0], [851.0, 8749.0], [849.0, 8905.0], [845.0, 9958.0], [895.0, 9212.75], [891.0, 9552.0], [879.0, 9987.714285714284], [865.0, 9339.857142857143], [903.0, 9293.0], [925.0, 8720.0], [927.0, 9037.5], [917.0, 10237.0], [911.0, 8893.5], [897.0, 8724.0], [909.0, 9342.0], [907.0, 9243.666666666666], [905.0, 9223.0], [955.0, 9824.0], [947.0, 10004.0], [943.0, 8007.0], [933.0, 9930.0], [941.0, 9566.0], [939.0, 9274.0], [937.0, 9416.0], [951.0, 8120.0], [945.0, 7751.0], [985.0, 9044.0], [991.0, 9235.0], [977.0, 9435.0], [979.0, 7455.0], [981.0, 7475.0], [989.0, 7966.0], [967.0, 9432.0], [965.0, 8859.0], [963.0, 9397.0], [975.0, 7652.0], [973.0, 9365.5], [971.0, 8322.0], [969.0, 8940.0], [983.0, 7484.0], [997.0, 7826.0], [1021.0, 8883.0], [1023.0, 9441.0], [1011.0, 8891.5], [1009.0, 9641.0], [995.0, 8548.5], [993.0, 7549.0], [1007.0, 8042.0], [1005.0, 9280.0], [1003.0, 8915.0], [1001.0, 8570.666666666666], [1015.0, 7722.0], [1013.0, 9189.0], [1030.0, 9713.0], [1074.0, 9566.0], [1078.0, 5010.0], [1034.0, 8098.0], [1054.0, 1422.6666666666667], [1046.0, 9500.5], [1042.0, 7515.0], [1050.0, 9323.333333333334], [1066.0, 1229.5], [1062.0, 3465.5], [1058.0, 9620.0], [1086.0, 9526.0], [1082.0, 7851.0], [1102.0, 8867.0], [1142.0, 7037.0], [1126.0, 8206.5], [1122.0, 7375.0], [1134.0, 8429.0], [1098.0, 8160.5], [1090.0, 8291.5], [1118.0, 7221.0], [1114.0, 7012.0], [1110.0, 7074.0], [1106.0, 8365.0], [1210.0, 6692.5], [1202.0, 6763.0], [1186.0, 9200.0], [1190.0, 6727.0], [1194.0, 6902.0], [1198.0, 6747.0], [1214.0, 6624.0], [1206.0, 7802.0], [1154.0, 7540.0], [1158.0, 9276.0], [1162.0, 8111.0], [1166.0, 9253.0], [1182.0, 7786.0], [1178.0, 9223.0], [1270.0, 6978.0], [1274.0, 7070.0], [1254.0, 6954.0], [1250.0, 7511.5], [1258.0, 8943.0], [1262.0, 6799.5], [1266.0, 7989.0], [1226.0, 6622.0], [1222.0, 7169.0], [1218.0, 9082.0], [1246.0, 6772.0], [1242.0, 6669.0], [1234.0, 6999.0], [1294.0, 7178.0], [1330.0, 6505.5], [1310.0, 6437.0], [1306.0, 6703.0], [1302.0, 6547.0], [1298.0, 6803.0], [1282.0, 7135.0], [1318.0, 6610.0], [1314.0, 6433.0], [1326.0, 6546.0], [1342.0, 6283.0], [1338.0, 7485.5], [1334.0, 6584.0], [1394.0, 6185.0], [1406.0, 6931.0], [1386.0, 4614.0], [1350.0, 5096.5], [1354.0, 6904.0], [1358.0, 7298.0], [1402.0, 6379.0], [1378.0, 7235.0], [1398.0, 1870.0], [1370.0, 6821.0], [1366.0, 8294.0], [1362.0, 6356.0], [1346.0, 6535.0], [1374.0, 6527.0], [1390.0, 8180.0], [1382.0, 4087.5], [1418.0, 4118.5], [1470.0, 6783.5], [1410.0, 3198.333333333333], [1438.0, 7794.0], [1434.0, 6368.0], [1430.0, 6182.0], [1414.0, 6899.0], [1422.0, 6983.0], [1458.0, 6766.0], [1462.0, 6781.5], [1426.0, 7239.5], [1450.0, 4818.0], [1454.0, 7448.0], [1442.0, 6288.0], [1446.0, 7598.0], [1474.0, 6704.0], [1490.0, 6896.0], [1494.0, 7109.0], [1498.0, 6417.0], [1478.0, 6470.0], [1482.0, 5169.0], [1502.0, 4931.0], [1506.0, 7370.0], [1510.0, 5463.0], [1514.0, 6603.0], [1518.0, 7286.0], [1534.0, 7158.0], [1530.0, 7185.0], [1526.0, 7199.0], [1522.0, 5042.0], [1486.0, 7193.0], [1538.0, 5474.0], [1542.0, 4111.0], [1566.0, 6064.0], [1562.0, 5743.0], [1558.0, 6471.5], [1554.0, 5890.0], [1550.0, 4938.0], [1546.0, 5964.0], [1586.0, 4232.0], [1582.0, 6582.0], [1578.0, 6033.0], [1574.0, 5377.5], [1598.0, 5455.0], [1594.0, 4197.0], [1590.0, 5512.0], [1606.0, 5909.0], [1654.0, 3806.3333333333335], [1602.0, 5710.0], [1630.0, 5815.0], [1614.0, 4331.0], [1610.0, 4864.0], [1650.0, 5997.0], [1626.0, 3503.5], [1618.0, 6380.0], [1634.0, 3966.0], [1638.0, 6212.0], [1642.0, 6175.0], [1646.0, 5129.0], [1662.0, 4488.0], [1658.0, 3806.0], [1666.0, 4565.0], [1722.0, 3539.0], [1686.0, 5956.0], [1682.0, 3672.0], [1690.0, 5944.0], [1670.0, 4440.0], [1694.0, 3940.0], [1702.0, 4052.0], [1706.0, 3424.0], [1710.0, 3432.0], [1698.0, 5880.0], [1718.0, 5377.0], [1714.0, 4660.0], [1674.0, 3570.0], [1786.0, 4847.0], [1738.0, 5558.0], [1758.0, 3042.0], [1754.0, 5308.0], [1750.0, 5193.0], [1746.0, 3012.0], [1762.0, 3062.0], [1766.0, 5083.0], [1770.0, 3125.0], [1774.0, 4958.0], [1790.0, 4805.0], [1782.0, 4893.0], [1778.0, 4940.0], [1742.0, 4001.0], [1854.0, 3384.0], [1830.0, 3657.0], [1826.0, 3433.0], [1834.0, 3135.0], [1838.0, 3097.0], [1850.0, 3516.0], [1846.0, 3527.5], [1842.0, 3087.0], [1806.0, 4283.0], [1802.0, 3567.0], [1798.0, 4472.0], [1794.0, 4466.0], [1822.0, 3440.0], [1818.0, 3402.0], [1814.0, 3456.0], [1810.0, 3520.0], [1858.0, 3246.0], [1870.0, 2494.0], [1866.0, 2545.0], [1862.0, 3072.0], [1886.0, 2542.0], [1882.0, 2585.0], [1878.0, 2610.0], [1874.0, 2638.0], [1894.0, 2474.0], [1031.0, 7357.0], [1075.0, 5391.5], [1039.0, 9665.5], [1035.0, 9010.0], [1027.0, 8473.666666666666], [1051.0, 2439.857142857143], [1047.0, 5100.5], [1043.0, 9046.0], [1071.0, 8672.5], [1067.0, 8404.5], [1063.0, 1247.0], [1059.0, 4468.0], [1087.0, 7701.0], [1083.0, 7403.0], [1079.0, 8539.0], [1147.0, 8027.5], [1123.0, 8895.0], [1131.0, 9337.5], [1135.0, 9353.0], [1143.0, 9326.0], [1139.0, 8509.666666666666], [1099.0, 7131.0], [1091.0, 8473.0], [1107.0, 7079.0], [1215.0, 6648.0], [1187.0, 7103.0], [1191.0, 7556.0], [1195.0, 7655.0], [1199.0, 6712.0], [1211.0, 8102.0], [1207.0, 7070.0], [1183.0, 9219.0], [1155.0, 8271.0], [1175.0, 8073.0], [1171.0, 8054.0], [1279.0, 6689.5], [1271.0, 1655.0], [1251.0, 6637.0], [1255.0, 6613.0], [1259.0, 7071.0], [1263.0, 7927.0], [1231.0, 7934.0], [1227.0, 6708.0], [1223.0, 6995.0], [1243.0, 7903.0], [1239.0, 7979.0], [1291.0, 7989.0], [1311.0, 6252.0], [1307.0, 6513.0], [1303.0, 6714.0], [1299.0, 6563.0], [1295.0, 6377.0], [1283.0, 7969.0], [1331.0, 6696.0], [1323.0, 6435.0], [1319.0, 8669.0], [1315.0, 6429.0], [1327.0, 6740.0], [1343.0, 7081.0], [1339.0, 6295.0], [1355.0, 6473.0], [1351.0, 3647.333333333333], [1395.0, 8147.0], [1399.0, 4472.0], [1403.0, 6457.0], [1407.0, 6158.0], [1379.0, 6189.0], [1371.0, 6263.0], [1367.0, 6556.0], [1363.0, 6215.0], [1375.0, 6321.0], [1347.0, 6374.0], [1391.0, 7474.0], [1387.0, 1848.0], [1419.0, 5932.0], [1439.0, 6303.0], [1435.0, 5949.0], [1431.0, 6389.0], [1415.0, 6791.0], [1423.0, 5687.0], [1459.0, 7625.0], [1463.0, 6872.0], [1467.0, 6696.0], [1455.0, 1939.0], [1451.0, 7049.0], [1471.0, 5512.0], [1443.0, 7766.0], [1479.0, 6447.0], [1503.0, 4961.0], [1483.0, 4488.0], [1491.0, 4299.5], [1495.0, 6959.0], [1499.0, 7410.0], [1475.0, 6688.0], [1535.0, 7141.0], [1507.0, 7356.0], [1511.0, 7340.0], [1515.0, 7026.0], [1519.0, 5239.0], [1531.0, 4971.0], [1527.0, 5202.0], [1523.0, 6443.0], [1487.0, 5367.0], [1539.0, 5145.0], [1595.0, 4893.0], [1567.0, 6809.0], [1563.0, 6211.0], [1559.0, 6390.0], [1555.0, 4940.0], [1551.0, 6985.0], [1547.0, 4955.0], [1543.0, 6204.0], [1587.0, 3956.0], [1599.0, 6468.0], [1583.0, 6709.0], [1579.0, 6107.0], [1571.0, 6640.0], [1591.0, 6144.0], [1603.0, 5986.0], [1651.0, 5153.0], [1631.0, 5786.0], [1607.0, 4871.0], [1615.0, 6276.0], [1611.0, 5949.0], [1623.0, 6353.5], [1619.0, 5533.0], [1627.0, 5853.0], [1663.0, 5217.0], [1639.0, 6188.0], [1643.0, 6171.0], [1647.0, 5400.0], [1659.0, 4246.0], [1655.0, 3700.0], [1719.0, 3498.0], [1691.0, 4831.0], [1695.0, 5899.0], [1667.0, 4472.0], [1703.0, 5827.0], [1711.0, 3475.0], [1699.0, 3953.0], [1715.0, 3569.0], [1679.0, 4782.5], [1675.0, 3615.0], [1735.0, 5337.0], [1779.0, 3201.0], [1759.0, 4203.0], [1755.0, 3027.0], [1751.0, 5335.0], [1747.0, 3027.0], [1791.0, 4814.0], [1763.0, 5197.0], [1767.0, 3094.0], [1771.0, 5035.0], [1783.0, 4689.0], [1855.0, 3372.0], [1847.0, 3540.0], [1827.0, 3838.0], [1831.0, 3146.0], [1835.0, 3401.0], [1839.0, 3096.0], [1807.0, 3569.0], [1803.0, 4405.0], [1799.0, 4671.0], [1795.0, 4719.0], [1823.0, 3443.0], [1815.0, 4258.0], [1811.0, 3511.0], [1859.0, 3137.0], [1867.0, 2747.0], [1887.0, 2259.0], [1871.0, 2560.5], [1863.0, 3025.0], [1883.0, 2578.0], [1879.0, 2593.0], [1875.0, 2630.0], [1895.0, 2419.3333333333335], [1.0, 37460.0]], "isOverall": false, "label": "Access Live TV Page", "isController": false}, {"data": [[967.8725000000014, 8595.923000000006]], "isOverall": false, "label": "Access Live TV Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1896.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7533.333333333333, "minX": 1.57139478E12, "maxY": 262491.36666666664, "series": [{"data": [[1.57139478E12, 262491.36666666664]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57139478E12, 7533.333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139478E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8595.923000000006, "minX": 1.57139478E12, "maxY": 8595.923000000006, "series": [{"data": [[1.57139478E12, 8595.923000000006]], "isOverall": false, "label": "Access Live TV Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139478E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4900.3665, "minX": 1.57139478E12, "maxY": 4900.3665, "series": [{"data": [[1.57139478E12, 4900.3665]], "isOverall": false, "label": "Access Live TV Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139478E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2257.4585000000034, "minX": 1.57139478E12, "maxY": 2257.4585000000034, "series": [{"data": [[1.57139478E12, 2257.4585000000034]], "isOverall": false, "label": "Access Live TV Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139478E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 874.0, "minX": 1.57139478E12, "maxY": 37460.0, "series": [{"data": [[1.57139478E12, 37460.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57139478E12, 874.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57139478E12, 12707.500000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57139478E12, 17342.72]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57139478E12, 13475.799999999992]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139478E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1729.5, "minX": 1.0, "maxY": 37460.0, "series": [{"data": [[146.0, 6768.5], [42.0, 3428.5], [183.0, 9682.0], [11.0, 16592.0], [3.0, 18928.0], [50.0, 2521.0], [201.0, 6946.0], [200.0, 11380.0], [211.0, 10497.0], [52.0, 14393.0], [58.0, 4630.5], [261.0, 8825.0], [4.0, 19306.5], [1.0, 37460.0], [18.0, 8118.5], [74.0, 1729.5], [103.0, 12215.0], [112.0, 5975.0], [7.0, 17706.5], [116.0, 12856.0], [122.0, 4898.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 261.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 570.0, "minX": 1.0, "maxY": 18926.0, "series": [{"data": [[146.0, 2370.5], [42.0, 1947.5], [183.0, 5376.0], [11.0, 5564.0], [3.0, 18926.0], [50.0, 1423.0], [201.0, 2434.0], [200.0, 5942.0], [211.0, 5673.0], [52.0, 12918.5], [58.0, 1573.0], [261.0, 4563.0], [4.0, 5304.5], [1.0, 4779.0], [18.0, 1046.5], [74.0, 570.0], [103.0, 2378.0], [112.0, 3995.5], [7.0, 14496.5], [116.0, 12508.0], [122.0, 2367.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 261.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.57139478E12, "maxY": 33.333333333333336, "series": [{"data": [[1.57139478E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139478E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.57139478E12, "maxY": 33.333333333333336, "series": [{"data": [[1.57139478E12, 33.333333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139478E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.57139478E12, "maxY": 33.333333333333336, "series": [{"data": [[1.57139478E12, 33.333333333333336]], "isOverall": false, "label": "Access Live TV Page-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139478E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.57139478E12, "maxY": 33.333333333333336, "series": [{"data": [[1.57139478E12, 33.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139478E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

