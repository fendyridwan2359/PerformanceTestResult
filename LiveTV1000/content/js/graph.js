/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1938.0, "minX": 0.0, "maxY": 14683.0, "series": [{"data": [[0.0, 1938.0], [0.1, 2110.0], [0.2, 2228.0], [0.3, 2228.0], [0.4, 2261.0], [0.5, 2272.0], [0.6, 2284.0], [0.7, 2313.0], [0.8, 2317.0], [0.9, 2334.0], [1.0, 2376.0], [1.1, 2377.0], [1.2, 2381.0], [1.3, 2386.0], [1.4, 2386.0], [1.5, 2401.0], [1.6, 2428.0], [1.7, 2458.0], [1.8, 2469.0], [1.9, 2472.0], [2.0, 2493.0], [2.1, 2493.0], [2.2, 2495.0], [2.3, 2560.0], [2.4, 2561.0], [2.5, 2569.0], [2.6, 2573.0], [2.7, 2590.0], [2.8, 2597.0], [2.9, 2602.0], [3.0, 2602.0], [3.1, 2607.0], [3.2, 2610.0], [3.3, 2613.0], [3.4, 2613.0], [3.5, 2629.0], [3.6, 2630.0], [3.7, 2636.0], [3.8, 2639.0], [3.9, 2648.0], [4.0, 2674.0], [4.1, 2683.0], [4.2, 2685.0], [4.3, 2691.0], [4.4, 2759.0], [4.5, 2781.0], [4.6, 2790.0], [4.7, 2808.0], [4.8, 2817.0], [4.9, 2824.0], [5.0, 2856.0], [5.1, 2861.0], [5.2, 2882.0], [5.3, 2905.0], [5.4, 2905.0], [5.5, 2930.0], [5.6, 2944.0], [5.7, 2952.0], [5.8, 2972.0], [5.9, 3002.0], [6.0, 3026.0], [6.1, 3060.0], [6.2, 3093.0], [6.3, 3196.0], [6.4, 3215.0], [6.5, 3224.0], [6.6, 3227.0], [6.7, 3231.0], [6.8, 3232.0], [6.9, 3244.0], [7.0, 3254.0], [7.1, 3264.0], [7.2, 3264.0], [7.3, 3269.0], [7.4, 3293.0], [7.5, 3353.0], [7.6, 3358.0], [7.7, 3391.0], [7.8, 3391.0], [7.9, 3422.0], [8.0, 3436.0], [8.1, 3460.0], [8.2, 3460.0], [8.3, 3472.0], [8.4, 3482.0], [8.5, 3489.0], [8.6, 3506.0], [8.7, 3508.0], [8.8, 3511.0], [8.9, 3518.0], [9.0, 3521.0], [9.1, 3521.0], [9.2, 3525.0], [9.3, 3533.0], [9.4, 3538.0], [9.5, 3543.0], [9.6, 3545.0], [9.7, 3546.0], [9.8, 3566.0], [9.9, 3571.0], [10.0, 3579.0], [10.1, 3583.0], [10.2, 3597.0], [10.3, 3612.0], [10.4, 3613.0], [10.5, 3615.0], [10.6, 3626.0], [10.7, 3629.0], [10.8, 3630.0], [10.9, 3634.0], [11.0, 3636.0], [11.1, 3644.0], [11.2, 3644.0], [11.3, 3645.0], [11.4, 3655.0], [11.5, 3660.0], [11.6, 3670.0], [11.7, 3676.0], [11.8, 3700.0], [11.9, 3718.0], [12.0, 3723.0], [12.1, 3740.0], [12.2, 3740.0], [12.3, 3744.0], [12.4, 3810.0], [12.5, 3811.0], [12.6, 3813.0], [12.7, 3839.0], [12.8, 3857.0], [12.9, 3868.0], [13.0, 3874.0], [13.1, 3881.0], [13.2, 3887.0], [13.3, 3892.0], [13.4, 3906.0], [13.5, 3908.0], [13.6, 3917.0], [13.7, 3923.0], [13.8, 3925.0], [13.9, 3928.0], [14.0, 3928.0], [14.1, 3934.0], [14.2, 3945.0], [14.3, 3945.0], [14.4, 3951.0], [14.5, 3968.0], [14.6, 3972.0], [14.7, 3975.0], [14.8, 3976.0], [14.9, 3979.0], [15.0, 3983.0], [15.1, 3983.0], [15.2, 3983.0], [15.3, 3983.0], [15.4, 3984.0], [15.5, 3985.0], [15.6, 3988.0], [15.7, 3990.0], [15.8, 3992.0], [15.9, 4036.0], [16.0, 4069.0], [16.1, 4094.0], [16.2, 4102.0], [16.3, 4113.0], [16.4, 4115.0], [16.5, 4121.0], [16.6, 4128.0], [16.7, 4134.0], [16.8, 4143.0], [16.9, 4148.0], [17.0, 4151.0], [17.1, 4151.0], [17.2, 4164.0], [17.3, 4171.0], [17.4, 4179.0], [17.5, 4191.0], [17.6, 4198.0], [17.7, 4204.0], [17.8, 4208.0], [17.9, 4213.0], [18.0, 4214.0], [18.1, 4219.0], [18.2, 4236.0], [18.3, 4243.0], [18.4, 4249.0], [18.5, 4263.0], [18.6, 4267.0], [18.7, 4269.0], [18.8, 4270.0], [18.9, 4270.0], [19.0, 4277.0], [19.1, 4286.0], [19.2, 4286.0], [19.3, 4293.0], [19.4, 4305.0], [19.5, 4306.0], [19.6, 4306.0], [19.7, 4330.0], [19.8, 4334.0], [19.9, 4338.0], [20.0, 4341.0], [20.1, 4348.0], [20.2, 4354.0], [20.3, 4363.0], [20.4, 4370.0], [20.5, 4373.0], [20.6, 4373.0], [20.7, 4376.0], [20.8, 4379.0], [20.9, 4389.0], [21.0, 4391.0], [21.1, 4392.0], [21.2, 4392.0], [21.3, 4399.0], [21.4, 4403.0], [21.5, 4411.0], [21.6, 4418.0], [21.7, 4418.0], [21.8, 4421.0], [21.9, 4427.0], [22.0, 4428.0], [22.1, 4429.0], [22.2, 4440.0], [22.3, 4440.0], [22.4, 4442.0], [22.5, 4446.0], [22.6, 4448.0], [22.7, 4451.0], [22.8, 4457.0], [22.9, 4457.0], [23.0, 4458.0], [23.1, 4458.0], [23.2, 4459.0], [23.3, 4468.0], [23.4, 4486.0], [23.5, 4488.0], [23.6, 4489.0], [23.7, 4490.0], [23.8, 4498.0], [23.9, 4500.0], [24.0, 4500.0], [24.1, 4502.0], [24.2, 4508.0], [24.3, 4513.0], [24.4, 4513.0], [24.5, 4514.0], [24.6, 4515.0], [24.7, 4522.0], [24.8, 4523.0], [24.9, 4533.0], [25.0, 4541.0], [25.1, 4544.0], [25.2, 4544.0], [25.3, 4545.0], [25.4, 4547.0], [25.5, 4552.0], [25.6, 4554.0], [25.7, 4555.0], [25.8, 4556.0], [25.9, 4558.0], [26.0, 4564.0], [26.1, 4566.0], [26.2, 4567.0], [26.3, 4568.0], [26.4, 4572.0], [26.5, 4575.0], [26.6, 4585.0], [26.7, 4586.0], [26.8, 4588.0], [26.9, 4589.0], [27.0, 4589.0], [27.1, 4592.0], [27.2, 4593.0], [27.3, 4594.0], [27.4, 4597.0], [27.5, 4599.0], [27.6, 4604.0], [27.7, 4605.0], [27.8, 4611.0], [27.9, 4626.0], [28.0, 4626.0], [28.1, 4627.0], [28.2, 4635.0], [28.3, 4644.0], [28.4, 4649.0], [28.5, 4659.0], [28.6, 4675.0], [28.7, 4679.0], [28.8, 4681.0], [28.9, 4695.0], [29.0, 4696.0], [29.1, 4696.0], [29.2, 4697.0], [29.3, 4701.0], [29.4, 4707.0], [29.5, 4710.0], [29.6, 4715.0], [29.7, 4727.0], [29.8, 4730.0], [29.9, 4731.0], [30.0, 4737.0], [30.1, 4749.0], [30.2, 4752.0], [30.3, 4759.0], [30.4, 4761.0], [30.5, 4762.0], [30.6, 4763.0], [30.7, 4765.0], [30.8, 4766.0], [30.9, 4779.0], [31.0, 4783.0], [31.1, 4785.0], [31.2, 4788.0], [31.3, 4798.0], [31.4, 4801.0], [31.5, 4802.0], [31.6, 4804.0], [31.7, 4805.0], [31.8, 4811.0], [31.9, 4814.0], [32.0, 4819.0], [32.1, 4822.0], [32.2, 4824.0], [32.3, 4827.0], [32.4, 4829.0], [32.5, 4830.0], [32.6, 4832.0], [32.7, 4834.0], [32.8, 4834.0], [32.9, 4838.0], [33.0, 4844.0], [33.1, 4845.0], [33.2, 4845.0], [33.3, 4857.0], [33.4, 4859.0], [33.5, 4867.0], [33.6, 4870.0], [33.7, 4871.0], [33.8, 4878.0], [33.9, 4885.0], [34.0, 4887.0], [34.1, 4892.0], [34.2, 4910.0], [34.3, 4918.0], [34.4, 4923.0], [34.5, 4926.0], [34.6, 4937.0], [34.7, 4938.0], [34.8, 4938.0], [34.9, 4940.0], [35.0, 4941.0], [35.1, 4942.0], [35.2, 4942.0], [35.3, 4944.0], [35.4, 4951.0], [35.5, 4963.0], [35.6, 4973.0], [35.7, 4973.0], [35.8, 4974.0], [35.9, 4980.0], [36.0, 4983.0], [36.1, 4983.0], [36.2, 4985.0], [36.3, 5007.0], [36.4, 5014.0], [36.5, 5024.0], [36.6, 5033.0], [36.7, 5033.0], [36.8, 5037.0], [36.9, 5037.0], [37.0, 5052.0], [37.1, 5054.0], [37.2, 5055.0], [37.3, 5056.0], [37.4, 5071.0], [37.5, 5074.0], [37.6, 5078.0], [37.7, 5080.0], [37.8, 5090.0], [37.9, 5099.0], [38.0, 5109.0], [38.1, 5143.0], [38.2, 5143.0], [38.3, 5146.0], [38.4, 5150.0], [38.5, 5159.0], [38.6, 5174.0], [38.7, 5176.0], [38.8, 5176.0], [38.9, 5176.0], [39.0, 5180.0], [39.1, 5181.0], [39.2, 5182.0], [39.3, 5183.0], [39.4, 5188.0], [39.5, 5193.0], [39.6, 5195.0], [39.7, 5198.0], [39.8, 5205.0], [39.9, 5217.0], [40.0, 5217.0], [40.1, 5217.0], [40.2, 5218.0], [40.3, 5219.0], [40.4, 5229.0], [40.5, 5229.0], [40.6, 5239.0], [40.7, 5243.0], [40.8, 5245.0], [40.9, 5245.0], [41.0, 5248.0], [41.1, 5252.0], [41.2, 5258.0], [41.3, 5258.0], [41.4, 5260.0], [41.5, 5264.0], [41.6, 5265.0], [41.7, 5267.0], [41.8, 5273.0], [41.9, 5278.0], [42.0, 5279.0], [42.1, 5284.0], [42.2, 5284.0], [42.3, 5286.0], [42.4, 5289.0], [42.5, 5290.0], [42.6, 5293.0], [42.7, 5298.0], [42.8, 5300.0], [42.9, 5305.0], [43.0, 5308.0], [43.1, 5310.0], [43.2, 5314.0], [43.3, 5316.0], [43.4, 5324.0], [43.5, 5328.0], [43.6, 5330.0], [43.7, 5338.0], [43.8, 5349.0], [43.9, 5356.0], [44.0, 5357.0], [44.1, 5364.0], [44.2, 5370.0], [44.3, 5375.0], [44.4, 5377.0], [44.5, 5379.0], [44.6, 5387.0], [44.7, 5389.0], [44.8, 5401.0], [44.9, 5405.0], [45.0, 5411.0], [45.1, 5412.0], [45.2, 5413.0], [45.3, 5432.0], [45.4, 5433.0], [45.5, 5436.0], [45.6, 5439.0], [45.7, 5443.0], [45.8, 5445.0], [45.9, 5455.0], [46.0, 5464.0], [46.1, 5464.0], [46.2, 5464.0], [46.3, 5469.0], [46.4, 5475.0], [46.5, 5475.0], [46.6, 5478.0], [46.7, 5485.0], [46.8, 5489.0], [46.9, 5490.0], [47.0, 5509.0], [47.1, 5513.0], [47.2, 5516.0], [47.3, 5529.0], [47.4, 5537.0], [47.5, 5540.0], [47.6, 5542.0], [47.7, 5545.0], [47.8, 5558.0], [47.9, 5565.0], [48.0, 5574.0], [48.1, 5577.0], [48.2, 5582.0], [48.3, 5587.0], [48.4, 5594.0], [48.5, 5603.0], [48.6, 5607.0], [48.7, 5609.0], [48.8, 5610.0], [48.9, 5610.0], [49.0, 5620.0], [49.1, 5622.0], [49.2, 5624.0], [49.3, 5630.0], [49.4, 5630.0], [49.5, 5631.0], [49.6, 5651.0], [49.7, 5660.0], [49.8, 5662.0], [49.9, 5662.0], [50.0, 5664.0], [50.1, 5664.0], [50.2, 5664.0], [50.3, 5674.0], [50.4, 5674.0], [50.5, 5679.0], [50.6, 5680.0], [50.7, 5688.0], [50.8, 5688.0], [50.9, 5690.0], [51.0, 5692.0], [51.1, 5693.0], [51.2, 5696.0], [51.3, 5697.0], [51.4, 5702.0], [51.5, 5704.0], [51.6, 5704.0], [51.7, 5705.0], [51.8, 5706.0], [51.9, 5708.0], [52.0, 5709.0], [52.1, 5709.0], [52.2, 5709.0], [52.3, 5713.0], [52.4, 5714.0], [52.5, 5714.0], [52.6, 5716.0], [52.7, 5719.0], [52.8, 5723.0], [52.9, 5726.0], [53.0, 5728.0], [53.1, 5736.0], [53.2, 5740.0], [53.3, 5740.0], [53.4, 5741.0], [53.5, 5743.0], [53.6, 5744.0], [53.7, 5745.0], [53.8, 5746.0], [53.9, 5746.0], [54.0, 5746.0], [54.1, 5746.0], [54.2, 5748.0], [54.3, 5748.0], [54.4, 5750.0], [54.5, 5751.0], [54.6, 5753.0], [54.7, 5755.0], [54.8, 5756.0], [54.9, 5759.0], [55.0, 5761.0], [55.1, 5766.0], [55.2, 5769.0], [55.3, 5780.0], [55.4, 5782.0], [55.5, 5783.0], [55.6, 5785.0], [55.7, 5785.0], [55.8, 5786.0], [55.9, 5790.0], [56.0, 5790.0], [56.1, 5790.0], [56.2, 5791.0], [56.3, 5793.0], [56.4, 5795.0], [56.5, 5795.0], [56.6, 5795.0], [56.7, 5800.0], [56.8, 5800.0], [56.9, 5801.0], [57.0, 5802.0], [57.1, 5804.0], [57.2, 5806.0], [57.3, 5807.0], [57.4, 5809.0], [57.5, 5812.0], [57.6, 5813.0], [57.7, 5820.0], [57.8, 5822.0], [57.9, 5825.0], [58.0, 5826.0], [58.1, 5829.0], [58.2, 5832.0], [58.3, 5835.0], [58.4, 5837.0], [58.5, 5838.0], [58.6, 5842.0], [58.7, 5845.0], [58.8, 5848.0], [58.9, 5855.0], [59.0, 5870.0], [59.1, 5871.0], [59.2, 5871.0], [59.3, 5884.0], [59.4, 5887.0], [59.5, 5889.0], [59.6, 5890.0], [59.7, 5890.0], [59.8, 5893.0], [59.9, 5895.0], [60.0, 5896.0], [60.1, 5897.0], [60.2, 5903.0], [60.3, 5914.0], [60.4, 5914.0], [60.5, 5916.0], [60.6, 5917.0], [60.7, 5919.0], [60.8, 5923.0], [60.9, 5927.0], [61.0, 5928.0], [61.1, 5929.0], [61.2, 5931.0], [61.3, 5933.0], [61.4, 5937.0], [61.5, 5941.0], [61.6, 5942.0], [61.7, 5944.0], [61.8, 5946.0], [61.9, 5947.0], [62.0, 5948.0], [62.1, 5950.0], [62.2, 5951.0], [62.3, 5954.0], [62.4, 5958.0], [62.5, 5965.0], [62.6, 5972.0], [62.7, 5978.0], [62.8, 5979.0], [62.9, 5979.0], [63.0, 5991.0], [63.1, 5994.0], [63.2, 6005.0], [63.3, 6007.0], [63.4, 6011.0], [63.5, 6019.0], [63.6, 6019.0], [63.7, 6047.0], [63.8, 6063.0], [63.9, 6064.0], [64.0, 6067.0], [64.1, 6072.0], [64.2, 6078.0], [64.3, 6078.0], [64.4, 6079.0], [64.5, 6080.0], [64.6, 6082.0], [64.7, 6085.0], [64.8, 6088.0], [64.9, 6095.0], [65.0, 6095.0], [65.1, 6096.0], [65.2, 6096.0], [65.3, 6097.0], [65.4, 6098.0], [65.5, 6103.0], [65.6, 6103.0], [65.7, 6103.0], [65.8, 6104.0], [65.9, 6107.0], [66.0, 6112.0], [66.1, 6120.0], [66.2, 6120.0], [66.3, 6128.0], [66.4, 6135.0], [66.5, 6136.0], [66.6, 6145.0], [66.7, 6147.0], [66.8, 6148.0], [66.9, 6156.0], [67.0, 6157.0], [67.1, 6158.0], [67.2, 6158.0], [67.3, 6159.0], [67.4, 6163.0], [67.5, 6163.0], [67.6, 6179.0], [67.7, 6189.0], [67.8, 6201.0], [67.9, 6207.0], [68.0, 6216.0], [68.1, 6218.0], [68.2, 6219.0], [68.3, 6227.0], [68.4, 6232.0], [68.5, 6236.0], [68.6, 6236.0], [68.7, 6240.0], [68.8, 6241.0], [68.9, 6244.0], [69.0, 6249.0], [69.1, 6256.0], [69.2, 6256.0], [69.3, 6266.0], [69.4, 6268.0], [69.5, 6270.0], [69.6, 6272.0], [69.7, 6272.0], [69.8, 6275.0], [69.9, 6282.0], [70.0, 6284.0], [70.1, 6288.0], [70.2, 6303.0], [70.3, 6303.0], [70.4, 6304.0], [70.5, 6310.0], [70.6, 6315.0], [70.7, 6326.0], [70.8, 6331.0], [70.9, 6331.0], [71.0, 6335.0], [71.1, 6351.0], [71.2, 6363.0], [71.3, 6371.0], [71.4, 6376.0], [71.5, 6379.0], [71.6, 6382.0], [71.7, 6386.0], [71.8, 6388.0], [71.9, 6409.0], [72.0, 6440.0], [72.1, 6444.0], [72.2, 6445.0], [72.3, 6450.0], [72.4, 6463.0], [72.5, 6465.0], [72.6, 6469.0], [72.7, 6473.0], [72.8, 6475.0], [72.9, 6483.0], [73.0, 6486.0], [73.1, 6498.0], [73.2, 6521.0], [73.3, 6524.0], [73.4, 6543.0], [73.5, 6544.0], [73.6, 6547.0], [73.7, 6549.0], [73.8, 6555.0], [73.9, 6563.0], [74.0, 6563.0], [74.1, 6567.0], [74.2, 6571.0], [74.3, 6576.0], [74.4, 6578.0], [74.5, 6593.0], [74.6, 6602.0], [74.7, 6607.0], [74.8, 6615.0], [74.9, 6643.0], [75.0, 6643.0], [75.1, 6652.0], [75.2, 6674.0], [75.3, 6700.0], [75.4, 6711.0], [75.5, 6729.0], [75.6, 6729.0], [75.7, 6738.0], [75.8, 6744.0], [75.9, 6747.0], [76.0, 6753.0], [76.1, 6758.0], [76.2, 6760.0], [76.3, 6762.0], [76.4, 6774.0], [76.5, 6779.0], [76.6, 6784.0], [76.7, 6789.0], [76.8, 6789.0], [76.9, 6800.0], [77.0, 6803.0], [77.1, 6818.0], [77.2, 6822.0], [77.3, 6822.0], [77.4, 6827.0], [77.5, 6843.0], [77.6, 6846.0], [77.7, 6894.0], [77.8, 6896.0], [77.9, 6898.0], [78.0, 6906.0], [78.1, 6911.0], [78.2, 6913.0], [78.3, 6914.0], [78.4, 6918.0], [78.5, 6929.0], [78.6, 6977.0], [78.7, 6978.0], [78.8, 7015.0], [78.9, 7031.0], [79.0, 7050.0], [79.1, 7063.0], [79.2, 7066.0], [79.3, 7077.0], [79.4, 7102.0], [79.5, 7107.0], [79.6, 7113.0], [79.7, 7130.0], [79.8, 7136.0], [79.9, 7139.0], [80.0, 7153.0], [80.1, 7154.0], [80.2, 7156.0], [80.3, 7162.0], [80.4, 7182.0], [80.5, 7183.0], [80.6, 7184.0], [80.7, 7188.0], [80.8, 7191.0], [80.9, 7201.0], [81.0, 7204.0], [81.1, 7206.0], [81.2, 7212.0], [81.3, 7221.0], [81.4, 7251.0], [81.5, 7301.0], [81.6, 7311.0], [81.7, 7312.0], [81.8, 7312.0], [81.9, 7315.0], [82.0, 7325.0], [82.1, 7363.0], [82.2, 7375.0], [82.3, 7377.0], [82.4, 7389.0], [82.5, 7395.0], [82.6, 7404.0], [82.7, 7408.0], [82.8, 7416.0], [82.9, 7428.0], [83.0, 7429.0], [83.1, 7462.0], [83.2, 7466.0], [83.3, 7592.0], [83.4, 7603.0], [83.5, 7614.0], [83.6, 7618.0], [83.7, 7629.0], [83.8, 7636.0], [83.9, 7702.0], [84.0, 7708.0], [84.1, 7724.0], [84.2, 7726.0], [84.3, 7742.0], [84.4, 7763.0], [84.5, 7786.0], [84.6, 7796.0], [84.7, 7819.0], [84.8, 7848.0], [84.9, 7855.0], [85.0, 7861.0], [85.1, 7878.0], [85.2, 7888.0], [85.3, 7953.0], [85.4, 7975.0], [85.5, 7992.0], [85.6, 8064.0], [85.7, 8104.0], [85.8, 8122.0], [85.9, 8129.0], [86.0, 8188.0], [86.1, 8216.0], [86.2, 8272.0], [86.3, 8316.0], [86.4, 8336.0], [86.5, 8367.0], [86.6, 8380.0], [86.7, 8389.0], [86.8, 8430.0], [86.9, 8511.0], [87.0, 8541.0], [87.1, 8552.0], [87.2, 8559.0], [87.3, 8562.0], [87.4, 8565.0], [87.5, 8574.0], [87.6, 8605.0], [87.7, 8615.0], [87.8, 8647.0], [87.9, 8666.0], [88.0, 8682.0], [88.1, 8696.0], [88.2, 8720.0], [88.3, 8769.0], [88.4, 8770.0], [88.5, 8812.0], [88.6, 8814.0], [88.7, 8816.0], [88.8, 8825.0], [88.9, 8835.0], [89.0, 8844.0], [89.1, 8851.0], [89.2, 8856.0], [89.3, 8916.0], [89.4, 8935.0], [89.5, 8991.0], [89.6, 9020.0], [89.7, 9049.0], [89.8, 9050.0], [89.9, 9068.0], [90.0, 9069.0], [90.1, 9077.0], [90.2, 9084.0], [90.3, 9119.0], [90.4, 9124.0], [90.5, 9133.0], [90.6, 9137.0], [90.7, 9141.0], [90.8, 9152.0], [90.9, 9169.0], [91.0, 9179.0], [91.1, 9196.0], [91.2, 9205.0], [91.3, 9213.0], [91.4, 9245.0], [91.5, 9254.0], [91.6, 9257.0], [91.7, 9257.0], [91.8, 9276.0], [91.9, 9284.0], [92.0, 9287.0], [92.1, 9290.0], [92.2, 9298.0], [92.3, 9299.0], [92.4, 9328.0], [92.5, 9342.0], [92.6, 9357.0], [92.7, 9362.0], [92.8, 9367.0], [92.9, 9368.0], [93.0, 9377.0], [93.1, 9405.0], [93.2, 9406.0], [93.3, 9407.0], [93.4, 9433.0], [93.5, 9442.0], [93.6, 9556.0], [93.7, 9557.0], [93.8, 9575.0], [93.9, 9611.0], [94.0, 9645.0], [94.1, 9720.0], [94.2, 9740.0], [94.3, 9795.0], [94.4, 9816.0], [94.5, 9822.0], [94.6, 9851.0], [94.7, 9859.0], [94.8, 9866.0], [94.9, 9877.0], [95.0, 9881.0], [95.1, 9895.0], [95.2, 9898.0], [95.3, 9936.0], [95.4, 9988.0], [95.5, 9995.0], [95.6, 10017.0], [95.7, 10025.0], [95.8, 10029.0], [95.9, 10042.0], [96.0, 10047.0], [96.1, 10053.0], [96.2, 10067.0], [96.3, 10080.0], [96.4, 10081.0], [96.5, 10086.0], [96.6, 10150.0], [96.7, 10152.0], [96.8, 10253.0], [96.9, 10369.0], [97.0, 10384.0], [97.1, 10391.0], [97.2, 10513.0], [97.3, 10587.0], [97.4, 10617.0], [97.5, 10681.0], [97.6, 10848.0], [97.7, 10869.0], [97.8, 10919.0], [97.9, 11107.0], [98.0, 11118.0], [98.1, 11216.0], [98.2, 11237.0], [98.3, 11440.0], [98.4, 11560.0], [98.5, 11762.0], [98.6, 11796.0], [98.7, 11796.0], [98.8, 11799.0], [98.9, 11800.0], [99.0, 11807.0], [99.1, 11825.0], [99.2, 12088.0], [99.3, 12218.0], [99.4, 12268.0], [99.5, 12375.0], [99.6, 12423.0], [99.7, 12841.0], [99.8, 13470.0], [99.9, 14683.0]], "isOverall": false, "label": "Access Live TV Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1900.0, "maxY": 53.0, "series": [{"data": [[1900.0, 1.0], [2100.0, 1.0], [2300.0, 7.0], [2200.0, 5.0], [2400.0, 8.0], [2500.0, 6.0], [2600.0, 15.0], [2700.0, 4.0], [2800.0, 6.0], [2900.0, 6.0], [3000.0, 4.0], [3100.0, 1.0], [3200.0, 11.0], [3300.0, 4.0], [3400.0, 7.0], [3500.0, 17.0], [3600.0, 15.0], [3700.0, 6.0], [3800.0, 10.0], [3900.0, 25.0], [4000.0, 3.0], [4100.0, 15.0], [4200.0, 16.0], [4300.0, 20.0], [4400.0, 25.0], [4500.0, 37.0], [4600.0, 17.0], [4700.0, 21.0], [4800.0, 28.0], [4900.0, 21.0], [5000.0, 17.0], [5100.0, 18.0], [5200.0, 30.0], [5300.0, 20.0], [5400.0, 22.0], [5500.0, 15.0], [5600.0, 29.0], [5700.0, 53.0], [5800.0, 35.0], [5900.0, 30.0], [6000.0, 23.0], [6100.0, 23.0], [6200.0, 24.0], [6300.0, 17.0], [6400.0, 13.0], [6500.0, 14.0], [6600.0, 7.0], [6700.0, 16.0], [6800.0, 12.0], [6900.0, 8.0], [7000.0, 6.0], [7100.0, 15.0], [7200.0, 6.0], [7300.0, 11.0], [7400.0, 7.0], [7500.0, 1.0], [7600.0, 5.0], [7700.0, 8.0], [7800.0, 6.0], [7900.0, 3.0], [8100.0, 4.0], [8000.0, 1.0], [8300.0, 5.0], [8200.0, 2.0], [8500.0, 7.0], [8600.0, 6.0], [8400.0, 1.0], [8700.0, 3.0], [8800.0, 8.0], [8900.0, 3.0], [9000.0, 7.0], [9100.0, 9.0], [9200.0, 12.0], [9300.0, 7.0], [9400.0, 5.0], [9500.0, 3.0], [9600.0, 2.0], [9700.0, 3.0], [9800.0, 9.0], [9900.0, 3.0], [10000.0, 10.0], [10200.0, 1.0], [10100.0, 2.0], [10300.0, 3.0], [10500.0, 2.0], [10600.0, 2.0], [10800.0, 2.0], [10900.0, 1.0], [11100.0, 2.0], [11200.0, 2.0], [11400.0, 1.0], [11700.0, 4.0], [11500.0, 1.0], [11800.0, 3.0], [12000.0, 1.0], [12200.0, 2.0], [12400.0, 1.0], [12300.0, 1.0], [12800.0, 1.0], [13400.0, 1.0], [14600.0, 1.0]], "isOverall": false, "label": "Access Live TV Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 500.69100000000066, "minX": 1.57139466E12, "maxY": 500.69100000000066, "series": [{"data": [[1.57139466E12, 500.69100000000066]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139466E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2110.0, "minX": 1.0, "maxY": 14683.0, "series": [{"data": [[2.0, 13470.0], [3.0, 12841.0], [4.0, 12268.0], [5.0, 12375.0], [6.0, 11796.0], [7.0, 12423.0], [8.0, 12218.0], [9.0, 12088.0], [10.0, 11560.0], [11.0, 11825.0], [12.0, 11807.0], [13.0, 11800.0], [15.0, 11797.5], [16.0, 11762.0], [17.0, 11440.0], [18.0, 11237.0], [19.0, 11216.0], [20.0, 10848.0], [21.0, 11118.0], [22.0, 11107.0], [23.0, 10617.0], [24.0, 10919.0], [25.0, 10869.0], [26.0, 10081.0], [27.0, 10681.0], [28.0, 9995.0], [29.0, 10587.0], [30.0, 10513.0], [31.0, 10150.0], [33.0, 10067.0], [32.0, 10152.0], [35.0, 10387.5], [37.0, 9795.0], [36.0, 10369.0], [39.0, 10253.0], [38.0, 9645.0], [41.0, 9816.0], [42.0, 9887.5], [44.0, 9698.5], [48.0, 9860.5], [50.0, 9896.5], [53.0, 9778.0], [54.0, 10029.0], [57.0, 9988.0], [56.0, 10021.0], [59.0, 9407.0], [58.0, 9936.0], [60.0, 9362.0], [63.0, 9881.0], [62.0, 9753.0], [67.0, 9851.0], [66.0, 9866.0], [65.0, 9859.0], [64.0, 9328.0], [71.0, 9290.0], [70.0, 9287.0], [69.0, 9169.0], [68.0, 9257.0], [75.0, 9050.0], [74.0, 9179.0], [73.0, 9427.5], [79.0, 9068.0], [78.0, 9442.0], [77.0, 9152.0], [76.0, 9257.0], [83.0, 9405.5], [81.0, 9064.5], [87.0, 9367.0], [86.0, 9368.0], [85.0, 8856.0], [84.0, 9377.0], [91.0, 9299.0], [90.0, 9276.0], [89.0, 9342.0], [88.0, 9357.0], [95.0, 8720.0], [94.0, 9254.0], [93.0, 9205.0], [92.0, 9284.0], [98.0, 9213.0], [97.0, 9196.0], [96.0, 9069.0], [102.0, 9133.0], [101.0, 8991.0], [100.0, 9139.0], [107.0, 9084.0], [106.0, 8769.0], [105.0, 8816.0], [104.0, 9121.5], [111.0, 8819.5], [109.0, 8605.0], [108.0, 8770.0], [115.0, 8765.5], [113.0, 9049.0], [112.0, 8541.0], [119.0, 8552.0], [118.0, 8430.0], [117.0, 8682.0], [116.0, 8647.0], [123.0, 8835.0], [122.0, 8367.0], [121.0, 8916.0], [120.0, 8935.0], [126.0, 8666.0], [125.0, 8844.0], [124.0, 8851.0], [135.0, 8064.0], [134.0, 8565.0], [133.0, 8574.0], [132.0, 8615.0], [131.0, 8812.0], [130.0, 8437.5], [128.0, 8819.5], [143.0, 7786.0], [142.0, 8389.0], [141.0, 8104.0], [140.0, 8380.0], [139.0, 7953.0], [138.0, 8122.0], [137.0, 8216.0], [136.0, 8272.0], [151.0, 7819.0], [150.0, 7614.0], [149.0, 8188.0], [148.0, 8129.0], [147.0, 7796.0], [146.0, 7724.0], [145.0, 8336.0], [144.0, 7861.0], [159.0, 7848.0], [158.0, 7888.0], [157.0, 7636.0], [156.0, 7221.0], [155.0, 7975.0], [154.0, 7428.0], [153.0, 7992.0], [152.0, 7708.0], [166.0, 7629.0], [165.0, 7702.0], [164.0, 7742.0], [163.0, 7726.0], [162.0, 7763.0], [161.0, 7855.0], [160.0, 7878.0], [175.0, 7416.0], [174.0, 7396.0], [172.0, 7462.0], [171.0, 7466.0], [170.0, 7408.0], [169.0, 7592.0], [168.0, 7610.5], [182.0, 6977.0], [181.0, 7382.0], [179.0, 7377.0], [178.0, 7395.0], [177.0, 7107.0], [176.0, 7404.0], [191.0, 7206.0], [190.0, 7301.0], [189.0, 7317.333333333333], [186.0, 7311.5], [184.0, 7036.5], [199.0, 7182.0], [198.0, 7188.0], [197.0, 7184.0], [196.0, 7191.0], [195.0, 7201.0], [194.0, 7197.5], [192.0, 7204.0], [207.0, 7136.0], [206.0, 7139.0], [205.0, 7153.0], [204.0, 7154.0], [203.0, 7162.0], [202.0, 6970.0], [200.0, 6818.0], [215.0, 7050.0], [214.0, 7066.0], [213.0, 7063.0], [212.0, 7077.0], [211.0, 7102.0], [210.0, 7113.0], [209.0, 6822.0], [208.0, 7130.0], [223.0, 6779.0], [222.0, 6929.0], [221.0, 6555.0], [220.0, 6179.0], [219.0, 6331.0], [218.0, 6978.0], [217.0, 7015.0], [216.0, 7031.0], [230.0, 6908.0], [228.0, 6906.0], [227.0, 6913.0], [226.0, 6912.5], [224.0, 6607.0], [239.0, 6371.0], [238.0, 6376.0], [237.0, 6571.0], [236.0, 6544.0], [235.0, 6602.0], [234.0, 6386.0], [233.0, 6896.0], [232.0, 6728.5], [247.0, 6303.0], [245.0, 6363.0], [244.0, 6083.5], [242.0, 6095.5], [240.0, 6315.0], [254.0, 6156.0], [253.0, 6672.0], [251.0, 6098.0], [250.0, 6207.0], [249.0, 6469.0], [258.0, 6218.0], [269.0, 6079.0], [270.0, 6103.0], [268.0, 6626.0], [266.0, 6350.0], [264.0, 6148.0], [263.0, 6794.5], [261.0, 6445.0], [260.0, 6812.5], [257.0, 6827.0], [256.0, 6272.5], [286.0, 6480.333333333333], [283.0, 6606.5], [281.0, 6483.0], [280.0, 6440.0], [279.0, 6455.0], [277.0, 6465.5], [275.0, 6760.0], [274.0, 6388.0], [273.0, 6544.0], [301.0, 5972.0], [303.0, 6388.5], [300.0, 5896.0], [291.0, 5946.0], [290.0, 5928.0], [289.0, 6729.0], [288.0, 6338.5], [299.0, 6711.0], [298.0, 5931.0], [297.0, 6005.0], [296.0, 5994.0], [295.0, 6450.0], [294.0, 6700.0], [293.0, 6277.0], [318.0, 6078.0], [319.0, 6593.0], [317.0, 6189.0], [316.0, 6056.5], [314.0, 6615.0], [313.0, 6096.0], [312.0, 6085.0], [311.0, 6643.0], [305.0, 6374.5], [307.0, 6643.0], [306.0, 6078.0], [310.0, 5871.0], [309.0, 6382.0], [308.0, 6241.0], [334.0, 6187.5], [335.0, 5807.0], [332.0, 6184.0], [322.0, 5929.0], [321.0, 5933.0], [320.0, 5917.0], [330.0, 5832.0], [329.0, 6563.0], [328.0, 5804.0], [327.0, 5916.0], [326.0, 5870.0], [325.0, 5835.0], [324.0, 6113.0], [350.0, 5746.0], [351.0, 6486.0], [349.0, 5745.0], [348.0, 6161.5], [346.0, 5897.0], [345.0, 5800.0], [344.0, 5746.0], [343.0, 5741.0], [339.0, 6547.0], [338.0, 6310.666666666667], [342.0, 5744.0], [341.0, 5748.0], [340.0, 5812.0], [366.0, 5631.0], [367.0, 5755.0], [365.0, 5889.0], [364.0, 5726.0], [363.0, 6409.0], [362.0, 5782.5], [360.0, 6475.0], [359.0, 5766.0], [352.0, 5746.0], [354.0, 5965.0], [353.0, 5746.0], [358.0, 6473.0], [357.0, 6163.0], [356.0, 5795.5], [382.0, 5820.0], [383.0, 5761.0], [381.0, 6310.0], [380.0, 6328.5], [378.0, 5979.0], [377.0, 5759.0], [376.0, 5622.0], [375.0, 5716.0], [369.0, 6051.0], [371.0, 5714.0], [370.0, 5688.0], [374.0, 6086.0], [372.0, 6351.0], [398.0, 6108.5], [399.0, 6272.0], [396.0, 6282.0], [387.0, 6304.0], [386.0, 5756.0], [385.0, 5942.0], [384.0, 6303.0], [395.0, 5965.0], [393.0, 5954.0], [392.0, 5603.0], [391.0, 6279.5], [389.0, 5937.0], [388.0, 5914.0], [414.0, 5714.0], [415.0, 5542.0], [413.0, 5927.0], [412.0, 6236.0], [411.0, 6219.0], [410.0, 6235.5], [408.0, 5728.0], [407.0, 6232.0], [403.0, 6240.0], [406.0, 6236.0], [405.0, 6159.4], [419.0, 6216.0], [430.0, 5918.5], [428.0, 5645.0], [426.0, 5631.0], [424.0, 6104.0], [423.0, 5890.0], [422.0, 5871.0], [421.0, 5706.0], [420.0, 5709.0], [418.0, 6047.0], [417.0, 6201.0], [416.0, 5713.0], [446.0, 5795.0], [447.0, 5751.0], [445.0, 6120.0], [444.0, 5651.0], [443.0, 6120.0], [442.0, 5793.0], [441.0, 5719.0], [440.0, 5896.0], [438.0, 5664.0], [435.0, 6147.5], [433.0, 6147.0], [432.0, 6146.5], [436.0, 6145.0], [462.0, 5258.0], [463.0, 6067.0], [461.0, 6063.0], [460.0, 5736.0], [459.0, 5293.0], [458.0, 6064.0], [457.0, 5509.0], [456.0, 5536.5], [454.0, 5308.0], [449.0, 5475.0], [448.0, 5813.0], [451.0, 5610.0], [450.0, 6107.0], [453.0, 5310.0], [452.0, 6096.0], [478.0, 5979.0], [479.0, 5947.0], [477.0, 5357.0], [476.0, 5260.0], [475.0, 5279.0], [474.0, 5411.0], [473.0, 5364.0], [472.0, 6007.0], [471.0, 5680.5], [464.0, 6011.0], [467.0, 5858.0], [465.0, 5229.0], [469.0, 5708.0], [468.0, 6019.0], [494.0, 5516.0], [495.0, 5842.0], [493.0, 5884.0], [492.0, 5887.0], [491.0, 5895.0], [490.0, 5891.5], [488.0, 5908.5], [486.0, 5919.0], [480.0, 5941.0], [483.0, 5582.0], [482.0, 5644.0], [485.0, 5944.0], [484.0, 5248.0], [510.0, 5490.0], [511.0, 5785.0], [509.0, 5791.0], [508.0, 5520.0], [506.0, 5795.0], [505.0, 5800.0], [504.0, 5806.0], [503.0, 5229.0], [497.0, 5512.5], [499.0, 5848.0], [498.0, 5855.0], [502.0, 5464.0], [501.0, 5838.0], [500.0, 5829.0], [537.0, 5338.0], [542.0, 5691.5], [543.0, 5181.0], [528.0, 5696.0], [530.0, 5709.0], [529.0, 5405.0], [532.0, 5377.0], [531.0, 5705.0], [540.0, 5176.0], [539.0, 5662.0], [538.0, 5688.0], [536.0, 5692.0], [519.0, 5278.0], [518.0, 5769.0], [517.0, 5753.0], [516.0, 5786.0], [515.0, 5790.0], [514.0, 5795.0], [513.0, 5786.5], [527.0, 5298.0], [526.0, 5356.0], [525.0, 5709.0], [524.0, 4963.0], [523.0, 5748.0], [522.0, 5740.0], [521.0, 5740.0], [520.0, 5743.0], [535.0, 5702.0], [534.0, 5568.0], [569.0, 5587.0], [574.0, 5565.0], [575.0, 4798.0], [561.0, 5467.0], [563.0, 4832.0], [562.0, 5037.0], [565.0, 4827.0], [564.0, 5594.0], [573.0, 5074.0], [572.0, 5431.5], [570.0, 5217.0], [568.0, 5033.0], [551.0, 4857.0], [550.0, 5379.0], [549.0, 5669.333333333333], [546.0, 4874.5], [544.0, 4951.0], [559.0, 4838.0], [558.0, 5014.0], [557.0, 5290.0], [556.0, 5630.0], [555.0, 5607.0], [554.0, 5281.0], [552.0, 5630.0], [567.0, 5574.0], [566.0, 4824.0], [601.0, 5445.0], [606.0, 5090.0], [607.0, 4829.0], [593.0, 5469.0], [592.0, 5464.0], [597.0, 5083.5], [595.0, 5085.0], [605.0, 5055.0], [604.0, 5412.5], [602.0, 5182.0], [600.0, 4940.0], [583.0, 4973.0], [582.0, 5529.0], [581.0, 4983.0], [580.0, 5538.5], [578.0, 5330.5], [576.0, 5545.0], [591.0, 4737.0], [590.0, 5478.0], [589.0, 5475.0], [588.0, 5198.0], [587.0, 5513.0], [586.0, 5489.0], [585.0, 5080.0], [599.0, 5455.0], [598.0, 5433.0], [632.0, 5044.5], [636.0, 4586.0], [639.0, 5039.666666666667], [624.0, 5328.0], [626.0, 5300.0], [625.0, 5071.0], [635.0, 5265.0], [634.0, 4604.0], [633.0, 5284.0], [623.0, 4870.0], [609.0, 5420.0], [613.0, 5138.0], [610.0, 4707.0], [615.0, 5080.0], [614.0, 4845.0], [622.0, 5349.0], [621.0, 5054.0], [620.0, 4887.0], [619.0, 4675.0], [618.0, 4779.0], [617.0, 5375.0], [616.0, 5387.0], [630.0, 5289.0], [629.0, 5316.0], [628.0, 5305.0], [627.0, 4626.0], [665.0, 4845.0], [669.0, 5146.0], [671.0, 5143.0], [657.0, 5189.0], [660.0, 5065.0], [658.0, 5217.0], [668.0, 5174.0], [667.0, 4697.0], [666.0, 5176.0], [664.0, 5193.0], [647.0, 5245.0], [646.0, 4564.0], [645.0, 5243.0], [644.0, 4572.0], [643.0, 5254.5], [641.0, 5259.5], [655.0, 5205.0], [654.0, 4867.0], [653.0, 4545.0], [652.0, 4547.0], [651.0, 5219.0], [650.0, 4887.5], [648.0, 4918.0], [663.0, 4938.0], [662.0, 4942.5], [700.0, 4834.0], [703.0, 4844.0], [689.0, 4983.0], [688.0, 5007.0], [691.0, 4973.0], [690.0, 4985.0], [693.0, 4926.0], [692.0, 4715.0], [702.0, 4834.0], [701.0, 4859.0], [699.0, 4293.0], [698.0, 4885.0], [697.0, 4892.0], [696.0, 4910.0], [687.0, 4974.0], [673.0, 5154.5], [675.0, 4523.0], [674.0, 4759.0], [677.0, 5109.0], [676.0, 5078.0], [679.0, 4605.0], [678.0, 5099.0], [686.0, 4980.0], [685.0, 4681.0], [684.0, 5033.0], [683.0, 5024.0], [682.0, 5037.0], [681.0, 5052.0], [680.0, 5056.0], [695.0, 4923.0], [694.0, 4937.0], [732.0, 4679.0], [723.0, 4761.0], [735.0, 4695.666666666667], [720.0, 4763.0], [722.0, 4765.0], [721.0, 4749.0], [731.0, 4170.0], [729.0, 4710.0], [728.0, 4278.0], [711.0, 4801.0], [710.0, 4822.0], [709.0, 4793.5], [707.0, 4830.0], [706.0, 4812.5], [704.0, 4819.0], [719.0, 4783.0], [718.0, 4788.0], [717.0, 4766.0], [716.0, 4752.0], [715.0, 4458.0], [714.0, 4762.0], [713.0, 4804.0], [712.0, 4649.0], [726.0, 4399.0], [725.0, 4730.0], [724.0, 4392.0], [763.0, 4567.0], [755.0, 4306.0], [766.0, 4560.5], [767.0, 4541.0], [754.0, 4533.0], [753.0, 4595.0], [764.0, 4575.0], [762.0, 4568.333333333333], [743.0, 4644.0], [742.0, 4277.0], [741.0, 4373.0], [740.0, 4330.0], [739.0, 4418.0], [738.0, 4338.0], [737.0, 4219.0], [736.0, 4389.0], [751.0, 4594.0], [750.0, 4592.0], [749.0, 4599.0], [748.0, 4626.0], [747.0, 4448.0], [745.0, 4635.0], [744.0, 4659.0], [759.0, 4398.5], [757.0, 4522.0], [756.0, 4589.0], [792.0, 4490.0], [798.0, 4192.5], [799.0, 4448.0], [784.0, 4440.0], [786.0, 4489.0], [785.0, 4500.0], [796.0, 4179.0], [795.0, 4148.0], [794.0, 4463.0], [783.0, 4233.0], [769.0, 4549.0], [771.0, 4556.0], [770.0, 4236.0], [775.0, 4333.0], [773.0, 4485.5], [781.0, 4502.0], [780.0, 4514.0], [779.0, 4513.0], [778.0, 4164.0], [777.0, 4508.0], [776.0, 4513.0], [791.0, 4362.0], [789.0, 4488.0], [788.0, 4500.0], [787.0, 4486.0], [825.0, 4363.0], [830.0, 4305.0], [831.0, 4286.0], [816.0, 4134.0], [820.0, 4243.0], [818.0, 4377.5], [829.0, 4069.0], [828.0, 4337.5], [826.0, 4354.0], [824.0, 3740.0], [807.0, 4451.0], [806.0, 4347.5], [804.0, 4459.0], [803.0, 4457.0], [802.0, 4444.0], [800.0, 4440.0], [815.0, 3700.0], [814.0, 4411.0], [813.0, 3636.0], [812.0, 4403.0], [811.0, 3612.0], [810.0, 4391.0], [809.0, 4421.0], [808.0, 4429.0], [823.0, 4373.0], [822.0, 4241.5], [857.0, 4128.0], [862.0, 3614.5], [863.0, 3571.0], [849.0, 4191.0], [848.0, 4204.0], [852.0, 3846.0], [850.0, 3521.0], [860.0, 4102.0], [859.0, 4121.0], [858.0, 3868.0], [856.0, 3511.0], [839.0, 3951.0], [838.0, 3436.0], [837.0, 3917.0], [836.0, 4243.0], [835.0, 4249.0], [834.0, 4270.0], [833.0, 4263.0], [832.0, 4286.0], [847.0, 4198.0], [846.0, 3546.0], [845.0, 4164.0], [843.0, 3718.0], [842.0, 3538.0], [841.0, 4074.0], [855.0, 4147.0], [853.0, 3839.0], [888.0, 3983.0], [892.0, 3908.0], [895.0, 3358.0], [881.0, 3293.0], [880.0, 3687.0], [894.0, 3923.0], [893.0, 3945.0], [891.0, 3925.0], [890.0, 3928.0], [889.0, 3975.0], [878.0, 3983.5], [865.0, 3518.0], [864.0, 3482.0], [867.0, 3472.0], [866.0, 3460.0], [869.0, 4036.0], [868.0, 3525.0], [871.0, 3244.0], [870.0, 3232.0], [876.0, 3985.0], [875.0, 3670.0], [874.0, 3269.0], [873.0, 3545.0], [872.0, 3744.0], [886.0, 3980.0], [884.0, 3981.6666666666665], [924.0, 2944.0], [927.0, 3583.0], [913.0, 3723.0], [912.0, 3353.0], [915.0, 3676.0], [914.0, 3196.0], [917.0, 3645.0], [916.0, 3655.0], [926.0, 3597.0], [925.0, 3613.0], [923.0, 3629.0], [922.0, 3634.0], [921.0, 3626.0], [920.0, 3644.0], [911.0, 3264.0], [896.0, 3881.0], [899.0, 3892.0], [898.0, 3744.5], [901.0, 3887.0], [900.0, 3906.0], [903.0, 3857.0], [902.0, 3264.0], [910.0, 3227.0], [909.0, 3660.0], [908.0, 3810.0], [907.0, 3813.0], [906.0, 3231.0], [905.0, 3224.0], [904.0, 3811.0], [919.0, 3644.0], [918.0, 3630.0], [953.0, 3060.0], [957.0, 2930.0], [959.0, 2624.0], [945.0, 3254.0], [944.0, 2759.0], [947.0, 3215.0], [946.0, 2905.0], [949.0, 2882.0], [948.0, 2861.0], [956.0, 2972.0], [955.0, 3002.0], [954.0, 3026.0], [952.0, 2602.0], [935.0, 2856.0], [934.0, 3508.0], [933.0, 3533.0], [932.0, 3543.0], [931.0, 3506.0], [930.0, 2905.0], [929.0, 3572.5], [943.0, 2781.0], [942.0, 2790.0], [941.0, 3391.0], [940.0, 2808.0], [939.0, 3422.0], [938.0, 2817.0], [937.0, 2824.0], [936.0, 3460.0], [951.0, 3093.0], [950.0, 2952.0], [984.0, 2261.0], [988.0, 2284.0], [991.0, 2428.0], [976.0, 2590.0], [978.0, 2569.0], [977.0, 2573.0], [990.0, 2458.0], [989.0, 2472.0], [987.0, 2469.0], [986.0, 2493.0], [985.0, 2254.0], [975.0, 2597.0], [961.0, 2685.0], [960.0, 2691.0], [963.0, 2674.0], [962.0, 2683.0], [965.0, 2648.0], [964.0, 2607.0], [967.0, 2636.0], [966.0, 2639.0], [974.0, 2602.0], [973.0, 2630.0], [972.0, 2610.0], [971.0, 2613.0], [970.0, 2613.0], [969.0, 2495.0], [968.0, 2629.0], [983.0, 2272.0], [982.0, 2443.0], [1000.0, 2125.5], [998.0, 2381.0], [997.0, 2377.0], [996.0, 2381.0], [994.0, 2401.0], [993.0, 2228.0], [992.0, 2110.0], [1.0, 14683.0]], "isOverall": false, "label": "Access Live TV Page", "isController": false}, {"data": [[500.69100000000066, 5850.318]], "isOverall": false, "label": "Access Live TV Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3766.6666666666665, "minX": 1.57139466E12, "maxY": 131072.95, "series": [{"data": [[1.57139466E12, 131072.95]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57139466E12, 3766.6666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139466E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5850.318, "minX": 1.57139466E12, "maxY": 5850.318, "series": [{"data": [[1.57139466E12, 5850.318]], "isOverall": false, "label": "Access Live TV Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139466E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3251.3799999999983, "minX": 1.57139466E12, "maxY": 3251.3799999999983, "series": [{"data": [[1.57139466E12, 3251.3799999999983]], "isOverall": false, "label": "Access Live TV Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139466E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1072.8619999999983, "minX": 1.57139466E12, "maxY": 1072.8619999999983, "series": [{"data": [[1.57139466E12, 1072.8619999999983]], "isOverall": false, "label": "Access Live TV Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139466E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1938.0, "minX": 1.57139466E12, "maxY": 14683.0, "series": [{"data": [[1.57139466E12, 14683.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57139466E12, 1938.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57139466E12, 9068.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57139466E12, 11806.93]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57139466E12, 9880.8]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139466E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2573.0, "minX": 1.0, "maxY": 14683.0, "series": [{"data": [[2.0, 13155.5], [185.0, 4486.0], [46.0, 8560.5], [12.0, 11779.0], [51.0, 2573.0], [230.0, 5367.0], [235.0, 6163.0], [59.0, 7325.0], [60.0, 9349.5], [1.0, 14683.0], [5.0, 12268.0], [90.0, 3590.0], [24.0, 10202.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 235.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1455.0, "minX": 1.0, "maxY": 14524.0, "series": [{"data": [[2.0, 3720.0], [185.0, 1796.0], [46.0, 4797.0], [12.0, 11426.5], [51.0, 1455.0], [230.0, 1917.0], [235.0, 3773.0], [59.0, 1574.0], [60.0, 3204.0], [1.0, 14524.0], [5.0, 11502.0], [90.0, 2373.5], [24.0, 2880.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 235.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57139466E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57139466E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139466E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57139466E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57139466E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139466E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57139466E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57139466E12, 16.666666666666668]], "isOverall": false, "label": "Access Live TV Page-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139466E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57139466E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57139466E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139466E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

