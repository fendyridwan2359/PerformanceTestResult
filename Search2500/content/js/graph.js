/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 165.0, "minX": 0.0, "maxY": 3892.0, "series": [{"data": [[0.0, 165.0], [0.1, 174.0], [0.2, 184.0], [0.3, 191.0], [0.4, 199.0], [0.5, 203.0], [0.6, 204.0], [0.7, 207.0], [0.8, 212.0], [0.9, 213.0], [1.0, 218.0], [1.1, 220.0], [1.2, 222.0], [1.3, 226.0], [1.4, 230.0], [1.5, 235.0], [1.6, 236.0], [1.7, 237.0], [1.8, 240.0], [1.9, 243.0], [2.0, 244.0], [2.1, 246.0], [2.2, 248.0], [2.3, 254.0], [2.4, 256.0], [2.5, 258.0], [2.6, 258.0], [2.7, 261.0], [2.8, 265.0], [2.9, 267.0], [3.0, 268.0], [3.1, 269.0], [3.2, 272.0], [3.3, 275.0], [3.4, 277.0], [3.5, 277.0], [3.6, 277.0], [3.7, 278.0], [3.8, 279.0], [3.9, 282.0], [4.0, 284.0], [4.1, 286.0], [4.2, 287.0], [4.3, 289.0], [4.4, 290.0], [4.5, 290.0], [4.6, 290.0], [4.7, 292.0], [4.8, 292.0], [4.9, 294.0], [5.0, 295.0], [5.1, 296.0], [5.2, 296.0], [5.3, 297.0], [5.4, 297.0], [5.5, 298.0], [5.6, 299.0], [5.7, 300.0], [5.8, 301.0], [5.9, 302.0], [6.0, 303.0], [6.1, 304.0], [6.2, 304.0], [6.3, 306.0], [6.4, 307.0], [6.5, 308.0], [6.6, 309.0], [6.7, 309.0], [6.8, 310.0], [6.9, 310.0], [7.0, 312.0], [7.1, 313.0], [7.2, 313.0], [7.3, 313.0], [7.4, 313.0], [7.5, 314.0], [7.6, 314.0], [7.7, 315.0], [7.8, 316.0], [7.9, 316.0], [8.0, 316.0], [8.1, 317.0], [8.2, 317.0], [8.3, 317.0], [8.4, 318.0], [8.5, 319.0], [8.6, 319.0], [8.7, 320.0], [8.8, 320.0], [8.9, 321.0], [9.0, 321.0], [9.1, 322.0], [9.2, 322.0], [9.3, 323.0], [9.4, 323.0], [9.5, 323.0], [9.6, 324.0], [9.7, 325.0], [9.8, 325.0], [9.9, 326.0], [10.0, 327.0], [10.1, 327.0], [10.2, 327.0], [10.3, 328.0], [10.4, 329.0], [10.5, 330.0], [10.6, 330.0], [10.7, 331.0], [10.8, 331.0], [10.9, 332.0], [11.0, 332.0], [11.1, 333.0], [11.2, 333.0], [11.3, 333.0], [11.4, 333.0], [11.5, 335.0], [11.6, 335.0], [11.7, 336.0], [11.8, 337.0], [11.9, 337.0], [12.0, 339.0], [12.1, 340.0], [12.2, 340.0], [12.3, 341.0], [12.4, 341.0], [12.5, 342.0], [12.6, 343.0], [12.7, 343.0], [12.8, 344.0], [12.9, 345.0], [13.0, 346.0], [13.1, 346.0], [13.2, 347.0], [13.3, 347.0], [13.4, 348.0], [13.5, 348.0], [13.6, 349.0], [13.7, 350.0], [13.8, 351.0], [13.9, 352.0], [14.0, 353.0], [14.1, 353.0], [14.2, 354.0], [14.3, 354.0], [14.4, 355.0], [14.5, 355.0], [14.6, 356.0], [14.7, 356.0], [14.8, 357.0], [14.9, 357.0], [15.0, 358.0], [15.1, 358.0], [15.2, 359.0], [15.3, 360.0], [15.4, 360.0], [15.5, 361.0], [15.6, 361.0], [15.7, 362.0], [15.8, 362.0], [15.9, 362.0], [16.0, 364.0], [16.1, 364.0], [16.2, 365.0], [16.3, 365.0], [16.4, 365.0], [16.5, 366.0], [16.6, 366.0], [16.7, 366.0], [16.8, 367.0], [16.9, 367.0], [17.0, 368.0], [17.1, 368.0], [17.2, 368.0], [17.3, 368.0], [17.4, 369.0], [17.5, 369.0], [17.6, 370.0], [17.7, 370.0], [17.8, 371.0], [17.9, 371.0], [18.0, 371.0], [18.1, 372.0], [18.2, 372.0], [18.3, 372.0], [18.4, 373.0], [18.5, 373.0], [18.6, 374.0], [18.7, 374.0], [18.8, 374.0], [18.9, 375.0], [19.0, 375.0], [19.1, 375.0], [19.2, 376.0], [19.3, 377.0], [19.4, 378.0], [19.5, 379.0], [19.6, 380.0], [19.7, 381.0], [19.8, 381.0], [19.9, 382.0], [20.0, 383.0], [20.1, 384.0], [20.2, 384.0], [20.3, 385.0], [20.4, 386.0], [20.5, 386.0], [20.6, 387.0], [20.7, 388.0], [20.8, 389.0], [20.9, 389.0], [21.0, 390.0], [21.1, 390.0], [21.2, 391.0], [21.3, 392.0], [21.4, 394.0], [21.5, 394.0], [21.6, 396.0], [21.7, 397.0], [21.8, 399.0], [21.9, 399.0], [22.0, 401.0], [22.1, 402.0], [22.2, 404.0], [22.3, 406.0], [22.4, 407.0], [22.5, 409.0], [22.6, 412.0], [22.7, 412.0], [22.8, 414.0], [22.9, 415.0], [23.0, 418.0], [23.1, 420.0], [23.2, 423.0], [23.3, 425.0], [23.4, 427.0], [23.5, 428.0], [23.6, 430.0], [23.7, 430.0], [23.8, 430.0], [23.9, 434.0], [24.0, 436.0], [24.1, 438.0], [24.2, 442.0], [24.3, 442.0], [24.4, 442.0], [24.5, 445.0], [24.6, 445.0], [24.7, 445.0], [24.8, 447.0], [24.9, 448.0], [25.0, 449.0], [25.1, 450.0], [25.2, 451.0], [25.3, 452.0], [25.4, 453.0], [25.5, 453.0], [25.6, 455.0], [25.7, 457.0], [25.8, 458.0], [25.9, 458.0], [26.0, 460.0], [26.1, 460.0], [26.2, 460.0], [26.3, 461.0], [26.4, 461.0], [26.5, 462.0], [26.6, 462.0], [26.7, 462.0], [26.8, 463.0], [26.9, 463.0], [27.0, 463.0], [27.1, 463.0], [27.2, 463.0], [27.3, 464.0], [27.4, 464.0], [27.5, 465.0], [27.6, 466.0], [27.7, 466.0], [27.8, 467.0], [27.9, 467.0], [28.0, 468.0], [28.1, 468.0], [28.2, 469.0], [28.3, 469.0], [28.4, 470.0], [28.5, 470.0], [28.6, 470.0], [28.7, 470.0], [28.8, 471.0], [28.9, 471.0], [29.0, 473.0], [29.1, 473.0], [29.2, 474.0], [29.3, 474.0], [29.4, 475.0], [29.5, 475.0], [29.6, 476.0], [29.7, 477.0], [29.8, 477.0], [29.9, 479.0], [30.0, 479.0], [30.1, 480.0], [30.2, 480.0], [30.3, 480.0], [30.4, 481.0], [30.5, 481.0], [30.6, 482.0], [30.7, 482.0], [30.8, 483.0], [30.9, 484.0], [31.0, 484.0], [31.1, 485.0], [31.2, 485.0], [31.3, 485.0], [31.4, 485.0], [31.5, 486.0], [31.6, 486.0], [31.7, 486.0], [31.8, 488.0], [31.9, 489.0], [32.0, 489.0], [32.1, 490.0], [32.2, 491.0], [32.3, 491.0], [32.4, 492.0], [32.5, 492.0], [32.6, 493.0], [32.7, 494.0], [32.8, 495.0], [32.9, 496.0], [33.0, 497.0], [33.1, 498.0], [33.2, 500.0], [33.3, 500.0], [33.4, 502.0], [33.5, 502.0], [33.6, 503.0], [33.7, 503.0], [33.8, 504.0], [33.9, 505.0], [34.0, 506.0], [34.1, 506.0], [34.2, 507.0], [34.3, 508.0], [34.4, 509.0], [34.5, 509.0], [34.6, 510.0], [34.7, 510.0], [34.8, 510.0], [34.9, 512.0], [35.0, 512.0], [35.1, 512.0], [35.2, 513.0], [35.3, 513.0], [35.4, 514.0], [35.5, 514.0], [35.6, 514.0], [35.7, 514.0], [35.8, 515.0], [35.9, 515.0], [36.0, 516.0], [36.1, 516.0], [36.2, 517.0], [36.3, 517.0], [36.4, 518.0], [36.5, 519.0], [36.6, 519.0], [36.7, 520.0], [36.8, 520.0], [36.9, 520.0], [37.0, 520.0], [37.1, 521.0], [37.2, 521.0], [37.3, 522.0], [37.4, 522.0], [37.5, 523.0], [37.6, 523.0], [37.7, 524.0], [37.8, 524.0], [37.9, 524.0], [38.0, 525.0], [38.1, 525.0], [38.2, 526.0], [38.3, 526.0], [38.4, 527.0], [38.5, 527.0], [38.6, 527.0], [38.7, 527.0], [38.8, 528.0], [38.9, 528.0], [39.0, 528.0], [39.1, 529.0], [39.2, 529.0], [39.3, 529.0], [39.4, 530.0], [39.5, 530.0], [39.6, 530.0], [39.7, 530.0], [39.8, 531.0], [39.9, 531.0], [40.0, 531.0], [40.1, 532.0], [40.2, 532.0], [40.3, 532.0], [40.4, 533.0], [40.5, 533.0], [40.6, 533.0], [40.7, 533.0], [40.8, 534.0], [40.9, 535.0], [41.0, 536.0], [41.1, 536.0], [41.2, 537.0], [41.3, 537.0], [41.4, 538.0], [41.5, 539.0], [41.6, 539.0], [41.7, 540.0], [41.8, 540.0], [41.9, 540.0], [42.0, 541.0], [42.1, 541.0], [42.2, 542.0], [42.3, 542.0], [42.4, 543.0], [42.5, 543.0], [42.6, 544.0], [42.7, 544.0], [42.8, 544.0], [42.9, 545.0], [43.0, 546.0], [43.1, 546.0], [43.2, 546.0], [43.3, 547.0], [43.4, 548.0], [43.5, 548.0], [43.6, 548.0], [43.7, 548.0], [43.8, 549.0], [43.9, 549.0], [44.0, 549.0], [44.1, 550.0], [44.2, 550.0], [44.3, 550.0], [44.4, 550.0], [44.5, 550.0], [44.6, 550.0], [44.7, 551.0], [44.8, 551.0], [44.9, 551.0], [45.0, 552.0], [45.1, 552.0], [45.2, 552.0], [45.3, 553.0], [45.4, 553.0], [45.5, 554.0], [45.6, 554.0], [45.7, 554.0], [45.8, 555.0], [45.9, 555.0], [46.0, 556.0], [46.1, 556.0], [46.2, 556.0], [46.3, 556.0], [46.4, 557.0], [46.5, 557.0], [46.6, 557.0], [46.7, 558.0], [46.8, 558.0], [46.9, 558.0], [47.0, 559.0], [47.1, 559.0], [47.2, 559.0], [47.3, 560.0], [47.4, 560.0], [47.5, 560.0], [47.6, 560.0], [47.7, 561.0], [47.8, 562.0], [47.9, 562.0], [48.0, 562.0], [48.1, 563.0], [48.2, 563.0], [48.3, 563.0], [48.4, 564.0], [48.5, 565.0], [48.6, 566.0], [48.7, 567.0], [48.8, 567.0], [48.9, 567.0], [49.0, 568.0], [49.1, 568.0], [49.2, 568.0], [49.3, 569.0], [49.4, 569.0], [49.5, 569.0], [49.6, 570.0], [49.7, 570.0], [49.8, 570.0], [49.9, 571.0], [50.0, 571.0], [50.1, 571.0], [50.2, 571.0], [50.3, 572.0], [50.4, 572.0], [50.5, 572.0], [50.6, 573.0], [50.7, 573.0], [50.8, 573.0], [50.9, 574.0], [51.0, 574.0], [51.1, 575.0], [51.2, 575.0], [51.3, 576.0], [51.4, 576.0], [51.5, 576.0], [51.6, 577.0], [51.7, 577.0], [51.8, 578.0], [51.9, 578.0], [52.0, 578.0], [52.1, 578.0], [52.2, 579.0], [52.3, 579.0], [52.4, 580.0], [52.5, 580.0], [52.6, 580.0], [52.7, 580.0], [52.8, 581.0], [52.9, 581.0], [53.0, 582.0], [53.1, 582.0], [53.2, 582.0], [53.3, 583.0], [53.4, 584.0], [53.5, 585.0], [53.6, 585.0], [53.7, 585.0], [53.8, 586.0], [53.9, 586.0], [54.0, 586.0], [54.1, 587.0], [54.2, 588.0], [54.3, 589.0], [54.4, 589.0], [54.5, 590.0], [54.6, 591.0], [54.7, 591.0], [54.8, 592.0], [54.9, 592.0], [55.0, 593.0], [55.1, 593.0], [55.2, 593.0], [55.3, 593.0], [55.4, 594.0], [55.5, 595.0], [55.6, 595.0], [55.7, 596.0], [55.8, 596.0], [55.9, 597.0], [56.0, 597.0], [56.1, 597.0], [56.2, 598.0], [56.3, 598.0], [56.4, 599.0], [56.5, 599.0], [56.6, 600.0], [56.7, 600.0], [56.8, 600.0], [56.9, 600.0], [57.0, 601.0], [57.1, 602.0], [57.2, 602.0], [57.3, 602.0], [57.4, 603.0], [57.5, 603.0], [57.6, 603.0], [57.7, 604.0], [57.8, 604.0], [57.9, 605.0], [58.0, 605.0], [58.1, 606.0], [58.2, 607.0], [58.3, 607.0], [58.4, 608.0], [58.5, 608.0], [58.6, 609.0], [58.7, 609.0], [58.8, 610.0], [58.9, 611.0], [59.0, 612.0], [59.1, 612.0], [59.2, 612.0], [59.3, 613.0], [59.4, 613.0], [59.5, 613.0], [59.6, 614.0], [59.7, 614.0], [59.8, 615.0], [59.9, 616.0], [60.0, 617.0], [60.1, 617.0], [60.2, 617.0], [60.3, 617.0], [60.4, 618.0], [60.5, 619.0], [60.6, 620.0], [60.7, 621.0], [60.8, 622.0], [60.9, 623.0], [61.0, 623.0], [61.1, 623.0], [61.2, 624.0], [61.3, 624.0], [61.4, 625.0], [61.5, 625.0], [61.6, 626.0], [61.7, 626.0], [61.8, 627.0], [61.9, 628.0], [62.0, 628.0], [62.1, 629.0], [62.2, 630.0], [62.3, 631.0], [62.4, 631.0], [62.5, 632.0], [62.6, 633.0], [62.7, 634.0], [62.8, 634.0], [62.9, 635.0], [63.0, 636.0], [63.1, 637.0], [63.2, 638.0], [63.3, 638.0], [63.4, 639.0], [63.5, 640.0], [63.6, 642.0], [63.7, 643.0], [63.8, 644.0], [63.9, 644.0], [64.0, 645.0], [64.1, 645.0], [64.2, 646.0], [64.3, 646.0], [64.4, 647.0], [64.5, 648.0], [64.6, 649.0], [64.7, 650.0], [64.8, 650.0], [64.9, 652.0], [65.0, 652.0], [65.1, 653.0], [65.2, 655.0], [65.3, 656.0], [65.4, 657.0], [65.5, 657.0], [65.6, 658.0], [65.7, 658.0], [65.8, 659.0], [65.9, 659.0], [66.0, 660.0], [66.1, 660.0], [66.2, 661.0], [66.3, 663.0], [66.4, 664.0], [66.5, 664.0], [66.6, 665.0], [66.7, 666.0], [66.8, 666.0], [66.9, 667.0], [67.0, 670.0], [67.1, 670.0], [67.2, 673.0], [67.3, 674.0], [67.4, 675.0], [67.5, 676.0], [67.6, 679.0], [67.7, 683.0], [67.8, 688.0], [67.9, 692.0], [68.0, 696.0], [68.1, 700.0], [68.2, 707.0], [68.3, 707.0], [68.4, 721.0], [68.5, 724.0], [68.6, 730.0], [68.7, 736.0], [68.8, 738.0], [68.9, 741.0], [69.0, 742.0], [69.1, 745.0], [69.2, 745.0], [69.3, 750.0], [69.4, 751.0], [69.5, 752.0], [69.6, 753.0], [69.7, 753.0], [69.8, 754.0], [69.9, 755.0], [70.0, 755.0], [70.1, 756.0], [70.2, 756.0], [70.3, 757.0], [70.4, 757.0], [70.5, 758.0], [70.6, 759.0], [70.7, 759.0], [70.8, 760.0], [70.9, 761.0], [71.0, 762.0], [71.1, 762.0], [71.2, 763.0], [71.3, 764.0], [71.4, 765.0], [71.5, 765.0], [71.6, 766.0], [71.7, 767.0], [71.8, 767.0], [71.9, 768.0], [72.0, 769.0], [72.1, 770.0], [72.2, 771.0], [72.3, 772.0], [72.4, 773.0], [72.5, 775.0], [72.6, 776.0], [72.7, 778.0], [72.8, 780.0], [72.9, 781.0], [73.0, 782.0], [73.1, 783.0], [73.2, 784.0], [73.3, 785.0], [73.4, 785.0], [73.5, 785.0], [73.6, 786.0], [73.7, 787.0], [73.8, 788.0], [73.9, 789.0], [74.0, 790.0], [74.1, 790.0], [74.2, 791.0], [74.3, 791.0], [74.4, 792.0], [74.5, 793.0], [74.6, 794.0], [74.7, 794.0], [74.8, 794.0], [74.9, 795.0], [75.0, 796.0], [75.1, 797.0], [75.2, 797.0], [75.3, 798.0], [75.4, 799.0], [75.5, 799.0], [75.6, 800.0], [75.7, 802.0], [75.8, 802.0], [75.9, 803.0], [76.0, 804.0], [76.1, 805.0], [76.2, 805.0], [76.3, 806.0], [76.4, 806.0], [76.5, 807.0], [76.6, 808.0], [76.7, 809.0], [76.8, 809.0], [76.9, 810.0], [77.0, 810.0], [77.1, 811.0], [77.2, 811.0], [77.3, 812.0], [77.4, 812.0], [77.5, 812.0], [77.6, 813.0], [77.7, 814.0], [77.8, 815.0], [77.9, 815.0], [78.0, 816.0], [78.1, 816.0], [78.2, 816.0], [78.3, 817.0], [78.4, 818.0], [78.5, 818.0], [78.6, 819.0], [78.7, 819.0], [78.8, 820.0], [78.9, 821.0], [79.0, 821.0], [79.1, 822.0], [79.2, 822.0], [79.3, 822.0], [79.4, 823.0], [79.5, 824.0], [79.6, 824.0], [79.7, 827.0], [79.8, 827.0], [79.9, 828.0], [80.0, 830.0], [80.1, 831.0], [80.2, 832.0], [80.3, 834.0], [80.4, 834.0], [80.5, 836.0], [80.6, 837.0], [80.7, 837.0], [80.8, 840.0], [80.9, 841.0], [81.0, 844.0], [81.1, 846.0], [81.2, 847.0], [81.3, 850.0], [81.4, 851.0], [81.5, 852.0], [81.6, 853.0], [81.7, 855.0], [81.8, 856.0], [81.9, 860.0], [82.0, 862.0], [82.1, 864.0], [82.2, 866.0], [82.3, 868.0], [82.4, 870.0], [82.5, 871.0], [82.6, 872.0], [82.7, 873.0], [82.8, 875.0], [82.9, 882.0], [83.0, 887.0], [83.1, 890.0], [83.2, 890.0], [83.3, 896.0], [83.4, 898.0], [83.5, 905.0], [83.6, 906.0], [83.7, 910.0], [83.8, 912.0], [83.9, 917.0], [84.0, 920.0], [84.1, 922.0], [84.2, 923.0], [84.3, 928.0], [84.4, 929.0], [84.5, 940.0], [84.6, 942.0], [84.7, 944.0], [84.8, 954.0], [84.9, 961.0], [85.0, 961.0], [85.1, 967.0], [85.2, 969.0], [85.3, 971.0], [85.4, 982.0], [85.5, 1011.0], [85.6, 1014.0], [85.7, 1052.0], [85.8, 1073.0], [85.9, 1098.0], [86.0, 1114.0], [86.1, 1132.0], [86.2, 1152.0], [86.3, 1165.0], [86.4, 1168.0], [86.5, 1170.0], [86.6, 1172.0], [86.7, 1172.0], [86.8, 1173.0], [86.9, 1174.0], [87.0, 1174.0], [87.1, 1175.0], [87.2, 1175.0], [87.3, 1176.0], [87.4, 1177.0], [87.5, 1179.0], [87.6, 1181.0], [87.7, 1182.0], [87.8, 1183.0], [87.9, 1184.0], [88.0, 1184.0], [88.1, 1186.0], [88.2, 1187.0], [88.3, 1188.0], [88.4, 1190.0], [88.5, 1191.0], [88.6, 1191.0], [88.7, 1192.0], [88.8, 1194.0], [88.9, 1197.0], [89.0, 1198.0], [89.1, 1199.0], [89.2, 1201.0], [89.3, 1206.0], [89.4, 1216.0], [89.5, 1226.0], [89.6, 1229.0], [89.7, 1230.0], [89.8, 1232.0], [89.9, 1235.0], [90.0, 1242.0], [90.1, 1269.0], [90.2, 1283.0], [90.3, 1308.0], [90.4, 1319.0], [90.5, 1327.0], [90.6, 1332.0], [90.7, 1333.0], [90.8, 1359.0], [90.9, 1374.0], [91.0, 1376.0], [91.1, 1398.0], [91.2, 1400.0], [91.3, 1428.0], [91.4, 1431.0], [91.5, 1436.0], [91.6, 1440.0], [91.7, 1444.0], [91.8, 1448.0], [91.9, 1456.0], [92.0, 1457.0], [92.1, 1461.0], [92.2, 1466.0], [92.3, 1484.0], [92.4, 1512.0], [92.5, 1529.0], [92.6, 1537.0], [92.7, 1543.0], [92.8, 1545.0], [92.9, 1558.0], [93.0, 1566.0], [93.1, 1576.0], [93.2, 1580.0], [93.3, 1586.0], [93.4, 1589.0], [93.5, 1593.0], [93.6, 1597.0], [93.7, 1599.0], [93.8, 1600.0], [93.9, 1613.0], [94.0, 1616.0], [94.1, 1618.0], [94.2, 1622.0], [94.3, 1623.0], [94.4, 1625.0], [94.5, 1626.0], [94.6, 1626.0], [94.7, 1627.0], [94.8, 1629.0], [94.9, 1632.0], [95.0, 1639.0], [95.1, 1694.0], [95.2, 1714.0], [95.3, 1760.0], [95.4, 1777.0], [95.5, 1801.0], [95.6, 1816.0], [95.7, 1843.0], [95.8, 1846.0], [95.9, 1852.0], [96.0, 1859.0], [96.1, 1875.0], [96.2, 1878.0], [96.3, 1887.0], [96.4, 1890.0], [96.5, 1899.0], [96.6, 1913.0], [96.7, 1921.0], [96.8, 1927.0], [96.9, 1936.0], [97.0, 1949.0], [97.1, 1971.0], [97.2, 1974.0], [97.3, 1977.0], [97.4, 1979.0], [97.5, 1985.0], [97.6, 1987.0], [97.7, 1994.0], [97.8, 1996.0], [97.9, 2009.0], [98.0, 2020.0], [98.1, 2034.0], [98.2, 2055.0], [98.3, 2122.0], [98.4, 2227.0], [98.5, 2264.0], [98.6, 2275.0], [98.7, 2493.0], [98.8, 2511.0], [98.9, 2578.0], [99.0, 2600.0], [99.1, 2621.0], [99.2, 2624.0], [99.3, 2696.0], [99.4, 2703.0], [99.5, 2718.0], [99.6, 2735.0], [99.7, 3349.0], [99.8, 3372.0], [99.9, 3465.0], [100.0, 3892.0]], "isOverall": false, "label": "Search Video", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 584.0, "series": [{"data": [[600.0, 288.0], [700.0, 186.0], [800.0, 197.0], [900.0, 52.0], [1000.0, 11.0], [1100.0, 80.0], [1200.0, 28.0], [1300.0, 22.0], [1400.0, 31.0], [1500.0, 35.0], [100.0, 11.0], [1600.0, 34.0], [1700.0, 9.0], [1800.0, 26.0], [1900.0, 32.0], [2000.0, 11.0], [2100.0, 2.0], [2200.0, 7.0], [2400.0, 4.0], [2500.0, 5.0], [2600.0, 9.0], [2700.0, 7.0], [3100.0, 1.0], [200.0, 130.0], [3200.0, 1.0], [3300.0, 3.0], [3400.0, 3.0], [3500.0, 1.0], [3800.0, 1.0], [300.0, 407.0], [400.0, 282.0], [500.0, 584.0]], "isOverall": false, "label": "Search Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 191.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1475.0, "series": [{"data": [[0.0, 834.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1475.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 191.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 393.5591999999999, "minX": 1.57139124E12, "maxY": 393.5591999999999, "series": [{"data": [[1.57139124E12, 393.5591999999999]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139124E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 284.6, "minX": 1.0, "maxY": 3892.0, "series": [{"data": [[2.0, 3465.0], [3.0, 2275.0], [4.0, 2261.0], [5.0, 3414.0], [6.0, 2267.0], [7.0, 2264.0], [9.0, 2818.0], [10.0, 2222.0], [11.0, 3589.0], [12.0, 3372.0], [13.0, 3362.0], [14.0, 3349.0], [15.0, 2227.0], [16.0, 3273.0], [17.0, 1608.0], [18.0, 1600.0], [20.0, 1582.0], [21.0, 1572.0], [22.0, 1560.0], [23.0, 1574.0], [24.0, 1566.0], [25.0, 2735.0], [30.0, 2249.4], [31.0, 1545.0], [33.0, 1540.5], [34.0, 2709.0], [37.0, 1925.0], [39.0, 2702.0], [41.0, 1528.0], [40.0, 2117.0], [49.0, 1432.0], [51.0, 1436.0], [53.0, 2034.5], [55.0, 2127.5714285714284], [54.0, 1457.0], [58.0, 1466.0], [61.0, 1406.3333333333333], [60.0, 2052.5], [63.0, 2606.0], [62.0, 1436.0], [66.0, 1248.0], [65.0, 1242.0], [64.0, 1450.0], [71.0, 2003.0], [70.0, 1425.0], [69.0, 2585.0], [75.0, 1233.0], [74.0, 1235.0], [73.0, 1229.0], [72.0, 2600.0], [79.0, 1230.0], [77.0, 1234.0], [76.0, 1227.0], [83.0, 1227.0], [82.0, 1228.0], [80.0, 1229.0], [87.0, 1206.0], [86.0, 1979.0], [84.0, 1376.0], [91.0, 1198.0], [90.0, 1198.0], [89.0, 1203.0], [95.0, 1201.0], [94.0, 1200.0], [93.0, 1197.0], [99.0, 1187.0], [98.0, 1191.0], [97.0, 1194.0], [96.0, 1196.0], [103.0, 1187.0], [102.0, 1863.0], [100.0, 1190.0], [107.0, 1183.0], [106.0, 1181.0], [105.0, 1182.0], [104.0, 1187.0], [111.0, 1182.0], [110.0, 1193.0], [109.0, 1187.0], [108.0, 1190.0], [115.0, 1361.0], [114.0, 1191.0], [113.0, 1185.0], [112.0, 1179.0], [119.0, 1184.0], [118.0, 1186.0], [117.0, 1190.0], [116.0, 1191.0], [123.0, 1184.0], [122.0, 1935.0], [121.0, 1194.0], [127.0, 1184.0], [126.0, 1184.0], [125.0, 1198.0], [124.0, 1192.0], [135.0, 1395.0], [134.0, 1597.0], [132.0, 1834.0], [130.0, 2488.0], [129.0, 1320.0], [128.0, 2490.0], [142.0, 1319.0], [141.0, 1175.0], [140.0, 1175.0], [139.0, 1172.0], [138.0, 1178.0], [137.0, 1838.5], [150.0, 1176.3333333333333], [149.0, 1178.5], [145.0, 1191.0], [144.0, 1181.5], [158.0, 1170.0], [157.0, 1181.0], [156.0, 1181.0], [155.0, 1173.0], [154.0, 1176.0], [153.0, 1184.0], [152.0, 1252.0], [167.0, 1174.0], [165.0, 1173.5], [162.0, 1168.0], [161.0, 1176.0], [160.0, 1166.5], [175.0, 1168.0], [174.0, 1174.0], [171.0, 1175.0], [170.0, 1359.0], [169.0, 1639.0], [168.0, 1216.3333333333333], [183.0, 1226.0], [182.0, 1172.0], [179.0, 1274.5], [177.0, 1164.0], [176.0, 1166.0], [189.0, 1374.0], [188.0, 1333.0], [187.0, 1374.0], [186.0, 1333.0], [185.0, 1128.0], [199.0, 1994.0], [198.0, 1397.0], [196.0, 1512.0], [195.0, 1714.0], [194.0, 1204.0], [192.0, 1366.5], [207.0, 1622.0], [206.0, 1627.0], [205.0, 801.0], [204.0, 1626.0], [203.0, 822.5], [201.0, 1132.5], [214.0, 1067.6666666666667], [211.0, 764.0], [210.0, 801.0], [209.0, 1618.0], [208.0, 1622.0], [223.0, 796.0], [222.0, 822.0], [221.0, 789.0], [220.0, 811.0], [219.0, 759.0], [218.0, 767.0], [231.0, 1362.0], [229.0, 790.0], [228.0, 783.0], [227.0, 758.0], [226.0, 811.0], [225.0, 785.0], [224.0, 752.0], [239.0, 1930.0], [238.0, 1343.5], [236.0, 745.0], [235.0, 756.0], [234.0, 811.0], [233.0, 755.5], [247.0, 751.5], [245.0, 737.0], [243.0, 744.5], [241.0, 810.0], [240.0, 750.0], [255.0, 658.0], [253.0, 663.0], [251.0, 763.0], [248.0, 769.0], [259.0, 507.0], [270.0, 379.14285714285717], [268.0, 441.91666666666663], [269.0, 520.5], [265.0, 722.6666666666666], [267.0, 381.25], [266.0, 753.0], [264.0, 429.3333333333333], [271.0, 340.5], [262.0, 706.0], [260.0, 700.0], [261.0, 464.66666666666663], [257.0, 658.0], [258.0, 752.0], [256.0, 742.75], [263.0, 526.5], [285.0, 543.1666666666666], [282.0, 438.8181818181818], [281.0, 420.21428571428567], [280.0, 365.34999999999997], [279.0, 479.5], [272.0, 335.66666666666663], [277.0, 348.4166666666667], [276.0, 371.42857142857144], [278.0, 319.54545454545456], [273.0, 521.6], [284.0, 387.27272727272725], [274.0, 362.14285714285717], [275.0, 356.1111111111111], [287.0, 545.7333333333333], [283.0, 396.53846153846155], [286.0, 592.2], [301.0, 405.7142857142857], [302.0, 519.5555555555555], [303.0, 320.5], [300.0, 472.6666666666666], [288.0, 445.6666666666667], [289.0, 528.2272727272725], [290.0, 374.0], [291.0, 514.9047619047619], [298.0, 386.44444444444446], [296.0, 501.2857142857143], [299.0, 745.4499999999999], [297.0, 478.2222222222223], [295.0, 552.375], [294.0, 871.4615384615386], [293.0, 410.4], [292.0, 538.6923076923076], [307.0, 450.0], [318.0, 657.7], [319.0, 524.7692307692308], [317.0, 558.3], [316.0, 346.5], [314.0, 470.2631578947369], [313.0, 718.5], [315.0, 481.00000000000006], [312.0, 338.0], [311.0, 401.66666666666674], [310.0, 493.99999999999994], [308.0, 706.9444444444443], [304.0, 463.8947368421053], [305.0, 469.10526315789474], [306.0, 613.2], [309.0, 620.25], [323.0, 759.7777777777778], [335.0, 655.0], [333.0, 1291.5], [334.0, 840.0], [332.0, 1217.0], [331.0, 604.0], [330.0, 552.6], [328.0, 560.3333333333334], [329.0, 865.0], [327.0, 755.0], [326.0, 602.0], [324.0, 908.5], [325.0, 370.0], [320.0, 560.8333333333333], [322.0, 1143.909090909091], [321.0, 284.6], [350.0, 644.125], [351.0, 673.7999999999998], [348.0, 542.6], [349.0, 549.4], [347.0, 492.7], [346.0, 611.5333333333333], [344.0, 515.0], [345.0, 466.5], [343.0, 592.0], [337.0, 488.6], [336.0, 1235.0], [339.0, 587.2], [338.0, 858.6666666666666], [342.0, 1283.6666666666667], [341.0, 770.6], [340.0, 899.3333333333333], [364.0, 690.4000000000001], [363.0, 630.0], [362.0, 617.1818181818181], [360.0, 733.8000000000001], [365.0, 639.9], [367.0, 452.8571428571429], [366.0, 456.8333333333333], [361.0, 681.3333333333334], [358.0, 592.3333333333334], [359.0, 888.8888888888889], [352.0, 473.33333333333337], [356.0, 735.1666666666667], [357.0, 858.6666666666666], [355.0, 451.6], [354.0, 726.8], [353.0, 518.5], [381.0, 544.8], [382.0, 1069.0], [380.0, 885.2], [379.0, 559.25], [377.0, 905.9999999999999], [378.0, 671.8333333333334], [376.0, 444.0], [375.0, 534.0000000000001], [373.0, 633.0], [374.0, 615.0], [369.0, 946.7857142857144], [370.0, 492.25], [368.0, 463.22222222222223], [371.0, 777.0], [396.0, 558.0], [399.0, 608.0], [397.0, 483.0], [395.0, 641.6428571428572], [393.0, 554.25], [392.0, 668.0], [394.0, 823.8], [386.0, 541.6666666666666], [385.0, 1165.5], [387.0, 534.0], [384.0, 767.5714285714287], [389.0, 967.75], [390.0, 1913.0], [388.0, 577.5], [402.0, 812.5714285714286], [413.0, 596.0], [408.0, 551.5555555555555], [415.0, 1282.5], [414.0, 759.0], [407.0, 1160.0], [406.0, 507.5], [403.0, 768.2], [412.0, 648.4], [400.0, 508.75], [401.0, 449.0], [409.0, 567.25], [411.0, 629.3333333333334], [410.0, 726.0], [404.0, 564.3333333333333], [405.0, 1976.0], [429.0, 610.375], [431.0, 753.3333333333334], [424.0, 818.0], [428.0, 801.5], [419.0, 1256.0], [425.0, 713.3999999999999], [421.0, 857.0], [420.0, 906.0], [422.0, 1973.0], [416.0, 610.25], [423.0, 823.0], [417.0, 595.6], [427.0, 661.2222222222222], [430.0, 782.2], [426.0, 873.8333333333333], [445.0, 449.2], [436.0, 457.2857142857143], [437.0, 1060.0], [444.0, 587.8], [435.0, 642.125], [432.0, 491.66666666666663], [434.0, 1388.75], [439.0, 777.6], [447.0, 601.0], [443.0, 1156.0], [441.0, 747.6], [442.0, 598.0], [462.0, 429.5], [448.0, 766.7142857142857], [449.0, 626.8], [457.0, 676.3333333333334], [456.0, 516.5], [455.0, 551.25], [453.0, 588.25], [454.0, 812.5], [452.0, 464.0], [463.0, 889.3333333333333], [461.0, 923.3333333333333], [451.0, 795.25], [458.0, 674.2857142857142], [467.0, 980.6250000000001], [468.0, 749.0], [469.0, 481.8], [464.0, 939.0], [465.0, 591.5], [466.0, 776.0], [475.0, 737.3000000000001], [474.0, 676.5555555555555], [472.0, 998.7777777777778], [473.0, 538.3333333333334], [470.0, 590.0], [471.0, 946.75], [479.0, 558.0], [477.0, 578.5], [478.0, 951.5], [476.0, 489.1666666666667], [482.0, 925.0], [486.0, 781.8181818181819], [484.0, 583.4166666666667], [485.0, 604.7272727272729], [480.0, 625.2307692307693], [481.0, 607.3333333333334], [487.0, 628.8], [495.0, 597.1666666666667], [493.0, 606.1666666666666], [494.0, 632.9], [490.0, 750.4000000000001], [489.0, 603.0], [488.0, 590.25], [492.0, 753.5], [483.0, 666.1538461538461], [491.0, 642.3333333333334], [509.0, 652.0], [498.0, 733.1], [499.0, 908.625], [496.0, 733.0], [503.0, 1149.6666666666667], [502.0, 574.3333333333334], [501.0, 851.5], [500.0, 627.25], [497.0, 544.3333333333334], [511.0, 640.5], [505.0, 739.3333333333334], [504.0, 1068.0], [508.0, 673.6666666666666], [507.0, 707.4285714285714], [506.0, 583.75], [512.0, 685.25], [515.0, 615.0], [513.0, 663.875], [514.0, 837.0], [516.0, 725.5714285714286], [517.0, 729.5], [525.0, 573.6], [526.0, 781.8], [524.0, 804.5], [523.0, 650.3333333333334], [520.0, 752.0], [522.0, 798.5], [521.0, 793.5], [519.0, 628.4], [536.0, 1944.0], [539.0, 855.0], [538.0, 875.0], [528.0, 515.5], [542.0, 829.6666666666666], [531.0, 809.6], [535.0, 810.0], [534.0, 786.0], [529.0, 521.8], [569.0, 593.9000000000001], [575.0, 544.6666666666666], [571.0, 618.8750000000001], [572.0, 586.1666666666667], [568.0, 574.4444444444445], [559.0, 646.0], [545.0, 510.0], [550.0, 850.5], [549.0, 820.1666666666667], [548.0, 1052.0], [551.0, 513.3333333333334], [558.0, 514.5], [557.0, 729.6666666666667], [556.0, 580.0], [555.0, 952.25], [554.0, 727.0], [553.0, 514.0], [552.0, 514.0], [566.0, 601.1666666666667], [565.0, 672.1111111111111], [564.0, 622.6666666666666], [563.0, 569.3333333333335], [562.0, 638.5], [561.0, 639.0], [560.0, 783.5], [573.0, 558.2], [570.0, 563.25], [574.0, 633.5], [567.0, 597.4545454545454], [582.0, 574.5000000000001], [577.0, 549.1], [579.0, 602.4999999999999], [578.0, 564.0], [576.0, 598.0909090909092], [591.0, 572.9230769230769], [590.0, 584.0], [589.0, 571.0], [588.0, 579.8], [587.0, 511.75], [586.0, 575.0], [584.0, 524.25], [580.0, 548.1], [585.0, 572.4615384615385], [583.0, 532.4166666666666], [601.0, 623.4999999999999], [603.0, 751.2], [604.0, 822.0], [602.0, 638.6666666666666], [607.0, 690.5], [606.0, 792.5], [605.0, 577.6], [600.0, 547.3333333333334], [594.0, 575.625], [593.0, 599.1666666666666], [596.0, 597.1875000000001], [597.0, 594.8181818181816], [599.0, 671.0], [595.0, 563.6666666666666], [592.0, 632.2307692307692], [581.0, 555.5], [612.0, 562.0], [610.0, 632.5714285714286], [611.0, 692.5], [609.0, 587.0], [608.0, 635.75], [621.0, 750.75], [620.0, 828.6666666666666], [623.0, 849.0], [629.0, 572.0], [631.0, 577.0], [630.0, 786.5], [628.0, 732.0], [632.0, 572.0], [615.0, 800.3333333333334], [613.0, 799.0], [633.0, 817.0], [635.0, 571.0], [636.0, 707.4], [638.0, 777.0], [626.0, 802.0], [624.0, 832.0], [637.0, 771.0], [666.0, 611.75], [663.0, 819.25], [671.0, 1053.5], [667.0, 659.0], [665.0, 657.0], [664.0, 660.0], [661.0, 804.5714285714286], [654.0, 774.5], [641.0, 786.0], [640.0, 770.5], [643.0, 770.0], [642.0, 824.0], [646.0, 788.0], [645.0, 778.5], [652.0, 786.0], [651.0, 761.5], [649.0, 801.6666666666666], [681.0, 664.0], [680.0, 683.75], [678.0, 855.25], [677.0, 1439.0], [1.0, 3892.0]], "isOverall": false, "label": "Search Video", "isController": false}, {"data": [[393.55559999999986, 704.7284000000013]], "isOverall": false, "label": "Search Video-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 681.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 12916.666666666666, "minX": 1.57139124E12, "maxY": 273958.3333333333, "series": [{"data": [[1.57139124E12, 273958.3333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57139124E12, 12916.666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139124E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 704.7284000000013, "minX": 1.57139124E12, "maxY": 704.7284000000013, "series": [{"data": [[1.57139124E12, 704.7284000000013]], "isOverall": false, "label": "Search Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139124E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 698.5091999999999, "minX": 1.57139124E12, "maxY": 698.5091999999999, "series": [{"data": [[1.57139124E12, 698.5091999999999]], "isOverall": false, "label": "Search Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139124E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 343.7875999999998, "minX": 1.57139124E12, "maxY": 343.7875999999998, "series": [{"data": [[1.57139124E12, 343.7875999999998]], "isOverall": false, "label": "Search Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139124E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 165.0, "minX": 1.57139124E12, "maxY": 3892.0, "series": [{"data": [[1.57139124E12, 3892.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57139124E12, 165.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57139124E12, 1246.5000000000005]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57139124E12, 2605.9399999999987]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57139124E12, 1657.9999999999964]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139124E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 357.0, "minX": 16.0, "maxY": 3311.0, "series": [{"data": [[16.0, 3311.0], [573.0, 796.0], [602.0, 553.0], [680.0, 357.0], [185.0, 1235.0], [444.0, 548.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 680.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 356.0, "minX": 16.0, "maxY": 2265.0, "series": [{"data": [[16.0, 2265.0], [573.0, 795.0], [602.0, 552.0], [680.0, 356.0], [185.0, 1234.0], [444.0, 546.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 680.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.57139124E12, "maxY": 41.666666666666664, "series": [{"data": [[1.57139124E12, 41.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139124E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.57139124E12, "maxY": 41.666666666666664, "series": [{"data": [[1.57139124E12, 41.666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139124E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.57139124E12, "maxY": 41.666666666666664, "series": [{"data": [[1.57139124E12, 41.666666666666664]], "isOverall": false, "label": "Search Video-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139124E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.57139124E12, "maxY": 41.666666666666664, "series": [{"data": [[1.57139124E12, 41.666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139124E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

