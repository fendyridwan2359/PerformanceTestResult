/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 227.0, "minX": 0.0, "maxY": 9380.0, "series": [{"data": [[0.0, 227.0], [0.1, 251.0], [0.2, 270.0], [0.3, 275.0], [0.4, 282.0], [0.5, 291.0], [0.6, 306.0], [0.7, 308.0], [0.8, 311.0], [0.9, 315.0], [1.0, 327.0], [1.1, 329.0], [1.2, 335.0], [1.3, 338.0], [1.4, 343.0], [1.5, 346.0], [1.6, 351.0], [1.7, 353.0], [1.8, 354.0], [1.9, 355.0], [2.0, 356.0], [2.1, 359.0], [2.2, 362.0], [2.3, 367.0], [2.4, 369.0], [2.5, 370.0], [2.6, 374.0], [2.7, 375.0], [2.8, 378.0], [2.9, 384.0], [3.0, 402.0], [3.1, 417.0], [3.2, 422.0], [3.3, 423.0], [3.4, 425.0], [3.5, 429.0], [3.6, 431.0], [3.7, 434.0], [3.8, 437.0], [3.9, 441.0], [4.0, 448.0], [4.1, 449.0], [4.2, 452.0], [4.3, 455.0], [4.4, 460.0], [4.5, 470.0], [4.6, 479.0], [4.7, 483.0], [4.8, 490.0], [4.9, 503.0], [5.0, 509.0], [5.1, 512.0], [5.2, 519.0], [5.3, 524.0], [5.4, 530.0], [5.5, 533.0], [5.6, 537.0], [5.7, 538.0], [5.8, 541.0], [5.9, 541.0], [6.0, 542.0], [6.1, 543.0], [6.2, 544.0], [6.3, 545.0], [6.4, 546.0], [6.5, 547.0], [6.6, 548.0], [6.7, 552.0], [6.8, 553.0], [6.9, 555.0], [7.0, 557.0], [7.1, 558.0], [7.2, 560.0], [7.3, 563.0], [7.4, 566.0], [7.5, 567.0], [7.6, 568.0], [7.7, 570.0], [7.8, 573.0], [7.9, 574.0], [8.0, 576.0], [8.1, 576.0], [8.2, 578.0], [8.3, 578.0], [8.4, 580.0], [8.5, 581.0], [8.6, 584.0], [8.7, 586.0], [8.8, 587.0], [8.9, 591.0], [9.0, 592.0], [9.1, 593.0], [9.2, 594.0], [9.3, 595.0], [9.4, 596.0], [9.5, 598.0], [9.6, 599.0], [9.7, 600.0], [9.8, 604.0], [9.9, 607.0], [10.0, 608.0], [10.1, 610.0], [10.2, 612.0], [10.3, 618.0], [10.4, 620.0], [10.5, 623.0], [10.6, 627.0], [10.7, 628.0], [10.8, 629.0], [10.9, 631.0], [11.0, 633.0], [11.1, 635.0], [11.2, 639.0], [11.3, 640.0], [11.4, 644.0], [11.5, 645.0], [11.6, 649.0], [11.7, 650.0], [11.8, 653.0], [11.9, 655.0], [12.0, 658.0], [12.1, 659.0], [12.2, 660.0], [12.3, 663.0], [12.4, 666.0], [12.5, 667.0], [12.6, 668.0], [12.7, 669.0], [12.8, 670.0], [12.9, 671.0], [13.0, 672.0], [13.1, 673.0], [13.2, 674.0], [13.3, 675.0], [13.4, 676.0], [13.5, 676.0], [13.6, 677.0], [13.7, 678.0], [13.8, 680.0], [13.9, 682.0], [14.0, 683.0], [14.1, 684.0], [14.2, 684.0], [14.3, 685.0], [14.4, 685.0], [14.5, 686.0], [14.6, 687.0], [14.7, 688.0], [14.8, 689.0], [14.9, 689.0], [15.0, 691.0], [15.1, 691.0], [15.2, 692.0], [15.3, 694.0], [15.4, 694.0], [15.5, 695.0], [15.6, 696.0], [15.7, 697.0], [15.8, 698.0], [15.9, 698.0], [16.0, 699.0], [16.1, 700.0], [16.2, 702.0], [16.3, 702.0], [16.4, 703.0], [16.5, 704.0], [16.6, 704.0], [16.7, 705.0], [16.8, 706.0], [16.9, 706.0], [17.0, 707.0], [17.1, 707.0], [17.2, 708.0], [17.3, 708.0], [17.4, 709.0], [17.5, 709.0], [17.6, 710.0], [17.7, 710.0], [17.8, 711.0], [17.9, 712.0], [18.0, 712.0], [18.1, 713.0], [18.2, 714.0], [18.3, 714.0], [18.4, 714.0], [18.5, 715.0], [18.6, 716.0], [18.7, 716.0], [18.8, 717.0], [18.9, 717.0], [19.0, 718.0], [19.1, 718.0], [19.2, 718.0], [19.3, 719.0], [19.4, 719.0], [19.5, 720.0], [19.6, 721.0], [19.7, 721.0], [19.8, 722.0], [19.9, 722.0], [20.0, 723.0], [20.1, 723.0], [20.2, 724.0], [20.3, 725.0], [20.4, 725.0], [20.5, 725.0], [20.6, 726.0], [20.7, 726.0], [20.8, 727.0], [20.9, 728.0], [21.0, 728.0], [21.1, 729.0], [21.2, 729.0], [21.3, 730.0], [21.4, 730.0], [21.5, 731.0], [21.6, 731.0], [21.7, 732.0], [21.8, 733.0], [21.9, 733.0], [22.0, 733.0], [22.1, 733.0], [22.2, 734.0], [22.3, 735.0], [22.4, 735.0], [22.5, 735.0], [22.6, 737.0], [22.7, 738.0], [22.8, 738.0], [22.9, 739.0], [23.0, 739.0], [23.1, 740.0], [23.2, 740.0], [23.3, 741.0], [23.4, 742.0], [23.5, 742.0], [23.6, 743.0], [23.7, 744.0], [23.8, 745.0], [23.9, 746.0], [24.0, 747.0], [24.1, 747.0], [24.2, 748.0], [24.3, 749.0], [24.4, 751.0], [24.5, 751.0], [24.6, 752.0], [24.7, 753.0], [24.8, 754.0], [24.9, 756.0], [25.0, 757.0], [25.1, 758.0], [25.2, 760.0], [25.3, 762.0], [25.4, 763.0], [25.5, 765.0], [25.6, 765.0], [25.7, 766.0], [25.8, 767.0], [25.9, 767.0], [26.0, 767.0], [26.1, 769.0], [26.2, 770.0], [26.3, 771.0], [26.4, 772.0], [26.5, 772.0], [26.6, 773.0], [26.7, 774.0], [26.8, 775.0], [26.9, 777.0], [27.0, 778.0], [27.1, 780.0], [27.2, 783.0], [27.3, 784.0], [27.4, 785.0], [27.5, 787.0], [27.6, 787.0], [27.7, 788.0], [27.8, 790.0], [27.9, 791.0], [28.0, 792.0], [28.1, 794.0], [28.2, 794.0], [28.3, 795.0], [28.4, 796.0], [28.5, 798.0], [28.6, 800.0], [28.7, 803.0], [28.8, 805.0], [28.9, 807.0], [29.0, 810.0], [29.1, 811.0], [29.2, 813.0], [29.3, 814.0], [29.4, 816.0], [29.5, 816.0], [29.6, 818.0], [29.7, 819.0], [29.8, 820.0], [29.9, 821.0], [30.0, 822.0], [30.1, 824.0], [30.2, 826.0], [30.3, 828.0], [30.4, 832.0], [30.5, 834.0], [30.6, 836.0], [30.7, 838.0], [30.8, 845.0], [30.9, 849.0], [31.0, 853.0], [31.1, 858.0], [31.2, 861.0], [31.3, 865.0], [31.4, 871.0], [31.5, 880.0], [31.6, 894.0], [31.7, 896.0], [31.8, 897.0], [31.9, 900.0], [32.0, 902.0], [32.1, 906.0], [32.2, 908.0], [32.3, 910.0], [32.4, 912.0], [32.5, 913.0], [32.6, 918.0], [32.7, 919.0], [32.8, 921.0], [32.9, 922.0], [33.0, 924.0], [33.1, 925.0], [33.2, 929.0], [33.3, 931.0], [33.4, 933.0], [33.5, 935.0], [33.6, 938.0], [33.7, 939.0], [33.8, 941.0], [33.9, 947.0], [34.0, 950.0], [34.1, 951.0], [34.2, 956.0], [34.3, 958.0], [34.4, 960.0], [34.5, 963.0], [34.6, 966.0], [34.7, 968.0], [34.8, 971.0], [34.9, 977.0], [35.0, 980.0], [35.1, 981.0], [35.2, 982.0], [35.3, 984.0], [35.4, 986.0], [35.5, 987.0], [35.6, 989.0], [35.7, 991.0], [35.8, 992.0], [35.9, 993.0], [36.0, 994.0], [36.1, 996.0], [36.2, 997.0], [36.3, 998.0], [36.4, 999.0], [36.5, 1002.0], [36.6, 1003.0], [36.7, 1007.0], [36.8, 1010.0], [36.9, 1014.0], [37.0, 1018.0], [37.1, 1023.0], [37.2, 1025.0], [37.3, 1027.0], [37.4, 1029.0], [37.5, 1034.0], [37.6, 1037.0], [37.7, 1038.0], [37.8, 1040.0], [37.9, 1043.0], [38.0, 1043.0], [38.1, 1045.0], [38.2, 1048.0], [38.3, 1050.0], [38.4, 1053.0], [38.5, 1056.0], [38.6, 1059.0], [38.7, 1062.0], [38.8, 1065.0], [38.9, 1067.0], [39.0, 1069.0], [39.1, 1071.0], [39.2, 1074.0], [39.3, 1078.0], [39.4, 1080.0], [39.5, 1083.0], [39.6, 1086.0], [39.7, 1092.0], [39.8, 1094.0], [39.9, 1098.0], [40.0, 1100.0], [40.1, 1102.0], [40.2, 1103.0], [40.3, 1105.0], [40.4, 1106.0], [40.5, 1109.0], [40.6, 1112.0], [40.7, 1112.0], [40.8, 1114.0], [40.9, 1116.0], [41.0, 1118.0], [41.1, 1120.0], [41.2, 1122.0], [41.3, 1124.0], [41.4, 1132.0], [41.5, 1140.0], [41.6, 1142.0], [41.7, 1154.0], [41.8, 1165.0], [41.9, 1169.0], [42.0, 1172.0], [42.1, 1175.0], [42.2, 1177.0], [42.3, 1192.0], [42.4, 1200.0], [42.5, 1206.0], [42.6, 1213.0], [42.7, 1220.0], [42.8, 1230.0], [42.9, 1235.0], [43.0, 1240.0], [43.1, 1247.0], [43.2, 1253.0], [43.3, 1261.0], [43.4, 1265.0], [43.5, 1280.0], [43.6, 1289.0], [43.7, 1292.0], [43.8, 1294.0], [43.9, 1298.0], [44.0, 1301.0], [44.1, 1305.0], [44.2, 1307.0], [44.3, 1315.0], [44.4, 1319.0], [44.5, 1324.0], [44.6, 1326.0], [44.7, 1328.0], [44.8, 1330.0], [44.9, 1382.0], [45.0, 1390.0], [45.1, 1395.0], [45.2, 1400.0], [45.3, 1403.0], [45.4, 1406.0], [45.5, 1406.0], [45.6, 1409.0], [45.7, 1413.0], [45.8, 1416.0], [45.9, 1422.0], [46.0, 1424.0], [46.1, 1430.0], [46.2, 1438.0], [46.3, 1444.0], [46.4, 1447.0], [46.5, 1453.0], [46.6, 1456.0], [46.7, 1462.0], [46.8, 1467.0], [46.9, 1469.0], [47.0, 1471.0], [47.1, 1478.0], [47.2, 1483.0], [47.3, 1494.0], [47.4, 1497.0], [47.5, 1499.0], [47.6, 1501.0], [47.7, 1503.0], [47.8, 1506.0], [47.9, 1507.0], [48.0, 1508.0], [48.1, 1510.0], [48.2, 1511.0], [48.3, 1512.0], [48.4, 1513.0], [48.5, 1514.0], [48.6, 1515.0], [48.7, 1516.0], [48.8, 1516.0], [48.9, 1518.0], [49.0, 1519.0], [49.1, 1520.0], [49.2, 1522.0], [49.3, 1523.0], [49.4, 1524.0], [49.5, 1526.0], [49.6, 1528.0], [49.7, 1528.0], [49.8, 1530.0], [49.9, 1533.0], [50.0, 1534.0], [50.1, 1535.0], [50.2, 1536.0], [50.3, 1539.0], [50.4, 1540.0], [50.5, 1543.0], [50.6, 1544.0], [50.7, 1544.0], [50.8, 1547.0], [50.9, 1548.0], [51.0, 1550.0], [51.1, 1554.0], [51.2, 1557.0], [51.3, 1560.0], [51.4, 1563.0], [51.5, 1579.0], [51.6, 1584.0], [51.7, 1614.0], [51.8, 1621.0], [51.9, 1624.0], [52.0, 1629.0], [52.1, 1636.0], [52.2, 1642.0], [52.3, 1650.0], [52.4, 1658.0], [52.5, 1668.0], [52.6, 1670.0], [52.7, 1678.0], [52.8, 1682.0], [52.9, 1685.0], [53.0, 1688.0], [53.1, 1695.0], [53.2, 1697.0], [53.3, 1704.0], [53.4, 1706.0], [53.5, 1708.0], [53.6, 1709.0], [53.7, 1711.0], [53.8, 1714.0], [53.9, 1715.0], [54.0, 1718.0], [54.1, 1724.0], [54.2, 1725.0], [54.3, 1732.0], [54.4, 1735.0], [54.5, 1739.0], [54.6, 1741.0], [54.7, 1745.0], [54.8, 1747.0], [54.9, 1750.0], [55.0, 1755.0], [55.1, 1762.0], [55.2, 1766.0], [55.3, 1789.0], [55.4, 1798.0], [55.5, 1803.0], [55.6, 1807.0], [55.7, 1814.0], [55.8, 1816.0], [55.9, 1818.0], [56.0, 1820.0], [56.1, 1823.0], [56.2, 1827.0], [56.3, 1829.0], [56.4, 1831.0], [56.5, 1834.0], [56.6, 1836.0], [56.7, 1837.0], [56.8, 1838.0], [56.9, 1842.0], [57.0, 1844.0], [57.1, 1846.0], [57.2, 1847.0], [57.3, 1850.0], [57.4, 1851.0], [57.5, 1852.0], [57.6, 1854.0], [57.7, 1856.0], [57.8, 1858.0], [57.9, 1862.0], [58.0, 1867.0], [58.1, 1882.0], [58.2, 1887.0], [58.3, 1891.0], [58.4, 1896.0], [58.5, 1915.0], [58.6, 1921.0], [58.7, 1927.0], [58.8, 1936.0], [58.9, 1943.0], [59.0, 1949.0], [59.1, 1958.0], [59.2, 1963.0], [59.3, 1965.0], [59.4, 1967.0], [59.5, 1971.0], [59.6, 1973.0], [59.7, 1975.0], [59.8, 1976.0], [59.9, 1978.0], [60.0, 1978.0], [60.1, 1980.0], [60.2, 1982.0], [60.3, 1984.0], [60.4, 1987.0], [60.5, 1990.0], [60.6, 1993.0], [60.7, 1998.0], [60.8, 2003.0], [60.9, 2010.0], [61.0, 2014.0], [61.1, 2021.0], [61.2, 2025.0], [61.3, 2028.0], [61.4, 2031.0], [61.5, 2035.0], [61.6, 2057.0], [61.7, 2078.0], [61.8, 2084.0], [61.9, 2086.0], [62.0, 2088.0], [62.1, 2089.0], [62.2, 2091.0], [62.3, 2093.0], [62.4, 2094.0], [62.5, 2095.0], [62.6, 2096.0], [62.7, 2098.0], [62.8, 2098.0], [62.9, 2099.0], [63.0, 2100.0], [63.1, 2101.0], [63.2, 2101.0], [63.3, 2102.0], [63.4, 2103.0], [63.5, 2104.0], [63.6, 2104.0], [63.7, 2105.0], [63.8, 2106.0], [63.9, 2107.0], [64.0, 2108.0], [64.1, 2109.0], [64.2, 2109.0], [64.3, 2110.0], [64.4, 2111.0], [64.5, 2111.0], [64.6, 2111.0], [64.7, 2112.0], [64.8, 2113.0], [64.9, 2114.0], [65.0, 2115.0], [65.1, 2116.0], [65.2, 2117.0], [65.3, 2118.0], [65.4, 2118.0], [65.5, 2119.0], [65.6, 2120.0], [65.7, 2121.0], [65.8, 2122.0], [65.9, 2127.0], [66.0, 2128.0], [66.1, 2131.0], [66.2, 2132.0], [66.3, 2135.0], [66.4, 2137.0], [66.5, 2141.0], [66.6, 2142.0], [66.7, 2144.0], [66.8, 2145.0], [66.9, 2149.0], [67.0, 2150.0], [67.1, 2157.0], [67.2, 2162.0], [67.3, 2164.0], [67.4, 2165.0], [67.5, 2167.0], [67.6, 2169.0], [67.7, 2172.0], [67.8, 2173.0], [67.9, 2174.0], [68.0, 2177.0], [68.1, 2179.0], [68.2, 2180.0], [68.3, 2182.0], [68.4, 2185.0], [68.5, 2190.0], [68.6, 2193.0], [68.7, 2197.0], [68.8, 2200.0], [68.9, 2207.0], [69.0, 2213.0], [69.1, 2223.0], [69.2, 2242.0], [69.3, 2282.0], [69.4, 2287.0], [69.5, 2303.0], [69.6, 2310.0], [69.7, 2393.0], [69.8, 2407.0], [69.9, 2412.0], [70.0, 2419.0], [70.1, 2425.0], [70.2, 2430.0], [70.3, 2435.0], [70.4, 2440.0], [70.5, 2443.0], [70.6, 2451.0], [70.7, 2453.0], [70.8, 2459.0], [70.9, 2469.0], [71.0, 2489.0], [71.1, 2493.0], [71.2, 2496.0], [71.3, 2497.0], [71.4, 2499.0], [71.5, 2501.0], [71.6, 2506.0], [71.7, 2513.0], [71.8, 2532.0], [71.9, 2543.0], [72.0, 2556.0], [72.1, 2581.0], [72.2, 2600.0], [72.3, 2613.0], [72.4, 2618.0], [72.5, 2638.0], [72.6, 2649.0], [72.7, 2661.0], [72.8, 2705.0], [72.9, 2757.0], [73.0, 2780.0], [73.1, 2814.0], [73.2, 2835.0], [73.3, 2851.0], [73.4, 2855.0], [73.5, 2870.0], [73.6, 2881.0], [73.7, 2890.0], [73.8, 2897.0], [73.9, 2909.0], [74.0, 2914.0], [74.1, 2915.0], [74.2, 2918.0], [74.3, 2919.0], [74.4, 2920.0], [74.5, 2921.0], [74.6, 2923.0], [74.7, 2926.0], [74.8, 2928.0], [74.9, 2932.0], [75.0, 2935.0], [75.1, 2940.0], [75.2, 2945.0], [75.3, 2951.0], [75.4, 2953.0], [75.5, 2961.0], [75.6, 2967.0], [75.7, 2980.0], [75.8, 2992.0], [75.9, 3007.0], [76.0, 3010.0], [76.1, 3026.0], [76.2, 3029.0], [76.3, 3031.0], [76.4, 3037.0], [76.5, 3048.0], [76.6, 3053.0], [76.7, 3066.0], [76.8, 3068.0], [76.9, 3072.0], [77.0, 3076.0], [77.1, 3084.0], [77.2, 3085.0], [77.3, 3087.0], [77.4, 3091.0], [77.5, 3093.0], [77.6, 3098.0], [77.7, 3099.0], [77.8, 3105.0], [77.9, 3110.0], [78.0, 3114.0], [78.1, 3117.0], [78.2, 3123.0], [78.3, 3127.0], [78.4, 3129.0], [78.5, 3134.0], [78.6, 3137.0], [78.7, 3144.0], [78.8, 3146.0], [78.9, 3149.0], [79.0, 3151.0], [79.1, 3154.0], [79.2, 3157.0], [79.3, 3159.0], [79.4, 3164.0], [79.5, 3170.0], [79.6, 3173.0], [79.7, 3177.0], [79.8, 3182.0], [79.9, 3185.0], [80.0, 3187.0], [80.1, 3188.0], [80.2, 3189.0], [80.3, 3190.0], [80.4, 3191.0], [80.5, 3195.0], [80.6, 3198.0], [80.7, 3200.0], [80.8, 3204.0], [80.9, 3207.0], [81.0, 3210.0], [81.1, 3216.0], [81.2, 3219.0], [81.3, 3225.0], [81.4, 3236.0], [81.5, 3244.0], [81.6, 3253.0], [81.7, 3266.0], [81.8, 3268.0], [81.9, 3270.0], [82.0, 3274.0], [82.1, 3278.0], [82.2, 3280.0], [82.3, 3282.0], [82.4, 3284.0], [82.5, 3286.0], [82.6, 3288.0], [82.7, 3291.0], [82.8, 3292.0], [82.9, 3296.0], [83.0, 3303.0], [83.1, 3309.0], [83.2, 3314.0], [83.3, 3320.0], [83.4, 3322.0], [83.5, 3327.0], [83.6, 3339.0], [83.7, 3346.0], [83.8, 3349.0], [83.9, 3355.0], [84.0, 3357.0], [84.1, 3364.0], [84.2, 3370.0], [84.3, 3376.0], [84.4, 3385.0], [84.5, 3391.0], [84.6, 3396.0], [84.7, 3404.0], [84.8, 3408.0], [84.9, 3415.0], [85.0, 3438.0], [85.1, 3443.0], [85.2, 3454.0], [85.3, 3461.0], [85.4, 3480.0], [85.5, 3491.0], [85.6, 3500.0], [85.7, 3517.0], [85.8, 3523.0], [85.9, 3538.0], [86.0, 3541.0], [86.1, 3547.0], [86.2, 3559.0], [86.3, 3573.0], [86.4, 3575.0], [86.5, 3612.0], [86.6, 3617.0], [86.7, 3651.0], [86.8, 3657.0], [86.9, 3666.0], [87.0, 3671.0], [87.1, 3675.0], [87.2, 3679.0], [87.3, 3682.0], [87.4, 3686.0], [87.5, 3692.0], [87.6, 3694.0], [87.7, 3697.0], [87.8, 3698.0], [87.9, 3700.0], [88.0, 3702.0], [88.1, 3705.0], [88.2, 3709.0], [88.3, 3713.0], [88.4, 3715.0], [88.5, 3724.0], [88.6, 3729.0], [88.7, 3759.0], [88.8, 3776.0], [88.9, 3796.0], [89.0, 3821.0], [89.1, 3847.0], [89.2, 3873.0], [89.3, 3897.0], [89.4, 3964.0], [89.5, 4007.0], [89.6, 4125.0], [89.7, 4158.0], [89.8, 4166.0], [89.9, 4189.0], [90.0, 4200.0], [90.1, 4241.0], [90.2, 4299.0], [90.3, 4325.0], [90.4, 4373.0], [90.5, 4412.0], [90.6, 4446.0], [90.7, 4496.0], [90.8, 4510.0], [90.9, 4534.0], [91.0, 4570.0], [91.1, 4611.0], [91.2, 4643.0], [91.3, 4673.0], [91.4, 4677.0], [91.5, 4683.0], [91.6, 4691.0], [91.7, 4699.0], [91.8, 4722.0], [91.9, 4762.0], [92.0, 4775.0], [92.1, 4779.0], [92.2, 4781.0], [92.3, 4784.0], [92.4, 4788.0], [92.5, 4798.0], [92.6, 4801.0], [92.7, 4820.0], [92.8, 4825.0], [92.9, 4835.0], [93.0, 4842.0], [93.1, 4846.0], [93.2, 4849.0], [93.3, 4886.0], [93.4, 4895.0], [93.5, 4906.0], [93.6, 4920.0], [93.7, 4952.0], [93.8, 4968.0], [93.9, 4980.0], [94.0, 4988.0], [94.1, 5005.0], [94.2, 5027.0], [94.3, 5035.0], [94.4, 5044.0], [94.5, 5049.0], [94.6, 5052.0], [94.7, 5055.0], [94.8, 5062.0], [94.9, 5070.0], [95.0, 5079.0], [95.1, 5084.0], [95.2, 5094.0], [95.3, 5104.0], [95.4, 5111.0], [95.5, 5122.0], [95.6, 5129.0], [95.7, 5139.0], [95.8, 5152.0], [95.9, 5169.0], [96.0, 5175.0], [96.1, 5198.0], [96.2, 5233.0], [96.3, 5250.0], [96.4, 5270.0], [96.5, 5301.0], [96.6, 5325.0], [96.7, 5339.0], [96.8, 5346.0], [96.9, 5363.0], [97.0, 5401.0], [97.1, 5407.0], [97.2, 5422.0], [97.3, 5459.0], [97.4, 5521.0], [97.5, 5650.0], [97.6, 5671.0], [97.7, 5679.0], [97.8, 5728.0], [97.9, 5843.0], [98.0, 5908.0], [98.1, 6090.0], [98.2, 6175.0], [98.3, 6305.0], [98.4, 6403.0], [98.5, 6427.0], [98.6, 6455.0], [98.7, 6587.0], [98.8, 6641.0], [98.9, 6729.0], [99.0, 6904.0], [99.1, 7136.0], [99.2, 7362.0], [99.3, 7445.0], [99.4, 7578.0], [99.5, 7932.0], [99.6, 8850.0], [99.7, 9165.0], [99.8, 9229.0], [99.9, 9293.0], [100.0, 9380.0]], "isOverall": false, "label": "Search Video", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 565.0, "series": [{"data": [[600.0, 285.0], [700.0, 565.0], [800.0, 147.0], [900.0, 206.0], [1000.0, 159.0], [1100.0, 109.0], [1200.0, 71.0], [1300.0, 54.0], [1400.0, 106.0], [1500.0, 186.0], [1600.0, 72.0], [1700.0, 98.0], [1800.0, 134.0], [1900.0, 105.0], [2000.0, 99.0], [2100.0, 263.0], [2200.0, 30.0], [2300.0, 13.0], [2400.0, 77.0], [2500.0, 33.0], [2600.0, 27.0], [2700.0, 11.0], [2800.0, 36.0], [2900.0, 92.0], [3000.0, 83.0], [3100.0, 133.0], [3200.0, 103.0], [3300.0, 76.0], [3400.0, 41.0], [3500.0, 42.0], [3600.0, 60.0], [3700.0, 49.0], [3800.0, 18.0], [3900.0, 6.0], [4000.0, 6.0], [4100.0, 18.0], [4300.0, 12.0], [4200.0, 10.0], [4400.0, 13.0], [4500.0, 14.0], [4600.0, 29.0], [4800.0, 40.0], [4700.0, 37.0], [4900.0, 30.0], [5000.0, 53.0], [5100.0, 38.0], [5300.0, 22.0], [5200.0, 17.0], [5500.0, 3.0], [5600.0, 15.0], [5400.0, 17.0], [5700.0, 3.0], [5800.0, 7.0], [5900.0, 3.0], [6000.0, 3.0], [6100.0, 4.0], [6200.0, 3.0], [6300.0, 5.0], [6400.0, 12.0], [6500.0, 3.0], [6600.0, 5.0], [6700.0, 7.0], [6900.0, 1.0], [7000.0, 4.0], [7100.0, 1.0], [7300.0, 6.0], [7400.0, 2.0], [7200.0, 1.0], [7500.0, 5.0], [7600.0, 2.0], [7900.0, 2.0], [7700.0, 1.0], [8200.0, 1.0], [8300.0, 1.0], [8800.0, 1.0], [8900.0, 1.0], [9100.0, 5.0], [9200.0, 8.0], [9300.0, 4.0], [200.0, 24.0], [300.0, 111.0], [400.0, 84.0], [500.0, 217.0]], "isOverall": false, "label": "Search Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 219.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2360.0, "series": [{"data": [[0.0, 219.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1921.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2360.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 578.6513387660073, "minX": 1.57139022E12, "maxY": 1081.2178289000701, "series": [{"data": [[1.57139028E12, 1081.2178289000701], [1.57139022E12, 578.6513387660073]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139028E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 358.0000000000001, "minX": 1.0, "maxY": 9380.0, "series": [{"data": [[2.0, 9374.0], [3.0, 9360.0], [5.0, 9251.5], [9.0, 9250.75], [10.0, 9210.0], [11.0, 9293.0], [12.0, 9293.0], [14.0, 9166.0], [15.0, 9153.0], [16.0, 9155.0], [17.0, 9134.0], [18.0, 8917.0], [19.0, 8850.0], [20.0, 6904.0], [21.0, 8377.0], [22.0, 6792.0], [23.0, 6761.0], [24.0, 6729.0], [25.0, 7387.0], [26.0, 6742.0], [27.0, 7932.0], [28.0, 6717.0], [29.0, 6723.0], [30.0, 6641.0], [31.0, 6620.0], [33.0, 6653.0], [32.0, 6600.0], [35.0, 6555.0], [34.0, 8204.0], [37.0, 7593.0], [36.0, 7663.0], [39.0, 7700.0], [38.0, 7578.0], [41.0, 7514.0], [40.0, 7517.0], [43.0, 6623.0], [42.0, 7988.0], [45.0, 7371.0], [44.0, 6587.0], [47.0, 7362.0], [46.0, 7370.0], [49.0, 6434.0], [48.0, 7343.0], [51.0, 7136.0], [50.0, 7252.0], [53.0, 7017.0], [52.0, 7048.0], [55.0, 7014.0], [54.0, 7001.0], [57.0, 6709.0], [56.0, 6167.0], [59.0, 6078.0], [58.0, 6090.0], [61.0, 6375.0], [60.0, 6417.0], [63.0, 6405.0], [62.0, 6341.0], [67.0, 6455.0], [66.0, 6459.0], [65.0, 6488.0], [64.0, 6305.0], [71.0, 6493.333333333333], [68.0, 6427.0], [75.0, 6573.0], [74.0, 5908.0], [73.0, 7521.0], [72.0, 5177.0], [79.0, 5098.0], [78.0, 5688.0], [83.0, 5335.0], [82.0, 5333.0], [81.0, 5850.0], [80.0, 5339.0], [87.0, 5054.0], [86.0, 5325.0], [85.0, 5323.0], [84.0, 5843.0], [91.0, 7445.0], [90.0, 5808.5], [88.0, 5063.0], [95.0, 5285.0], [94.0, 5752.666666666667], [99.0, 7413.0], [98.0, 6330.0], [97.0, 6304.0], [96.0, 5788.0], [103.0, 4990.0], [102.0, 5586.333333333333], [107.0, 5700.0], [106.0, 5728.0], [105.0, 4988.0], [104.0, 6175.0], [111.0, 6439.0], [110.0, 6443.0], [109.0, 6420.0], [108.0, 6157.0], [115.0, 6130.0], [114.0, 7342.0], [113.0, 5676.0], [112.0, 5674.0], [119.0, 5653.0], [118.0, 5696.0], [116.0, 5693.0], [122.0, 5075.0], [121.0, 5569.0], [127.0, 5657.0], [125.0, 5652.0], [124.0, 5672.5], [135.0, 5590.0], [134.0, 4990.0], [133.0, 5604.0], [132.0, 5638.0], [131.0, 5654.0], [130.0, 5047.5], [128.0, 5641.0], [142.0, 5294.0], [141.0, 5460.0], [140.0, 5301.0], [139.0, 5327.0], [138.0, 4887.0], [137.0, 4906.0], [136.0, 4977.0], [151.0, 5401.0], [150.0, 5422.0], [149.0, 5273.0], [148.0, 5426.0], [147.0, 5318.0], [146.0, 5446.0], [145.0, 5407.0], [144.0, 5411.5], [159.0, 5270.0], [158.0, 5370.0], [155.0, 5406.0], [154.0, 5384.0], [153.0, 5433.0], [152.0, 5418.0], [167.0, 5302.5], [165.0, 5369.0], [164.0, 5333.0], [162.0, 5357.0], [161.0, 5386.0], [160.0, 5418.0], [175.0, 5363.0], [174.0, 5222.0], [173.0, 5249.0], [172.0, 5327.0], [171.0, 5215.0], [170.0, 5233.0], [169.0, 5250.0], [168.0, 5356.0], [183.0, 5319.0], [182.0, 5182.0], [181.0, 5196.0], [180.0, 5198.0], [179.0, 5344.0], [178.0, 5339.0], [177.0, 5345.0], [176.0, 5258.0], [191.0, 5086.0], [190.0, 5174.0], [189.0, 5175.0], [188.0, 5162.0], [187.0, 5176.0], [185.0, 5174.0], [184.0, 5226.0], [199.0, 5254.0], [198.0, 5156.0], [197.0, 5131.5], [195.0, 5128.5], [193.0, 5139.0], [192.0, 5147.0], [207.0, 5126.0], [206.0, 5122.0], [205.0, 5124.0], [204.0, 5671.0], [203.0, 5064.0], [202.0, 5120.333333333333], [215.0, 5076.0], [212.0, 5096.0], [210.0, 5502.0], [209.0, 5129.0], [208.0, 5146.0], [223.0, 4606.5], [221.0, 5065.0], [220.0, 5050.0], [219.0, 5103.0], [218.0, 5094.0], [216.0, 5094.0], [231.0, 5068.0], [230.0, 5073.0], [229.0, 5046.666666666667], [226.0, 5050.0], [225.0, 5067.0], [239.0, 5062.0], [238.0, 5101.0], [236.0, 5049.0], [235.0, 5052.0], [234.0, 5062.0], [233.0, 5055.0], [232.0, 5070.0], [245.0, 5164.0], [244.0, 5027.0], [243.0, 5038.0], [242.0, 5027.0], [241.0, 5051.0], [240.0, 5040.0], [254.0, 5168.0], [252.0, 4992.0], [251.0, 3965.0], [250.0, 5006.0], [249.0, 5044.25], [270.0, 4895.0], [271.0, 5160.0], [269.0, 4899.0], [268.0, 4910.0], [267.0, 4906.0], [266.0, 3886.0], [265.0, 4920.0], [264.0, 3899.0], [262.0, 4981.0], [257.0, 4980.0], [256.0, 5117.5], [259.0, 4968.0], [258.0, 4971.0], [261.0, 4926.0], [260.0, 5083.0], [275.0, 4884.0], [285.0, 4929.0], [282.0, 4849.0], [281.0, 4846.0], [279.0, 4980.0], [278.0, 4493.5], [276.0, 5152.0], [274.0, 4881.0], [273.0, 4885.0], [272.0, 4887.0], [302.0, 4842.0], [303.0, 4835.0], [301.0, 4849.0], [300.0, 4849.0], [299.0, 4320.0], [297.0, 4906.0], [296.0, 4910.0], [295.0, 4923.0], [289.0, 4127.75], [291.0, 4942.0], [290.0, 3768.0], [294.0, 3821.0], [293.0, 3755.0], [292.0, 3729.0], [317.0, 4727.0], [319.0, 4293.5], [316.0, 3765.0], [305.0, 3711.0], [304.0, 3725.0], [315.0, 4820.0], [314.0, 4776.0], [313.0, 4733.0], [311.0, 4818.0], [310.0, 3778.0], [309.0, 4825.0], [308.0, 3729.0], [335.0, 4684.666666666667], [332.0, 4685.0], [323.0, 4732.0], [322.0, 4792.0], [321.0, 4829.0], [320.0, 4835.0], [331.0, 4697.0], [330.0, 4683.0], [329.0, 4716.0], [328.0, 4800.0], [327.0, 4707.5], [325.0, 4721.0], [324.0, 4785.0], [350.0, 4930.0], [351.0, 4643.0], [349.0, 3578.0], [348.0, 4601.0], [347.0, 4847.0], [346.0, 4686.0], [345.0, 5169.0], [344.0, 4653.0], [341.0, 4651.0], [339.0, 3641.0], [338.0, 4689.0], [337.0, 4781.0], [336.0, 4699.0], [340.0, 4651.0], [366.0, 5005.0], [367.0, 4952.0], [365.0, 5028.0], [364.0, 5035.0], [363.0, 5053.0], [362.0, 5054.0], [361.0, 6261.0], [360.0, 5070.0], [359.0, 5087.0], [352.0, 3575.0], [354.0, 4626.0], [353.0, 5079.0], [358.0, 4219.0], [357.0, 5098.0], [356.0, 5095.0], [383.0, 4399.0], [380.0, 4414.0], [371.0, 4486.0], [370.0, 4962.0], [369.0, 4910.0], [368.0, 4957.0], [379.0, 4842.0], [378.0, 4818.0], [377.0, 4431.0], [376.0, 4446.0], [375.0, 4260.0], [374.0, 4461.0], [373.0, 4886.0], [372.0, 4891.0], [399.0, 5408.5], [397.0, 4783.5], [396.0, 4584.666666666667], [392.0, 4180.0], [391.0, 4523.333333333333], [388.0, 4241.0], [415.0, 5088.0], [411.0, 4798.333333333333], [408.0, 5428.0], [407.0, 4799.5], [406.0, 4840.0], [403.0, 4809.5], [429.0, 775.5], [431.0, 2649.5], [428.0, 790.0], [427.0, 693.0], [426.0, 4779.666666666667], [424.0, 1203.0], [422.0, 3247.2], [420.0, 2048.666666666667], [421.0, 4788.0], [418.0, 667.0], [423.0, 4780.0], [430.0, 4709.0], [445.0, 2081.9], [444.0, 689.6], [435.0, 1401.0], [433.0, 2254.0], [434.0, 4299.0], [432.0, 1213.0], [443.0, 944.25], [441.0, 1859.3333333333333], [440.0, 794.5], [446.0, 3119.0], [442.0, 2534.0], [439.0, 824.3333333333334], [438.0, 706.0], [436.0, 2711.0], [437.0, 1160.0], [450.0, 2303.8333333333335], [462.0, 1602.4285714285716], [463.0, 799.375], [456.0, 2474.25], [461.0, 920.75], [460.0, 3189.0], [459.0, 1298.857142857143], [457.0, 1148.8], [455.0, 1616.8], [453.0, 691.0], [454.0, 2651.5], [452.0, 1468.3333333333333], [448.0, 640.0], [478.0, 887.3000000000001], [476.0, 1807.5454545454545], [477.0, 954.1666666666666], [467.0, 836.5], [466.0, 876.3124999999999], [464.0, 1727.4285714285716], [465.0, 806.1428571428571], [475.0, 1069.2105263157896], [474.0, 1565.2222222222222], [473.0, 828.421052631579], [472.0, 866.8571428571428], [479.0, 1563.25], [471.0, 846.1818181818181], [470.0, 946.375], [469.0, 780.0909090909091], [468.0, 1002.1818181818182], [483.0, 1507.4285714285716], [495.0, 843.8888888888889], [494.0, 852.3181818181818], [493.0, 723.1999999999998], [492.0, 728.6666666666666], [481.0, 1854.1764705882354], [482.0, 997.0], [480.0, 1056.230769230769], [491.0, 841.0], [490.0, 958.0], [486.0, 1079.375], [487.0, 1059.8], [485.0, 1245.8125], [489.0, 913.0909090909091], [488.0, 942.4000000000001], [484.0, 909.8750000000001], [511.0, 835.3333333333334], [508.0, 669.6153846153846], [507.0, 626.0000000000001], [506.0, 1412.9473684210527], [504.0, 644.8750000000001], [505.0, 1088.375], [509.0, 663.4], [510.0, 706.4285714285714], [503.0, 880.9166666666666], [501.0, 904.1250000000001], [502.0, 1483.5], [500.0, 898.7777777777778], [498.0, 1055.058823529412], [499.0, 2465.6], [497.0, 944.2307692307693], [496.0, 1171.5714285714287], [537.0, 1583.375], [542.0, 547.0], [539.0, 1133.0], [536.0, 953.3333333333333], [519.0, 598.5], [517.0, 607.1875], [518.0, 718.4166666666666], [516.0, 577.0500000000001], [514.0, 583.0], [513.0, 647.8], [512.0, 660.875], [515.0, 586.375], [527.0, 941.5], [526.0, 1496.7272727272725], [525.0, 549.0], [523.0, 1222.375], [524.0, 643.5], [522.0, 611.3076923076924], [521.0, 1975.2727272727273], [520.0, 859.25], [543.0, 969.8333333333335], [528.0, 1129.5], [530.0, 525.8333333333333], [529.0, 1245.2727272727273], [541.0, 999.4285714285714], [540.0, 1043.4285714285716], [538.0, 520.6666666666667], [532.0, 550.5], [535.0, 522.5], [534.0, 2707.6666666666665], [533.0, 546.0], [531.0, 1330.8333333333335], [569.0, 929.5555555555557], [573.0, 1189.8], [564.0, 721.9], [572.0, 822.6], [574.0, 723.1999999999999], [560.0, 696.6666666666666], [575.0, 1308.3333333333335], [571.0, 995.7142857142857], [570.0, 904.6153846153845], [568.0, 1045.0], [551.0, 2440.857142857143], [550.0, 584.6666666666666], [549.0, 1890.0], [545.0, 805.2857142857142], [546.0, 2230.75], [548.0, 1866.0], [547.0, 3133.5], [544.0, 2058.857142857143], [558.0, 709.5], [557.0, 738.0], [556.0, 728.5], [555.0, 664.0], [553.0, 662.0], [552.0, 643.0], [566.0, 2047.625], [567.0, 677.8], [565.0, 717.0], [563.0, 729.0], [562.0, 1040.0], [561.0, 733.0], [580.0, 1714.357142857143], [591.0, 1356.818181818182], [576.0, 672.6], [577.0, 1044.4285714285713], [578.0, 1113.5555555555557], [579.0, 605.9999999999999], [582.0, 1063.2857142857142], [583.0, 1226.7142857142858], [600.0, 3081.4], [601.0, 640.5], [605.0, 727.0], [604.0, 667.0], [603.0, 2644.5], [602.0, 1912.6666666666667], [606.0, 756.0], [581.0, 1481.6666666666665], [594.0, 699.0], [593.0, 3095.0], [595.0, 1309.25], [597.0, 3190.0], [596.0, 3095.5], [599.0, 709.0], [598.0, 716.25], [592.0, 742.375], [588.0, 1549.3333333333335], [589.0, 1236.0], [590.0, 1515.4], [586.0, 685.0], [587.0, 1357.25], [585.0, 1873.0], [624.0, 1525.0], [636.0, 2880.0], [635.0, 703.6666666666666], [630.0, 1062.0], [626.0, 1645.375], [625.0, 772.6], [639.0, 806.0], [638.0, 857.0], [637.0, 1836.5], [627.0, 771.5], [628.0, 3049.5], [629.0, 3072.0], [622.0, 2575.6249999999995], [608.0, 3146.0], [613.0, 3134.3333333333335], [612.0, 4496.0], [620.0, 3197.0], [619.0, 3202.0], [617.0, 3415.6666666666665], [632.0, 780.0], [644.0, 948.5], [650.0, 1106.625], [648.0, 2953.0], [645.0, 468.30000000000007], [651.0, 358.0000000000001], [665.0, 576.0], [661.0, 1060.0], [663.0, 1808.7142857142858], [662.0, 705.6666666666667], [660.0, 1489.3333333333333], [657.0, 495.09999999999997], [656.0, 956.5], [671.0, 1078.5], [670.0, 1804.5], [669.0, 2925.0], [668.0, 1329.25], [667.0, 1933.0], [666.0, 1813.75], [658.0, 2154.6666666666665], [659.0, 3277.0], [652.0, 2128.3333333333335], [654.0, 1131.5], [653.0, 694.25], [646.0, 1721.0], [664.0, 906.2727272727273], [641.0, 487.0], [643.0, 3163.0], [642.0, 3032.5], [640.0, 1503.1], [655.0, 419.7142857142857], [676.0, 706.6666666666667], [702.0, 716.1818181818182], [703.0, 1444.0], [701.0, 480.125], [700.0, 2318.0], [698.0, 1915.75], [699.0, 3108.0], [697.0, 779.7333333333333], [691.0, 491.0], [692.0, 1831.25], [695.0, 1687.75], [693.0, 746.5], [690.0, 434.0], [689.0, 1043.9166666666665], [688.0, 592.8888888888889], [687.0, 676.8888888888889], [673.0, 952.4444444444446], [672.0, 1076.8333333333333], [675.0, 704.0], [674.0, 713.5], [677.0, 662.8333333333334], [679.0, 2262.25], [696.0, 1992.3333333333333], [678.0, 735.0], [686.0, 779.9230769230769], [684.0, 923.1111111111113], [683.0, 1860.0], [682.0, 2945.0], [685.0, 1635.5], [681.0, 877.6428571428571], [680.0, 1457.3333333333335], [711.0, 1026.857142857143], [705.0, 951.8888888888889], [709.0, 2003.2857142857144], [710.0, 1302.0], [717.0, 1628.0], [704.0, 728.3333333333333], [715.0, 1626.6666666666667], [714.0, 1209.5], [713.0, 1633.3333333333335], [712.0, 1751.6666666666667], [720.0, 3395.25], [721.0, 3449.0], [731.0, 778.25], [729.0, 3404.0], [728.0, 4635.0], [733.0, 3252.4], [735.0, 788.0], [723.0, 2849.8], [724.0, 766.0], [725.0, 3451.0], [727.0, 2779.0], [726.0, 3464.0], [707.0, 1010.0000000000001], [708.0, 752.0], [706.0, 728.0], [741.0, 1304.6], [736.0, 775.3333333333334], [747.0, 1890.0], [746.0, 1648.75], [745.0, 2074.5], [744.0, 784.0], [748.0, 766.3333333333334], [750.0, 1004.1282051282052], [749.0, 1032.75], [751.0, 1390.8999999999999], [738.0, 1723.5], [737.0, 2336.0], [742.0, 2062.222222222222], [743.0, 3408.0], [752.0, 1235.3333333333335], [767.0, 3513.3333333333335], [764.0, 1485.25], [763.0, 819.6666666666666], [762.0, 2506.142857142857], [761.0, 815.5], [760.0, 819.0], [753.0, 1311.5], [754.0, 1283.3], [756.0, 1209.625], [758.0, 1323.857142857143], [759.0, 1011.6666666666666], [757.0, 1805.2727272727273], [755.0, 1105.75], [740.0, 781.3333333333334], [739.0, 3399.0], [797.0, 3292.0], [799.0, 3541.0], [796.0, 3542.0], [794.0, 3551.3333333333335], [793.0, 3556.0], [792.0, 3276.0], [779.0, 4510.0], [769.0, 3477.6666666666665], [790.0, 3491.5], [788.0, 3382.0], [786.0, 2965.5], [784.0, 3292.0], [826.0, 3575.0], [818.0, 2964.0], [829.0, 3153.0], [830.0, 2635.0], [816.0, 3074.6666666666665], [828.0, 3155.3333333333335], [824.0, 3287.0], [807.0, 4007.0], [806.0, 4009.0], [805.0, 3964.0], [802.0, 4004.0], [801.0, 3750.0], [814.0, 3063.6666666666665], [813.0, 3274.0], [811.0, 3281.6666666666665], [810.0, 3285.0], [809.0, 3282.0], [808.0, 3673.0], [823.0, 3568.0], [822.0, 2857.0], [821.0, 2643.0], [851.0, 4136.0], [863.0, 2920.0], [860.0, 3233.0], [858.0, 4164.0], [838.0, 2600.0], [837.0, 2612.5], [835.0, 2931.0], [833.0, 3300.3333333333335], [847.0, 3119.0], [844.0, 2597.0], [843.0, 3705.5], [841.0, 2819.3333333333335], [854.0, 2931.0], [853.0, 3613.0], [852.0, 4030.0], [850.0, 2934.0], [849.0, 2535.0], [893.0, 3619.5], [895.0, 2916.0], [891.0, 4337.5], [889.0, 2956.6], [888.0, 3208.6666666666665], [868.0, 2934.0], [867.0, 2958.0], [866.0, 3534.5], [864.0, 4158.0], [875.0, 3011.3333333333335], [874.0, 3207.5], [873.0, 3383.5], [887.0, 3268.0], [885.0, 3056.0], [884.0, 3039.0], [883.0, 3092.0], [925.0, 2146.0], [902.0, 894.0], [905.0, 900.0], [904.0, 3083.0], [907.0, 3075.0], [906.0, 2960.5], [911.0, 3027.0], [898.0, 2914.0], [897.0, 4325.0], [900.0, 3082.6666666666665], [899.0, 3085.0], [910.0, 3067.0], [926.0, 3321.0], [915.0, 3236.0], [913.0, 3074.0], [923.0, 3322.0], [922.0, 3323.5], [920.0, 3326.5], [918.0, 3334.5], [916.0, 3776.5], [944.0, 982.6666666666666], [948.0, 989.0], [946.0, 3356.5], [949.0, 3299.0], [951.0, 3326.5], [950.0, 3351.5], [956.0, 1914.6666666666665], [954.0, 1854.6], [958.0, 1370.3333333333335], [952.0, 990.75], [929.0, 3312.75], [943.0, 3367.0], [942.0, 3336.0], [941.0, 3277.5], [940.0, 3311.0], [939.0, 3320.0], [957.0, 1438.8], [959.0, 3308.0], [955.0, 3760.0], [967.0, 1049.25], [969.0, 1011.5], [968.0, 1469.3], [965.0, 2127.5], [964.0, 3803.3333333333335], [962.0, 3385.0], [960.0, 3331.0], [966.0, 3217.0], [975.0, 3197.5], [973.0, 3204.0], [972.0, 3213.5], [989.0, 2309.25], [991.0, 1391.0], [977.0, 1122.0], [978.0, 3187.6666666666665], [980.0, 1557.25], [979.0, 2135.5], [982.0, 2168.75], [983.0, 3916.0], [981.0, 1144.0], [990.0, 1341.0], [988.0, 1077.6666666666667], [987.0, 3268.75], [986.0, 1010.0], [985.0, 1003.3333333333333], [984.0, 2780.0], [997.0, 1542.4285714285716], [1007.0, 1068.8333333333333], [1001.0, 1372.5], [1006.0, 1085.0], [1005.0, 1615.0000000000002], [1003.0, 1199.8333333333335], [1002.0, 3845.0], [1004.0, 2276.8], [1000.0, 1448.4], [999.0, 1337.8], [1022.0, 2067.5714285714284], [1023.0, 1329.75], [1009.0, 2708.6666666666665], [1013.0, 2870.0], [1012.0, 3537.3333333333335], [1015.0, 1074.5], [1014.0, 1009.5], [1020.0, 1303.75], [1019.0, 1243.2], [1016.0, 1903.0], [1017.0, 1267.111111111111], [1018.0, 1961.625], [998.0, 1272.0], [996.0, 1019.0], [995.0, 1327.0], [994.0, 1162.3333333333335], [993.0, 1300.625], [992.0, 1696.3333333333335], [1076.0, 1099.0], [1074.0, 1509.0], [1072.0, 3314.0], [1068.0, 1505.25], [1064.0, 1954.0], [1062.0, 3415.0], [1060.0, 3074.0], [1058.0, 3327.0], [1056.0, 3309.0], [1086.0, 1836.5], [1082.0, 1844.5], [1084.0, 2468.0], [1078.0, 1645.5], [1080.0, 1394.6666666666667], [1070.0, 1093.0], [1042.0, 1211.0], [1044.0, 2399.25], [1040.0, 2174.0], [1038.0, 2329.6666666666665], [1036.0, 3155.0], [1034.0, 1606.3333333333335], [1032.0, 1224.0], [1030.0, 2898.0], [1028.0, 1691.5], [1026.0, 2174.0], [1024.0, 1003.0], [1054.0, 2285.7692307692305], [1046.0, 3095.5], [1096.0, 1819.0], [1106.0, 1122.0], [1104.0, 1136.0], [1102.0, 1113.8], [1094.0, 1836.0], [1088.0, 1169.0], [1110.0, 2432.8], [1142.0, 2443.0], [1126.0, 2468.2], [1140.0, 3067.0], [1132.0, 3081.0], [1130.0, 2773.25], [1208.0, 3657.0], [1174.0, 1247.0], [1168.0, 1829.5], [1206.0, 2062.3333333333335], [1210.0, 2587.5], [1184.0, 3694.0], [1192.0, 2497.0], [1186.0, 3711.5], [1204.0, 3689.0], [1202.0, 3259.0], [1166.0, 3693.0], [1162.0, 3713.5], [1160.0, 2412.0], [1158.0, 2456.833333333333], [1182.0, 3692.5], [1180.0, 3695.0], [1198.0, 3350.0], [1196.0, 3683.5], [1278.0, 2108.0], [1264.0, 2261.6], [1254.0, 1723.625], [1252.0, 2400.25], [1250.0, 2107.0], [1276.0, 2700.5], [1274.0, 3030.3333333333335], [1266.0, 2109.5], [1238.0, 1693.5], [1236.0, 2094.6666666666665], [1232.0, 2084.0], [1244.0, 2103.8], [1222.0, 2093.0], [1228.0, 4484.0], [1224.0, 2091.5], [1240.0, 2097.3333333333335], [1256.0, 1385.4444444444443], [1258.0, 1696.7142857142858], [1262.0, 1576.6666666666665], [1260.0, 1772.8333333333333], [1284.0, 1710.6666666666667], [1296.0, 1714.6666666666667], [1302.0, 3686.0], [1306.0, 2101.0], [1308.0, 2096.0], [1280.0, 1714.0], [1310.0, 3675.0], [1282.0, 2109.3333333333335], [1294.0, 1329.0], [1328.0, 3663.0], [1332.0, 2111.5], [1330.0, 2111.0], [1334.0, 2117.0], [1340.0, 2878.5], [1338.0, 2091.0], [1312.0, 3682.0], [1314.0, 3677.0], [1318.0, 2108.0], [1316.0, 2122.0], [1320.0, 2107.0], [1322.0, 2111.0], [1326.0, 2635.3333333333335], [1342.0, 2881.5], [1292.0, 1712.6666666666667], [1290.0, 1911.3333333333333], [1288.0, 2985.0], [1286.0, 2496.0], [1358.0, 2099.0], [1402.0, 1402.0], [1354.0, 2111.0], [1352.0, 2096.0], [1348.0, 2118.0], [1366.0, 2089.0], [1360.0, 2102.0], [1404.0, 3617.0], [1388.0, 2110.0], [1386.0, 2121.5], [1382.0, 2106.0], [1376.0, 2087.0], [1458.0, 1510.75], [1414.0, 1482.5], [1420.0, 1510.0], [1456.0, 1681.25], [1462.0, 2142.0], [1440.0, 2028.7142857142856], [1470.0, 2130.5], [1468.0, 2120.5], [1464.0, 2518.3333333333335], [1442.0, 1513.4], [1446.0, 1619.142857142857], [1448.0, 1857.0], [1444.0, 1508.6666666666665], [1450.0, 2167.5], [1410.0, 1467.5], [1438.0, 1819.5], [1436.0, 1514.4], [1434.0, 1518.5], [1430.0, 1808.0], [1432.0, 2311.25], [1428.0, 1686.8], [1426.0, 2575.5], [1424.0, 3614.0], [1412.0, 1469.0], [1454.0, 1852.0], [1452.0, 1832.0], [1480.0, 2298.6666666666665], [1530.0, 2042.2], [1476.0, 2142.0], [1474.0, 2553.0], [1478.0, 2126.5], [1500.0, 2364.0], [1498.0, 2164.5], [1496.0, 2144.0], [1494.0, 2177.5], [1490.0, 2127.0], [1520.0, 2191.0], [1524.0, 3391.0], [1522.0, 2176.5], [1506.0, 1851.0], [1508.0, 1534.5], [1510.0, 2149.5], [1516.0, 2794.5], [1514.0, 2891.3333333333335], [1518.0, 2150.0], [1526.0, 2238.0], [1532.0, 1525.0], [1534.0, 2156.0], [1536.0, 2160.0], [1594.0, 2573.0], [1550.0, 1851.5], [1544.0, 2118.0], [1566.0, 3306.0], [1584.0, 1966.0], [1586.0, 3110.0], [1564.0, 1679.25], [1558.0, 3017.3333333333335], [1556.0, 3435.0], [1554.0, 2177.6666666666665], [1552.0, 2807.25], [1568.0, 2423.5], [1570.0, 3276.0], [1572.0, 2003.0], [1582.0, 1974.0], [1596.0, 2574.5], [1592.0, 2603.0], [1648.0, 2915.0], [1610.0, 1583.0], [1608.0, 2509.0], [1602.0, 2991.0], [1630.0, 1738.0], [1626.0, 1739.5833333333333], [1652.0, 1898.5], [1650.0, 1993.0], [1640.0, 1609.0], [1638.0, 2136.6666666666665], [1656.0, 1836.5], [1674.0, 1659.5], [1718.0, 1790.0], [1722.0, 1813.3333333333333], [1694.0, 1555.5], [1670.0, 1853.0], [1664.0, 1841.5], [1676.0, 1895.0], [1678.0, 1556.5], [1690.0, 2121.0], [1692.0, 1821.5], [1682.0, 2122.0], [1684.0, 1543.0], [1686.0, 1551.3333333333333], [1714.0, 1750.4], [1702.0, 1739.4], [1704.0, 1620.6666666666667], [1700.0, 1671.3333333333333], [1696.0, 2139.5], [1726.0, 2032.0], [1724.0, 2101.0], [1710.0, 2107.75], [1708.0, 1679.6], [1716.0, 1622.0], [1720.0, 1927.5], [1776.0, 1828.5], [1788.0, 1823.5], [1750.0, 1687.5], [1752.0, 1608.6], [1754.0, 1979.6666666666667], [1758.0, 1402.0], [1756.0, 1696.875], [1740.0, 1733.5], [1736.0, 2021.0], [1734.0, 2029.25], [1732.0, 2028.5], [1742.0, 2001.0], [1778.0, 1581.4285714285713], [1782.0, 1982.25], [1780.0, 1819.2857142857142], [1784.0, 1720.0], [1786.0, 1789.0], [1746.0, 1556.5], [1744.0, 1733.5], [1748.0, 2097.0], [1768.0, 1867.375], [1770.0, 1397.6666666666667], [1772.0, 1777.1666666666667], [1774.0, 1845.0], [1760.0, 1708.0], [1762.0, 1537.0], [1764.0, 1589.5], [1766.0, 1873.6], [1798.0, 1779.5], [1824.0, 1846.0], [1828.0, 1853.2857142857142], [1792.0, 1919.6666666666667], [1794.0, 1829.5], [1796.0, 1932.5714285714287], [1800.0, 1620.1666666666665], [1804.0, 1968.4285714285716], [1802.0, 1859.6666666666667], [1822.0, 1478.4285714285713], [1820.0, 1858.5], [1812.0, 1669.5], [1808.0, 2082.4], [1810.0, 1964.5], [1075.0, 1397.25], [1035.0, 2179.0], [1045.0, 1136.5], [1051.0, 3343.0], [1039.0, 1949.6], [1073.0, 1931.0], [1065.0, 1921.2], [1063.0, 3356.0], [1067.0, 1939.5], [1061.0, 1552.25], [1087.0, 1706.9999999999998], [1057.0, 2856.0], [1083.0, 1354.5], [1079.0, 1647.0], [1081.0, 1907.0], [1077.0, 2079.8], [1071.0, 1699.75], [1069.0, 1508.0], [1041.0, 2022.3333333333333], [1043.0, 1211.25], [1033.0, 2037.6666666666667], [1031.0, 2509.0], [1025.0, 2464.75], [1029.0, 2879.0], [1027.0, 2908.0], [1055.0, 2853.0], [1093.0, 2054.5], [1107.0, 1116.5], [1105.0, 1975.5], [1103.0, 1653.4545454545455], [1133.0, 1809.0], [1135.0, 2499.0], [1143.0, 3715.0], [1137.0, 2489.0], [1095.0, 1329.5], [1099.0, 2447.2], [1091.0, 1515.6666666666667], [1089.0, 1645.0], [1117.0, 2446.857142857143], [1211.0, 2081.0], [1167.0, 1839.0], [1169.0, 1633.3333333333333], [1171.0, 2458.5], [1175.0, 3704.0], [1173.0, 3194.6], [1179.0, 3713.0], [1177.0, 3592.0], [1183.0, 3696.0], [1161.0, 4883.0], [1157.0, 3055.0], [1165.0, 3704.0], [1163.0, 3718.5], [1181.0, 3700.0], [1215.0, 2083.6666666666665], [1185.0, 3284.0], [1191.0, 3692.0], [1189.0, 3686.6666666666665], [1195.0, 3698.5], [1193.0, 3690.0], [1207.0, 3664.0], [1205.0, 3562.0], [1201.0, 3672.0], [1199.0, 3572.6666666666665], [1197.0, 3349.0], [1253.0, 1320.0], [1237.0, 1680.5], [1233.0, 2096.5], [1239.0, 1825.6666666666667], [1255.0, 1507.25], [1251.0, 1291.0], [1249.0, 2315.5], [1279.0, 3284.0], [1273.0, 3282.0], [1269.0, 2496.6666666666665], [1267.0, 2689.5], [1265.0, 2111.0], [1227.0, 2092.6], [1219.0, 2096.3333333333335], [1259.0, 1304.0], [1261.0, 1305.0], [1257.0, 1298.25], [1289.0, 2496.0], [1333.0, 2094.0], [1301.0, 2108.5], [1297.0, 2903.0], [1305.0, 3680.6666666666665], [1309.0, 2899.5], [1283.0, 2211.25], [1281.0, 1340.0], [1329.0, 3671.0], [1337.0, 2096.5], [1335.0, 3654.0], [1343.0, 2111.0], [1313.0, 2452.0], [1315.0, 3683.0], [1319.0, 2101.0], [1323.0, 2111.0], [1327.0, 3666.0], [1291.0, 1588.6666666666667], [1293.0, 3246.1428571428573], [1295.0, 2096.5], [1287.0, 2106.0], [1285.0, 2116.0], [1351.0, 2812.0], [1381.0, 2109.0], [1357.0, 2205.3333333333335], [1353.0, 2100.0], [1349.0, 3543.0], [1347.0, 2106.5], [1345.0, 2881.5], [1375.0, 2181.5], [1371.0, 2669.4], [1365.0, 2811.0], [1363.0, 2202.3333333333335], [1407.0, 2519.5], [1383.0, 3506.0], [1379.0, 2092.0], [1461.0, 1669.25], [1415.0, 1622.5], [1423.0, 1500.5], [1457.0, 1515.0], [1467.0, 2118.0], [1463.0, 1856.5], [1441.0, 1519.0], [1443.0, 2172.714285714286], [1445.0, 1497.0], [1447.0, 2187.2], [1451.0, 1523.0], [1449.0, 1605.1249999999998], [1459.0, 1773.3333333333333], [1413.0, 1692.2], [1411.0, 2064.0], [1409.0, 1606.0], [1439.0, 1519.0], [1437.0, 1713.3333333333333], [1435.0, 1941.0], [1433.0, 1525.0], [1429.0, 2189.0], [1425.0, 2099.0], [1427.0, 3074.0], [1455.0, 1587.857142857143], [1453.0, 1515.0], [1501.0, 2169.0], [1473.0, 1537.0], [1477.0, 3414.0], [1483.0, 2168.0], [1487.0, 3034.3333333333335], [1485.0, 2124.0], [1497.0, 2131.0], [1495.0, 3357.0], [1493.0, 2329.142857142857], [1491.0, 2771.0], [1489.0, 2771.5], [1521.0, 3390.0], [1507.0, 3396.0], [1509.0, 2410.2], [1517.0, 3394.0], [1531.0, 1520.6], [1527.0, 1527.0], [1529.0, 1529.0], [1533.0, 2130.6666666666665], [1539.0, 2127.0], [1545.0, 3386.0], [1543.0, 2578.5], [1541.0, 2668.75], [1537.0, 2161.0], [1565.0, 2843.0], [1585.0, 1966.0], [1589.0, 2592.0], [1563.0, 2218.6], [1559.0, 2165.0], [1555.0, 3442.0], [1569.0, 3288.0], [1571.0, 3286.0], [1575.0, 2650.0], [1573.0, 1998.0], [1581.0, 1989.0], [1579.0, 2314.75], [1583.0, 3269.0], [1599.0, 2532.0], [1593.0, 2586.2], [1603.0, 2980.0], [1653.0, 1959.0], [1659.0, 1820.5], [1601.0, 2547.5], [1611.0, 2949.0], [1615.0, 2478.5], [1613.0, 2947.0], [1629.0, 1730.0], [1627.0, 1737.0], [1619.0, 2943.0], [1617.0, 2499.5], [1649.0, 2914.3333333333335], [1639.0, 1746.2], [1633.0, 1746.5], [1645.0, 2341.0], [1663.0, 1818.0], [1661.0, 1823.5], [1657.0, 1821.0], [1655.0, 1836.0], [1677.0, 1684.5], [1695.0, 1642.0], [1671.0, 1872.0], [1665.0, 1816.0], [1673.0, 1825.1666666666665], [1675.0, 1893.0], [1679.0, 1878.75], [1693.0, 2021.75], [1691.0, 1605.3333333333335], [1689.0, 1752.4166666666667], [1683.0, 1603.3333333333333], [1685.0, 1938.5], [1687.0, 1793.857142857143], [1713.0, 1880.75], [1703.0, 1753.75], [1705.0, 1989.25], [1707.0, 2125.3333333333335], [1701.0, 1640.0], [1697.0, 1661.6000000000001], [1727.0, 1799.5], [1723.0, 2107.0], [1711.0, 1671.0], [1715.0, 1775.0], [1721.0, 1811.0], [1719.0, 1767.6], [1717.0, 2036.25], [1741.0, 1604.0], [1751.0, 1611.2857142857142], [1755.0, 1834.5], [1753.0, 1687.0], [1757.0, 1897.0], [1739.0, 2019.0], [1737.0, 2016.0], [1733.0, 2030.0], [1743.0, 1654.6666666666667], [1759.0, 1496.4], [1779.0, 1784.0], [1781.0, 2010.0], [1783.0, 1901.5], [1787.0, 1905.1666666666665], [1745.0, 1986.0], [1747.0, 1448.0], [1749.0, 1490.0], [1769.0, 1763.142857142857], [1771.0, 1797.0], [1773.0, 1742.3333333333333], [1775.0, 1525.0], [1791.0, 1770.5], [1789.0, 1956.5], [1761.0, 1502.5], [1763.0, 1705.5], [1765.0, 1837.8333333333333], [1767.0, 1739.7142857142858], [1797.0, 1788.142857142857], [1827.0, 1767.0], [1829.0, 2063.0], [1823.0, 2446.0], [1793.0, 1827.0], [1795.0, 1686.75], [1799.0, 1415.6666666666667], [1801.0, 1622.0], [1807.0, 2096.25], [1805.0, 1847.6666666666667], [1819.0, 1924.75], [1817.0, 1862.5], [1815.0, 1641.5], [1813.0, 1663.5], [1811.0, 1937.0769230769233], [1809.0, 1846.0], [1.0, 9380.0]], "isOverall": false, "label": "Search Video", "isController": false}, {"data": [[889.2684444444428, 1995.443777777777]], "isOverall": false, "label": "Search Video-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1829.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8876.333333333334, "minX": 1.57139022E12, "maxY": 304860.8333333333, "series": [{"data": [[1.57139028E12, 304860.8333333333], [1.57139022E12, 188264.16666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57139028E12, 14373.666666666666], [1.57139022E12, 8876.333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139028E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 744.4470314318983, "minX": 1.57139022E12, "maxY": 2767.98598130841, "series": [{"data": [[1.57139028E12, 2767.98598130841], [1.57139022E12, 744.4470314318983]], "isOverall": false, "label": "Search Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139028E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 741.8044237485454, "minX": 1.57139022E12, "maxY": 2473.071171818837, "series": [{"data": [[1.57139028E12, 2473.071171818837], [1.57139022E12, 741.8044237485454]], "isOverall": false, "label": "Search Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139028E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 365.02561117578534, "minX": 1.57139022E12, "maxY": 810.7519769949665, "series": [{"data": [[1.57139028E12, 810.7519769949665], [1.57139022E12, 365.02561117578534]], "isOverall": false, "label": "Search Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139028E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 227.0, "minX": 1.57139022E12, "maxY": 9380.0, "series": [{"data": [[1.57139028E12, 9380.0], [1.57139022E12, 2673.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57139028E12, 894.0], [1.57139022E12, 227.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57139028E12, 4970.1], [1.57139022E12, 999.700000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57139028E12, 7580.550000000001], [1.57139022E12, 1995.7199999999993]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57139028E12, 5368.099999999999], [1.57139022E12, 1126.05]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139028E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 524.0, "minX": 2.0, "maxY": 9243.0, "series": [{"data": [[529.0, 1548.0], [2.0, 8883.5], [574.0, 739.0], [138.0, 2010.5], [669.0, 704.0], [673.0, 2201.0], [169.0, 5325.0], [282.0, 4696.0], [17.0, 9243.0], [21.0, 6709.0], [23.0, 6904.0], [438.0, 1118.5], [475.0, 524.0], [490.0, 3191.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 673.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 521.0, "minX": 2.0, "maxY": 9160.0, "series": [{"data": [[529.0, 1465.0], [2.0, 8818.0], [574.0, 736.0], [138.0, 1882.0], [669.0, 702.0], [673.0, 1974.0], [169.0, 5029.0], [282.0, 4455.5], [17.0, 9160.0], [21.0, 6691.0], [23.0, 6719.0], [438.0, 1047.0], [475.0, 521.0], [490.0, 2907.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 673.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.63333333333333, "minX": 1.57139022E12, "maxY": 41.36666666666667, "series": [{"data": [[1.57139028E12, 33.63333333333333], [1.57139022E12, 41.36666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139028E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 28.633333333333333, "minX": 1.57139022E12, "maxY": 46.36666666666667, "series": [{"data": [[1.57139028E12, 46.36666666666667], [1.57139022E12, 28.633333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139028E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 28.633333333333333, "minX": 1.57139022E12, "maxY": 46.36666666666667, "series": [{"data": [[1.57139028E12, 46.36666666666667], [1.57139022E12, 28.633333333333333]], "isOverall": false, "label": "Search Video-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139028E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 28.633333333333333, "minX": 1.57139022E12, "maxY": 46.36666666666667, "series": [{"data": [[1.57139028E12, 46.36666666666667], [1.57139022E12, 28.633333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139028E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

