/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 40390.0, "minX": 0.0, "maxY": 88515.0, "series": [{"data": [[0.0, 40390.0], [0.1, 79650.0], [0.2, 79667.0], [0.3, 79667.0], [0.4, 79679.0], [0.5, 79696.0], [0.6, 79698.0], [0.7, 79722.0], [0.8, 79729.0], [0.9, 79885.0], [1.0, 79899.0], [1.1, 79903.0], [1.2, 79904.0], [1.3, 79904.0], [1.4, 79908.0], [1.5, 79921.0], [1.6, 79924.0], [1.7, 79924.0], [1.8, 79940.0], [1.9, 79947.0], [2.0, 79956.0], [2.1, 79960.0], [2.2, 79963.0], [2.3, 79967.0], [2.4, 79969.0], [2.5, 79971.0], [2.6, 79974.0], [2.7, 79977.0], [2.8, 79979.0], [2.9, 79979.0], [3.0, 79981.0], [3.1, 79985.0], [3.2, 79987.0], [3.3, 79988.0], [3.4, 79994.0], [3.5, 79994.0], [3.6, 79995.0], [3.7, 79995.0], [3.8, 79998.0], [3.9, 80002.0], [4.0, 80007.0], [4.1, 80008.0], [4.2, 80015.0], [4.3, 80017.0], [4.4, 80020.0], [4.5, 80020.0], [4.6, 80025.0], [4.7, 80039.0], [4.8, 80040.0], [4.9, 80044.0], [5.0, 80051.0], [5.1, 80052.0], [5.2, 80053.0], [5.3, 80054.0], [5.4, 80057.0], [5.5, 80057.0], [5.6, 80060.0], [5.7, 80066.0], [5.8, 80070.0], [5.9, 80077.0], [6.0, 80082.0], [6.1, 80085.0], [6.2, 80087.0], [6.3, 80087.0], [6.4, 80093.0], [6.5, 80093.0], [6.6, 80098.0], [6.7, 80098.0], [6.8, 80098.0], [6.9, 80100.0], [7.0, 80102.0], [7.1, 80103.0], [7.2, 80121.0], [7.3, 80124.0], [7.4, 80126.0], [7.5, 80127.0], [7.6, 80135.0], [7.7, 80136.0], [7.8, 80138.0], [7.9, 80138.0], [8.0, 80140.0], [8.1, 80140.0], [8.2, 80147.0], [8.3, 80151.0], [8.4, 80151.0], [8.5, 80161.0], [8.6, 80162.0], [8.7, 80166.0], [8.8, 80168.0], [8.9, 80171.0], [9.0, 80171.0], [9.1, 80174.0], [9.2, 80176.0], [9.3, 80176.0], [9.4, 80178.0], [9.5, 80178.0], [9.6, 80185.0], [9.7, 80185.0], [9.8, 80186.0], [9.9, 80188.0], [10.0, 80189.0], [10.1, 80189.0], [10.2, 80191.0], [10.3, 80200.0], [10.4, 80202.0], [10.5, 80203.0], [10.6, 80203.0], [10.7, 80207.0], [10.8, 80208.0], [10.9, 80208.0], [11.0, 80208.0], [11.1, 80209.0], [11.2, 80210.0], [11.3, 80210.0], [11.4, 80211.0], [11.5, 80213.0], [11.6, 80216.0], [11.7, 80216.0], [11.8, 80217.0], [11.9, 80221.0], [12.0, 80223.0], [12.1, 80236.0], [12.2, 80243.0], [12.3, 80245.0], [12.4, 80245.0], [12.5, 80249.0], [12.6, 80255.0], [12.7, 80257.0], [12.8, 80269.0], [12.9, 80269.0], [13.0, 80273.0], [13.1, 80274.0], [13.2, 80279.0], [13.3, 80281.0], [13.4, 80287.0], [13.5, 80287.0], [13.6, 80291.0], [13.7, 80292.0], [13.8, 80294.0], [13.9, 80297.0], [14.0, 80299.0], [14.1, 80300.0], [14.2, 80303.0], [14.3, 80306.0], [14.4, 80321.0], [14.5, 80323.0], [14.6, 80324.0], [14.7, 80328.0], [14.8, 80331.0], [14.9, 80333.0], [15.0, 80335.0], [15.1, 80340.0], [15.2, 80342.0], [15.3, 80342.0], [15.4, 80347.0], [15.5, 80356.0], [15.6, 80356.0], [15.7, 80357.0], [15.8, 80364.0], [15.9, 80370.0], [16.0, 80378.0], [16.1, 80379.0], [16.2, 80387.0], [16.3, 80389.0], [16.4, 80390.0], [16.5, 80408.0], [16.6, 80510.0], [16.7, 80516.0], [16.8, 80519.0], [16.9, 80543.0], [17.0, 80558.0], [17.1, 80576.0], [17.2, 80584.0], [17.3, 80586.0], [17.4, 80590.0], [17.5, 80592.0], [17.6, 80594.0], [17.7, 80596.0], [17.8, 80596.0], [17.9, 80597.0], [18.0, 80598.0], [18.1, 80598.0], [18.2, 80599.0], [18.3, 80600.0], [18.4, 80600.0], [18.5, 80602.0], [18.6, 80606.0], [18.7, 80607.0], [18.8, 80607.0], [18.9, 80610.0], [19.0, 80610.0], [19.1, 80612.0], [19.2, 80617.0], [19.3, 80620.0], [19.4, 80620.0], [19.5, 80623.0], [19.6, 80639.0], [19.7, 80639.0], [19.8, 80643.0], [19.9, 80644.0], [20.0, 80647.0], [20.1, 80652.0], [20.2, 80654.0], [20.3, 80654.0], [20.4, 80655.0], [20.5, 80655.0], [20.6, 80656.0], [20.7, 80657.0], [20.8, 80657.0], [20.9, 80662.0], [21.0, 80663.0], [21.1, 80666.0], [21.2, 80666.0], [21.3, 80669.0], [21.4, 80669.0], [21.5, 80671.0], [21.6, 80672.0], [21.7, 80672.0], [21.8, 80674.0], [21.9, 80682.0], [22.0, 80686.0], [22.1, 80690.0], [22.2, 80693.0], [22.3, 80693.0], [22.4, 80696.0], [22.5, 80698.0], [22.6, 80702.0], [22.7, 80702.0], [22.8, 80703.0], [22.9, 80705.0], [23.0, 80706.0], [23.1, 80710.0], [23.2, 80710.0], [23.3, 80717.0], [23.4, 80717.0], [23.5, 80719.0], [23.6, 80720.0], [23.7, 80723.0], [23.8, 80724.0], [23.9, 80729.0], [24.0, 80730.0], [24.1, 80736.0], [24.2, 80752.0], [24.3, 80797.0], [24.4, 80849.0], [24.5, 80852.0], [24.6, 80853.0], [24.7, 80861.0], [24.8, 80870.0], [24.9, 80875.0], [25.0, 80882.0], [25.1, 80889.0], [25.2, 80891.0], [25.3, 80892.0], [25.4, 80897.0], [25.5, 80897.0], [25.6, 80898.0], [25.7, 80898.0], [25.8, 80899.0], [25.9, 80900.0], [26.0, 80901.0], [26.1, 80902.0], [26.2, 80903.0], [26.3, 80904.0], [26.4, 80904.0], [26.5, 80905.0], [26.6, 80906.0], [26.7, 80912.0], [26.8, 80912.0], [26.9, 80912.0], [27.0, 80913.0], [27.1, 80913.0], [27.2, 80915.0], [27.3, 80915.0], [27.4, 80916.0], [27.5, 80917.0], [27.6, 80918.0], [27.7, 80918.0], [27.8, 80918.0], [27.9, 80918.0], [28.0, 80920.0], [28.1, 80921.0], [28.2, 80923.0], [28.3, 80926.0], [28.4, 80927.0], [28.5, 80927.0], [28.6, 80928.0], [28.7, 80928.0], [28.8, 80930.0], [28.9, 80932.0], [29.0, 80932.0], [29.1, 80933.0], [29.2, 80933.0], [29.3, 80934.0], [29.4, 80934.0], [29.5, 80934.0], [29.6, 80936.0], [29.7, 80937.0], [29.8, 80937.0], [29.9, 80938.0], [30.0, 80939.0], [30.1, 80939.0], [30.2, 80939.0], [30.3, 80939.0], [30.4, 80940.0], [30.5, 80940.0], [30.6, 80941.0], [30.7, 80942.0], [30.8, 80943.0], [30.9, 80943.0], [31.0, 80944.0], [31.1, 80944.0], [31.2, 80945.0], [31.3, 80945.0], [31.4, 80945.0], [31.5, 80946.0], [31.6, 80946.0], [31.7, 80947.0], [31.8, 80948.0], [31.9, 80948.0], [32.0, 80949.0], [32.1, 80949.0], [32.2, 80949.0], [32.3, 80949.0], [32.4, 80949.0], [32.5, 80950.0], [32.6, 80951.0], [32.7, 80951.0], [32.8, 80952.0], [32.9, 80952.0], [33.0, 80952.0], [33.1, 80952.0], [33.2, 80952.0], [33.3, 80952.0], [33.4, 80953.0], [33.5, 80954.0], [33.6, 80955.0], [33.7, 80955.0], [33.8, 80956.0], [33.9, 80956.0], [34.0, 80956.0], [34.1, 80956.0], [34.2, 80957.0], [34.3, 80957.0], [34.4, 80957.0], [34.5, 80958.0], [34.6, 80958.0], [34.7, 80958.0], [34.8, 80959.0], [34.9, 80959.0], [35.0, 80959.0], [35.1, 80959.0], [35.2, 80960.0], [35.3, 80960.0], [35.4, 80960.0], [35.5, 80960.0], [35.6, 80961.0], [35.7, 80961.0], [35.8, 80961.0], [35.9, 80961.0], [36.0, 80962.0], [36.1, 80962.0], [36.2, 80962.0], [36.3, 80963.0], [36.4, 80963.0], [36.5, 80963.0], [36.6, 80964.0], [36.7, 80964.0], [36.8, 80964.0], [36.9, 80964.0], [37.0, 80965.0], [37.1, 80965.0], [37.2, 80967.0], [37.3, 80967.0], [37.4, 80967.0], [37.5, 80967.0], [37.6, 80968.0], [37.7, 80968.0], [37.8, 80968.0], [37.9, 80969.0], [38.0, 80971.0], [38.1, 80971.0], [38.2, 80972.0], [38.3, 80972.0], [38.4, 80972.0], [38.5, 80973.0], [38.6, 80973.0], [38.7, 80975.0], [38.8, 80975.0], [38.9, 80975.0], [39.0, 80975.0], [39.1, 80976.0], [39.2, 80976.0], [39.3, 80976.0], [39.4, 80977.0], [39.5, 80977.0], [39.6, 80978.0], [39.7, 80978.0], [39.8, 80978.0], [39.9, 80978.0], [40.0, 80979.0], [40.1, 80979.0], [40.2, 80980.0], [40.3, 80980.0], [40.4, 80981.0], [40.5, 80981.0], [40.6, 80981.0], [40.7, 80981.0], [40.8, 80981.0], [40.9, 80983.0], [41.0, 80983.0], [41.1, 80984.0], [41.2, 80984.0], [41.3, 80984.0], [41.4, 80985.0], [41.5, 80985.0], [41.6, 80986.0], [41.7, 80986.0], [41.8, 80989.0], [41.9, 80989.0], [42.0, 80990.0], [42.1, 80990.0], [42.2, 80991.0], [42.3, 80991.0], [42.4, 80991.0], [42.5, 80993.0], [42.6, 80995.0], [42.7, 80995.0], [42.8, 80995.0], [42.9, 80996.0], [43.0, 80997.0], [43.1, 80997.0], [43.2, 80998.0], [43.3, 80998.0], [43.4, 81001.0], [43.5, 81001.0], [43.6, 81001.0], [43.7, 81002.0], [43.8, 81002.0], [43.9, 81002.0], [44.0, 81003.0], [44.1, 81004.0], [44.2, 81004.0], [44.3, 81004.0], [44.4, 81004.0], [44.5, 81005.0], [44.6, 81005.0], [44.7, 81006.0], [44.8, 81006.0], [44.9, 81007.0], [45.0, 81007.0], [45.1, 81007.0], [45.2, 81009.0], [45.3, 81009.0], [45.4, 81010.0], [45.5, 81011.0], [45.6, 81012.0], [45.7, 81012.0], [45.8, 81013.0], [45.9, 81013.0], [46.0, 81013.0], [46.1, 81016.0], [46.2, 81017.0], [46.3, 81017.0], [46.4, 81018.0], [46.5, 81019.0], [46.6, 81026.0], [46.7, 81030.0], [46.8, 81031.0], [46.9, 81032.0], [47.0, 81035.0], [47.1, 81036.0], [47.2, 81038.0], [47.3, 81040.0], [47.4, 81041.0], [47.5, 81079.0], [47.6, 81081.0], [47.7, 81088.0], [47.8, 81112.0], [47.9, 81146.0], [48.0, 81158.0], [48.1, 81241.0], [48.2, 81248.0], [48.3, 81255.0], [48.4, 81260.0], [48.5, 81265.0], [48.6, 81361.0], [48.7, 81367.0], [48.8, 81367.0], [48.9, 81373.0], [49.0, 81374.0], [49.1, 81376.0], [49.2, 81381.0], [49.3, 81383.0], [49.4, 81383.0], [49.5, 81386.0], [49.6, 81388.0], [49.7, 81391.0], [49.8, 81392.0], [49.9, 81393.0], [50.0, 81396.0], [50.1, 81400.0], [50.2, 81400.0], [50.3, 81400.0], [50.4, 81403.0], [50.5, 81409.0], [50.6, 81409.0], [50.7, 81410.0], [50.8, 81411.0], [50.9, 81414.0], [51.0, 81415.0], [51.1, 81415.0], [51.2, 81420.0], [51.3, 81421.0], [51.4, 81426.0], [51.5, 81430.0], [51.6, 81433.0], [51.7, 81433.0], [51.8, 81434.0], [51.9, 81436.0], [52.0, 81448.0], [52.1, 81536.0], [52.2, 81589.0], [52.3, 81695.0], [52.4, 81703.0], [52.5, 81717.0], [52.6, 81732.0], [52.7, 81736.0], [52.8, 81740.0], [52.9, 81741.0], [53.0, 81743.0], [53.1, 81746.0], [53.2, 81748.0], [53.3, 81750.0], [53.4, 81750.0], [53.5, 81752.0], [53.6, 81753.0], [53.7, 81754.0], [53.8, 81758.0], [53.9, 81762.0], [54.0, 81762.0], [54.1, 81764.0], [54.2, 81764.0], [54.3, 81764.0], [54.4, 81766.0], [54.5, 81766.0], [54.6, 81769.0], [54.7, 81770.0], [54.8, 81771.0], [54.9, 81771.0], [55.0, 81772.0], [55.1, 81774.0], [55.2, 81775.0], [55.3, 81778.0], [55.4, 81783.0], [55.5, 81787.0], [55.6, 81792.0], [55.7, 81794.0], [55.8, 81796.0], [55.9, 81797.0], [56.0, 81798.0], [56.1, 81801.0], [56.2, 81802.0], [56.3, 81803.0], [56.4, 81803.0], [56.5, 81804.0], [56.6, 81804.0], [56.7, 81805.0], [56.8, 81806.0], [56.9, 81806.0], [57.0, 81809.0], [57.1, 81811.0], [57.2, 81812.0], [57.3, 81813.0], [57.4, 81813.0], [57.5, 81814.0], [57.6, 81819.0], [57.7, 81827.0], [57.8, 81828.0], [57.9, 81851.0], [58.0, 81862.0], [58.1, 81863.0], [58.2, 81869.0], [58.3, 81879.0], [58.4, 81910.0], [58.5, 81911.0], [58.6, 81926.0], [58.7, 81931.0], [58.8, 81960.0], [58.9, 81993.0], [59.0, 82009.0], [59.1, 82037.0], [59.2, 82039.0], [59.3, 82042.0], [59.4, 82043.0], [59.5, 82045.0], [59.6, 82045.0], [59.7, 82055.0], [59.8, 82055.0], [59.9, 82064.0], [60.0, 82073.0], [60.1, 82073.0], [60.2, 82074.0], [60.3, 82089.0], [60.4, 82090.0], [60.5, 82093.0], [60.6, 82093.0], [60.7, 82099.0], [60.8, 82100.0], [60.9, 82106.0], [61.0, 82110.0], [61.1, 82111.0], [61.2, 82112.0], [61.3, 82116.0], [61.4, 82120.0], [61.5, 82121.0], [61.6, 82122.0], [61.7, 82131.0], [61.8, 82134.0], [61.9, 82140.0], [62.0, 82146.0], [62.1, 82147.0], [62.2, 82148.0], [62.3, 82153.0], [62.4, 82154.0], [62.5, 82156.0], [62.6, 82157.0], [62.7, 82160.0], [62.8, 82162.0], [62.9, 82169.0], [63.0, 82192.0], [63.1, 82194.0], [63.2, 82204.0], [63.3, 82207.0], [63.4, 82209.0], [63.5, 82233.0], [63.6, 82239.0], [63.7, 82240.0], [63.8, 82254.0], [63.9, 82257.0], [64.0, 82261.0], [64.1, 82272.0], [64.2, 82275.0], [64.3, 82282.0], [64.4, 82291.0], [64.5, 82296.0], [64.6, 82297.0], [64.7, 82298.0], [64.8, 82300.0], [64.9, 82300.0], [65.0, 82301.0], [65.1, 82301.0], [65.2, 82302.0], [65.3, 82302.0], [65.4, 82304.0], [65.5, 82304.0], [65.6, 82308.0], [65.7, 82310.0], [65.8, 82312.0], [65.9, 82317.0], [66.0, 82317.0], [66.1, 82320.0], [66.2, 82321.0], [66.3, 82321.0], [66.4, 82322.0], [66.5, 82323.0], [66.6, 82324.0], [66.7, 82328.0], [66.8, 82330.0], [66.9, 82330.0], [67.0, 82331.0], [67.1, 82331.0], [67.2, 82332.0], [67.3, 82333.0], [67.4, 82333.0], [67.5, 82334.0], [67.6, 82336.0], [67.7, 82337.0], [67.8, 82337.0], [67.9, 82338.0], [68.0, 82339.0], [68.1, 82342.0], [68.2, 82347.0], [68.3, 82348.0], [68.4, 82351.0], [68.5, 82353.0], [68.6, 82353.0], [68.7, 82354.0], [68.8, 82355.0], [68.9, 82356.0], [69.0, 82357.0], [69.1, 82362.0], [69.2, 82365.0], [69.3, 82365.0], [69.4, 82367.0], [69.5, 82367.0], [69.6, 82369.0], [69.7, 82369.0], [69.8, 82372.0], [69.9, 82373.0], [70.0, 82374.0], [70.1, 82377.0], [70.2, 82377.0], [70.3, 82378.0], [70.4, 82380.0], [70.5, 82384.0], [70.6, 82384.0], [70.7, 82385.0], [70.8, 82386.0], [70.9, 82387.0], [71.0, 82388.0], [71.1, 82389.0], [71.2, 82390.0], [71.3, 82392.0], [71.4, 82394.0], [71.5, 82398.0], [71.6, 82399.0], [71.7, 82402.0], [71.8, 82402.0], [71.9, 82403.0], [72.0, 82405.0], [72.1, 82406.0], [72.2, 82407.0], [72.3, 82415.0], [72.4, 82418.0], [72.5, 82423.0], [72.6, 82423.0], [72.7, 82424.0], [72.8, 82431.0], [72.9, 82441.0], [73.0, 82443.0], [73.1, 82445.0], [73.2, 82446.0], [73.3, 82448.0], [73.4, 82450.0], [73.5, 82450.0], [73.6, 82451.0], [73.7, 82452.0], [73.8, 82452.0], [73.9, 82453.0], [74.0, 82453.0], [74.1, 82455.0], [74.2, 82458.0], [74.3, 82460.0], [74.4, 82460.0], [74.5, 82461.0], [74.6, 82463.0], [74.7, 82464.0], [74.8, 82464.0], [74.9, 82466.0], [75.0, 82466.0], [75.1, 82466.0], [75.2, 82472.0], [75.3, 82473.0], [75.4, 82474.0], [75.5, 82474.0], [75.6, 82476.0], [75.7, 82476.0], [75.8, 82478.0], [75.9, 82479.0], [76.0, 82479.0], [76.1, 82481.0], [76.2, 82485.0], [76.3, 82485.0], [76.4, 82492.0], [76.5, 82497.0], [76.6, 82500.0], [76.7, 82502.0], [76.8, 82506.0], [76.9, 82509.0], [77.0, 82509.0], [77.1, 82509.0], [77.2, 82511.0], [77.3, 82511.0], [77.4, 82511.0], [77.5, 82514.0], [77.6, 82517.0], [77.7, 82517.0], [77.8, 82522.0], [77.9, 82526.0], [78.0, 82536.0], [78.1, 82536.0], [78.2, 82556.0], [78.3, 82575.0], [78.4, 82579.0], [78.5, 82581.0], [78.6, 82582.0], [78.7, 82611.0], [78.8, 82612.0], [78.9, 82617.0], [79.0, 82625.0], [79.1, 82633.0], [79.2, 82642.0], [79.3, 82659.0], [79.4, 82753.0], [79.5, 82766.0], [79.6, 82785.0], [79.7, 82794.0], [79.8, 82801.0], [79.9, 82815.0], [80.0, 82832.0], [80.1, 82860.0], [80.2, 82861.0], [80.3, 82863.0], [80.4, 82864.0], [80.5, 82866.0], [80.6, 82866.0], [80.7, 82908.0], [80.8, 82909.0], [80.9, 82909.0], [81.0, 82913.0], [81.1, 82917.0], [81.2, 82921.0], [81.3, 82937.0], [81.4, 82947.0], [81.5, 82957.0], [81.6, 83004.0], [81.7, 83028.0], [81.8, 83081.0], [81.9, 83149.0], [82.0, 83176.0], [82.1, 83184.0], [82.2, 83185.0], [82.3, 83192.0], [82.4, 83198.0], [82.5, 83204.0], [82.6, 83206.0], [82.7, 83209.0], [82.8, 83214.0], [82.9, 83218.0], [83.0, 83282.0], [83.1, 83299.0], [83.2, 83333.0], [83.3, 83334.0], [83.4, 83373.0], [83.5, 83379.0], [83.6, 83381.0], [83.7, 83386.0], [83.8, 83389.0], [83.9, 83392.0], [84.0, 83393.0], [84.1, 83396.0], [84.2, 83402.0], [84.3, 83421.0], [84.4, 83431.0], [84.5, 83433.0], [84.6, 83451.0], [84.7, 83451.0], [84.8, 83452.0], [84.9, 83466.0], [85.0, 83466.0], [85.1, 83468.0], [85.2, 83491.0], [85.3, 83494.0], [85.4, 83509.0], [85.5, 83532.0], [85.6, 83541.0], [85.7, 83542.0], [85.8, 83543.0], [85.9, 83545.0], [86.0, 83545.0], [86.1, 83558.0], [86.2, 83559.0], [86.3, 83559.0], [86.4, 83560.0], [86.5, 83561.0], [86.6, 83564.0], [86.7, 83565.0], [86.8, 83565.0], [86.9, 83569.0], [87.0, 83569.0], [87.1, 83569.0], [87.2, 83572.0], [87.3, 83572.0], [87.4, 83574.0], [87.5, 83577.0], [87.6, 83578.0], [87.7, 83581.0], [87.8, 83582.0], [87.9, 83595.0], [88.0, 83597.0], [88.1, 83603.0], [88.2, 83606.0], [88.3, 83606.0], [88.4, 83609.0], [88.5, 83610.0], [88.6, 83613.0], [88.7, 83613.0], [88.8, 83619.0], [88.9, 83620.0], [89.0, 83625.0], [89.1, 83628.0], [89.2, 83628.0], [89.3, 83630.0], [89.4, 83639.0], [89.5, 83639.0], [89.6, 83640.0], [89.7, 83648.0], [89.8, 83649.0], [89.9, 83649.0], [90.0, 83650.0], [90.1, 83651.0], [90.2, 83653.0], [90.3, 83655.0], [90.4, 83664.0], [90.5, 83673.0], [90.6, 83675.0], [90.7, 83675.0], [90.8, 83680.0], [90.9, 83683.0], [91.0, 83684.0], [91.1, 83698.0], [91.2, 83706.0], [91.3, 83722.0], [91.4, 83728.0], [91.5, 83739.0], [91.6, 83744.0], [91.7, 83744.0], [91.8, 83782.0], [91.9, 83786.0], [92.0, 83792.0], [92.1, 83794.0], [92.2, 83794.0], [92.3, 83795.0], [92.4, 83800.0], [92.5, 83809.0], [92.6, 83810.0], [92.7, 83812.0], [92.8, 83814.0], [92.9, 83819.0], [93.0, 83825.0], [93.1, 83826.0], [93.2, 83848.0], [93.3, 83853.0], [93.4, 83855.0], [93.5, 83857.0], [93.6, 83858.0], [93.7, 83889.0], [93.8, 83908.0], [93.9, 83909.0], [94.0, 83915.0], [94.1, 83916.0], [94.2, 83921.0], [94.3, 83921.0], [94.4, 83926.0], [94.5, 83926.0], [94.6, 83931.0], [94.7, 83932.0], [94.8, 83939.0], [94.9, 83948.0], [95.0, 83965.0], [95.1, 83993.0], [95.2, 84011.0], [95.3, 84017.0], [95.4, 84021.0], [95.5, 84024.0], [95.6, 84024.0], [95.7, 84025.0], [95.8, 84026.0], [95.9, 84026.0], [96.0, 84026.0], [96.1, 84027.0], [96.2, 84028.0], [96.3, 84030.0], [96.4, 84036.0], [96.5, 84036.0], [96.6, 84039.0], [96.7, 84042.0], [96.8, 84053.0], [96.9, 84066.0], [97.0, 84092.0], [97.1, 84163.0], [97.2, 84908.0], [97.3, 85001.0], [97.4, 85353.0], [97.5, 85843.0], [97.6, 85923.0], [97.7, 85953.0], [97.8, 85974.0], [97.9, 86070.0], [98.0, 86076.0], [98.1, 86138.0], [98.2, 86167.0], [98.3, 86172.0], [98.4, 86178.0], [98.5, 86228.0], [98.6, 86274.0], [98.7, 86287.0], [98.8, 86321.0], [98.9, 86334.0], [99.0, 86348.0], [99.1, 86358.0], [99.2, 86444.0], [99.3, 86532.0], [99.4, 86559.0], [99.5, 87080.0], [99.6, 87271.0], [99.7, 87326.0], [99.8, 87937.0], [99.9, 88515.0]], "isOverall": false, "label": "Play Video", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 40300.0, "maxY": 175.0, "series": [{"data": [[81900.0, 6.0], [79700.0, 2.0], [79900.0, 27.0], [81500.0, 2.0], [81700.0, 37.0], [81100.0, 3.0], [81300.0, 15.0], [80700.0, 18.0], [80500.0, 17.0], [80300.0, 24.0], [80100.0, 34.0], [80900.0, 175.0], [83900.0, 14.0], [82300.0, 69.0], [83700.0, 12.0], [83500.0, 27.0], [83100.0, 6.0], [83300.0, 10.0], [82100.0, 24.0], [82500.0, 21.0], [82700.0, 4.0], [82900.0, 9.0], [85300.0, 1.0], [85900.0, 3.0], [84100.0, 1.0], [84900.0, 1.0], [86300.0, 4.0], [86100.0, 4.0], [86500.0, 2.0], [87300.0, 1.0], [87900.0, 1.0], [88500.0, 1.0], [40300.0, 1.0], [81600.0, 1.0], [80000.0, 31.0], [79600.0, 6.0], [80600.0, 42.0], [79800.0, 2.0], [81800.0, 23.0], [81400.0, 20.0], [81000.0, 44.0], [81200.0, 5.0], [80800.0, 15.0], [80200.0, 38.0], [80400.0, 1.0], [83800.0, 14.0], [82000.0, 18.0], [83600.0, 31.0], [83400.0, 12.0], [83000.0, 3.0], [83200.0, 7.0], [82200.0, 16.0], [82400.0, 50.0], [82600.0, 7.0], [82800.0, 9.0], [85000.0, 1.0], [84000.0, 19.0], [85800.0, 1.0], [86000.0, 2.0], [86200.0, 3.0], [86400.0, 1.0], [87000.0, 1.0], [87200.0, 1.0]], "isOverall": false, "label": "Play Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 88500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 993.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 993.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 7.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 588.8908908908907, "minX": 1.5713934E12, "maxY": 1000.0, "series": [{"data": [[1.57139346E12, 588.8908908908907], [1.5713934E12, 1000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139346E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 40390.0, "minX": 1.0, "maxY": 88515.0, "series": [{"data": [[2.0, 87937.0], [3.0, 87326.0], [4.0, 87271.0], [6.0, 86819.5], [7.0, 86532.0], [8.0, 86444.0], [9.0, 86358.0], [10.0, 86348.0], [11.0, 86334.0], [12.0, 86287.0], [13.0, 86274.0], [14.0, 86228.0], [16.0, 86175.0], [17.0, 86167.0], [18.0, 86138.0], [20.0, 86073.0], [21.0, 85953.0], [22.0, 85923.0], [23.0, 85843.0], [24.0, 86321.0], [25.0, 85974.0], [26.0, 85353.0], [27.0, 85001.0], [28.0, 84908.0], [29.0, 83606.0], [30.0, 83613.0], [31.0, 83595.0], [33.0, 83578.0], [35.0, 83763.33333333333], [36.0, 83543.0], [40.0, 83570.5], [45.0, 83532.0], [44.0, 83552.83333333333], [46.0, 84092.0], [51.0, 84039.0], [53.0, 83993.0], [52.0, 84030.0], [55.0, 83941.5], [56.0, 84032.0], [59.0, 84026.0], [58.0, 84059.5], [61.0, 84025.5], [60.0, 84030.5], [67.0, 84024.0], [66.0, 84017.0], [65.0, 83466.0], [64.0, 83975.75], [71.0, 83926.0], [70.0, 83916.0], [69.0, 83965.0], [68.0, 84011.0], [75.0, 83818.5], [73.0, 83886.5], [79.0, 83901.5], [77.0, 83930.0], [82.0, 83932.0], [81.0, 83909.0], [80.0, 83853.0], [87.0, 83926.0], [86.0, 83889.0], [85.0, 83892.33333333333], [91.0, 83209.0], [90.0, 83214.0], [89.0, 83218.0], [88.0, 83684.0], [93.0, 83825.0], [92.0, 83206.0], [99.0, 83800.0], [98.0, 83809.0], [97.0, 83812.0], [103.0, 83785.75], [102.0, 83792.0], [100.0, 83784.0], [107.0, 83826.0], [106.0, 83819.0], [105.0, 83728.0], [104.0, 83794.0], [111.0, 83639.0], [110.0, 83739.0], [109.0, 83744.0], [108.0, 83722.0], [115.0, 83421.0], [114.0, 83664.0], [113.0, 83028.0], [112.0, 83683.0], [119.0, 83676.0], [116.0, 83651.0], [123.0, 83004.0], [122.0, 82832.0], [121.0, 83640.0], [120.0, 83698.0], [126.0, 83653.0], [125.0, 83648.5], [135.0, 83628.0], [134.0, 83675.0], [133.0, 83628.0], [132.0, 83635.0], [130.0, 83642.5], [128.0, 83411.5], [136.0, 83613.0], [151.0, 83606.0], [150.0, 83564.0], [149.0, 83610.0], [148.0, 83552.54545454546], [144.0, 83619.0], [159.0, 83247.5], [157.0, 83597.0], [156.0, 83582.0], [155.0, 83581.0], [154.0, 83542.0], [153.0, 83429.5], [166.0, 83509.0], [165.0, 83333.0], [163.0, 83559.0], [162.0, 83204.0], [161.0, 83466.0], [160.0, 83491.0], [174.0, 82633.0], [173.0, 83451.0], [172.0, 83185.0], [171.0, 83339.0], [169.0, 83192.0], [168.0, 83451.5], [183.0, 82580.0], [181.0, 82582.0], [180.0, 82526.0], [179.0, 82612.0], [178.0, 82611.0], [177.0, 82625.0], [176.0, 82895.5], [189.0, 82511.0], [188.0, 82461.0], [186.0, 82820.0], [184.0, 82575.0], [198.0, 82453.0], [197.0, 83396.0], [194.0, 82455.0], [192.0, 82748.33333333333], [207.0, 82517.0], [206.0, 82443.0], [205.0, 82909.5], [203.0, 83433.0], [202.0, 83379.0], [201.0, 83381.0], [200.0, 83193.4], [215.0, 82448.0], [214.0, 82462.0], [212.0, 82463.0], [211.0, 82473.0], [210.0, 82460.0], [209.0, 82472.0], [208.0, 82478.0], [220.0, 82509.0], [219.0, 82519.5], [217.0, 82474.0], [216.0, 82445.0], [228.0, 82492.0], [227.0, 82510.0], [225.0, 82466.0], [224.0, 82511.0], [239.0, 82317.0], [238.0, 82431.0], [237.0, 82403.0], [235.0, 82477.5], [233.0, 82333.0], [232.0, 82449.25], [246.0, 82369.0], [245.0, 82367.0], [244.0, 82367.0], [243.0, 82402.0], [242.0, 82415.0], [241.0, 82317.0], [240.0, 82500.0], [255.0, 82441.0], [254.0, 82371.33333333333], [251.0, 82347.0], [250.0, 82356.0], [249.0, 82364.0], [270.0, 82369.0], [271.0, 82398.0], [269.0, 82418.0], [268.0, 82374.0], [267.0, 82380.5], [265.0, 82389.0], [264.0, 82386.0], [263.0, 82392.0], [256.0, 82424.0], [258.0, 82192.0], [257.0, 82407.0], [262.0, 82399.33333333333], [260.0, 82403.0], [275.0, 82384.0], [286.0, 82355.0], [287.0, 83081.0], [285.0, 82264.0], [282.0, 82353.5], [280.0, 82353.0], [279.0, 82111.0], [278.0, 82400.0], [276.0, 82380.0], [274.0, 82388.0], [273.0, 82402.0], [272.0, 82406.0], [301.0, 82009.0], [303.0, 82297.5], [300.0, 82300.0], [299.0, 82304.0], [298.0, 82298.5], [296.0, 82302.0], [295.0, 82304.0], [294.0, 82306.66666666667], [291.0, 82337.0], [290.0, 82348.0], [318.0, 82413.5], [319.0, 81911.0], [316.0, 82908.0], [315.0, 82937.0], [314.0, 82594.0], [313.0, 82617.0], [310.0, 82444.0], [308.0, 82255.5], [306.0, 82261.0], [305.0, 82273.5], [334.0, 82556.0], [335.0, 82815.0], [333.0, 82801.0], [332.0, 82753.0], [331.0, 82863.0], [330.0, 82536.0], [328.0, 82794.0], [327.0, 82864.0], [323.0, 82861.0], [322.0, 82909.0], [321.0, 82786.0], [325.0, 82864.0], [339.0, 82239.0], [350.0, 82240.0], [349.0, 82307.0], [347.0, 82326.5], [346.0, 82207.0], [344.0, 82466.0], [342.0, 82479.0], [341.0, 82491.5], [338.0, 82233.0], [337.0, 82785.0], [336.0, 82766.0], [355.0, 82460.0], [367.0, 82181.66666666667], [366.0, 82220.0], [362.0, 82339.0], [361.0, 82294.25], [357.0, 82122.0], [356.0, 82450.0], [354.0, 82131.0], [353.0, 82466.0], [352.0, 82184.5], [383.0, 82320.0], [380.0, 82323.0], [378.0, 82074.0], [377.0, 82312.0], [376.0, 82343.66666666667], [373.0, 82093.0], [372.0, 82073.0], [371.0, 82372.0], [370.0, 82254.0], [396.0, 82187.33333333333], [398.0, 82282.0], [399.0, 81960.0], [397.0, 81993.0], [393.0, 82338.0], [392.0, 82037.0], [391.0, 82120.0], [385.0, 82045.0], [387.0, 82199.0], [386.0, 82042.0], [390.0, 82300.5], [388.0, 82324.0], [414.0, 82146.0], [415.0, 82157.0], [413.0, 82110.0], [412.0, 82073.0], [411.0, 82140.0], [410.0, 82169.0], [408.0, 82147.0], [407.0, 82154.0], [402.0, 82138.5], [400.0, 82291.0], [406.0, 82106.0], [405.0, 82165.0], [419.0, 81031.0], [430.0, 81098.0], [429.0, 81113.5], [424.0, 80985.0], [423.0, 81241.0], [422.0, 81265.0], [421.0, 81260.0], [420.0, 81255.0], [418.0, 81036.0], [417.0, 82042.0], [416.0, 82043.0], [443.0, 81037.5], [441.0, 81032.0], [440.0, 80973.5], [438.0, 81079.0], [437.0, 81002.0], [435.0, 80967.5], [434.0, 80967.0], [462.0, 81769.5], [459.0, 81813.0], [457.0, 81809.0], [456.0, 81782.66666666667], [455.0, 81770.0], [453.0, 81804.5], [450.0, 81813.0], [476.0, 81599.0], [470.0, 81792.0], [469.0, 81810.66666666667], [466.0, 81796.0], [465.0, 81818.4], [492.0, 81661.33333333333], [490.0, 81650.0], [486.0, 81448.0], [485.0, 81595.5], [482.0, 81379.5], [480.0, 81433.0], [510.0, 81408.5], [508.0, 81621.66666666667], [507.0, 81750.0], [505.0, 81394.0], [503.0, 81828.0], [502.0, 81806.0], [499.0, 81601.75], [496.0, 81410.0], [542.0, 81367.0], [543.0, 81361.0], [529.0, 81724.5], [541.0, 81566.0], [540.0, 81772.0], [538.0, 81769.0], [537.0, 81576.5], [536.0, 81475.25], [518.0, 81580.66666666666], [516.0, 81666.66666666667], [515.0, 81783.0], [514.0, 81761.0], [512.0, 81232.0], [527.0, 81585.75], [525.0, 81741.0], [534.0, 81553.5], [531.0, 81457.33333333333], [955.0, 80163.5], [956.0, 80820.0], [957.0, 80623.26213592233], [958.0, 80740.14893617018], [959.0, 80436.4], [986.0, 80144.0], [984.0, 80060.0], [966.0, 80736.8], [965.0, 80318.5], [963.0, 80944.0], [961.0, 80710.0], [962.0, 80836.5], [983.0, 79904.5], [980.0, 80519.96721311478], [978.0, 80705.36363636363], [979.0, 80472.61538461538], [976.0, 80849.0], [975.0, 80937.0], [973.0, 80952.0], [972.0, 80519.0], [970.0, 80845.33333333333], [968.0, 80628.25], [1000.0, 40390.0], [999.0, 79939.59999999999], [997.0, 79998.0], [995.0, 80185.0], [1.0, 88515.0]], "isOverall": false, "label": "Play Video", "isController": false}, {"data": [[589.2990000000007, 81730.1319999999]], "isOverall": false, "label": "Play Video-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5.683333333333334, "minX": 1.5713934E12, "maxY": 6514.133333333333, "series": [{"data": [[1.57139346E12, 5941.083333333333], [1.5713934E12, 5.683333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57139346E12, 6514.133333333333], [1.5713934E12, 6.566666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139346E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 40390.0, "minX": 1.5713934E12, "maxY": 81771.51351351368, "series": [{"data": [[1.57139346E12, 81771.51351351368], [1.5713934E12, 40390.0]], "isOverall": false, "label": "Play Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139346E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 40389.0, "minX": 1.5713934E12, "maxY": 81170.26826826816, "series": [{"data": [[1.57139346E12, 81170.26826826816], [1.5713934E12, 40389.0]], "isOverall": false, "label": "Play Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139346E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 193.0, "minX": 1.5713934E12, "maxY": 751.3513513513515, "series": [{"data": [[1.57139346E12, 751.3513513513515], [1.5713934E12, 193.0]], "isOverall": false, "label": "Play Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139346E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 40390.0, "minX": 1.5713934E12, "maxY": 88515.0, "series": [{"data": [[1.57139346E12, 88515.0], [1.5713934E12, 40390.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57139346E12, 79650.0], [1.5713934E12, 40390.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57139346E12, 83636.3], [1.5713934E12, 40390.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57139346E12, 86334.98], [1.5713934E12, 40390.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57139346E12, 83922.75], [1.5713934E12, 40390.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139346E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 40390.0, "minX": 1.0, "maxY": 88226.0, "series": [{"data": [[1.0, 40390.0], [514.0, 80918.0], [134.0, 82099.5], [65.0, 83909.0], [2.0, 88226.0], [19.0, 79899.0], [12.0, 86488.0], [13.0, 86076.0], [239.0, 82575.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 84908.0], [12.0, 86322.5], [13.0, 85663.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 514.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 88226.0, "series": [{"data": [[1.0, 40389.0], [514.0, 80916.0], [134.0, 82099.5], [65.0, 83909.0], [2.0, 88226.0], [19.0, 79898.0], [12.0, 86488.0], [13.0, 86076.0], [239.0, 82575.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [12.0, 0.0], [13.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 514.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57139334E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57139334E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139334E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5713934E12, "maxY": 16.533333333333335, "series": [{"data": [[1.57139346E12, 16.533333333333335], [1.5713934E12, 0.016666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.57139346E12, 0.11666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57139346E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5713934E12, "maxY": 16.533333333333335, "series": [{"data": [[1.57139346E12, 0.11666666666666667]], "isOverall": false, "label": "Play Video-failure", "isController": false}, {"data": [[1.57139346E12, 16.533333333333335], [1.5713934E12, 0.016666666666666666]], "isOverall": false, "label": "Play Video-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139346E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5713934E12, "maxY": 16.533333333333335, "series": [{"data": [[1.57139346E12, 16.533333333333335], [1.5713934E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.57139346E12, 0.11666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57139346E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

