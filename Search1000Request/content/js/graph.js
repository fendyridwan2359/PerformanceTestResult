/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8548.0, "minX": 0.0, "maxY": 26898.0, "series": [{"data": [[0.0, 8548.0], [0.1, 8554.0], [0.2, 8555.0], [0.3, 8555.0], [0.4, 8559.0], [0.5, 8565.0], [0.6, 8570.0], [0.7, 8576.0], [0.8, 8647.0], [0.9, 8664.0], [1.0, 8747.0], [1.1, 8757.0], [1.2, 8759.0], [1.3, 8760.0], [1.4, 8760.0], [1.5, 8763.0], [1.6, 8767.0], [1.7, 8899.0], [1.8, 8901.0], [1.9, 8901.0], [2.0, 8906.0], [2.1, 8909.0], [2.2, 8911.0], [2.3, 8912.0], [2.4, 8913.0], [2.5, 8915.0], [2.6, 8973.0], [2.7, 8976.0], [2.8, 8987.0], [2.9, 9006.0], [3.0, 9010.0], [3.1, 9011.0], [3.2, 9013.0], [3.3, 9013.0], [3.4, 9014.0], [3.5, 9015.0], [3.6, 9090.0], [3.7, 9138.0], [3.8, 9138.0], [3.9, 9253.0], [4.0, 9908.0], [4.1, 9908.0], [4.2, 10069.0], [4.3, 10099.0], [4.4, 10114.0], [4.5, 10139.0], [4.6, 10144.0], [4.7, 10160.0], [4.8, 10180.0], [4.9, 10191.0], [5.0, 10195.0], [5.1, 10198.0], [5.2, 10200.0], [5.3, 10211.0], [5.4, 10216.0], [5.5, 10221.0], [5.6, 10223.0], [5.7, 10238.0], [5.8, 10242.0], [5.9, 10250.0], [6.0, 10253.0], [6.1, 10259.0], [6.2, 10260.0], [6.3, 10287.0], [6.4, 10288.0], [6.5, 10301.0], [6.6, 10307.0], [6.7, 10311.0], [6.8, 10320.0], [6.9, 10330.0], [7.0, 10339.0], [7.1, 10348.0], [7.2, 10351.0], [7.3, 10353.0], [7.4, 10357.0], [7.5, 10358.0], [7.6, 10364.0], [7.7, 10385.0], [7.8, 10462.0], [7.9, 10468.0], [8.0, 10477.0], [8.1, 10493.0], [8.2, 10498.0], [8.3, 10508.0], [8.4, 10596.0], [8.5, 10597.0], [8.6, 10599.0], [8.7, 10626.0], [8.8, 10629.0], [8.9, 10633.0], [9.0, 10643.0], [9.1, 10665.0], [9.2, 10670.0], [9.3, 10671.0], [9.4, 10677.0], [9.5, 10682.0], [9.6, 10691.0], [9.7, 10710.0], [9.8, 10710.0], [9.9, 10711.0], [10.0, 10715.0], [10.1, 10735.0], [10.2, 10753.0], [10.3, 10791.0], [10.4, 10800.0], [10.5, 10825.0], [10.6, 10850.0], [10.7, 10851.0], [10.8, 10851.0], [10.9, 10926.0], [11.0, 10937.0], [11.1, 11004.0], [11.2, 11015.0], [11.3, 11030.0], [11.4, 11063.0], [11.5, 11077.0], [11.6, 11154.0], [11.7, 11165.0], [11.8, 11174.0], [11.9, 11186.0], [12.0, 11246.0], [12.1, 11261.0], [12.2, 11262.0], [12.3, 11273.0], [12.4, 11286.0], [12.5, 11293.0], [12.6, 11295.0], [12.7, 11300.0], [12.8, 11313.0], [12.9, 11381.0], [13.0, 11382.0], [13.1, 11390.0], [13.2, 11391.0], [13.3, 11422.0], [13.4, 11435.0], [13.5, 11440.0], [13.6, 11453.0], [13.7, 11494.0], [13.8, 11527.0], [13.9, 11536.0], [14.0, 11536.0], [14.1, 11543.0], [14.2, 11549.0], [14.3, 11556.0], [14.4, 11561.0], [14.5, 11579.0], [14.6, 11582.0], [14.7, 11628.0], [14.8, 11632.0], [14.9, 11633.0], [15.0, 11635.0], [15.1, 11637.0], [15.2, 11646.0], [15.3, 11654.0], [15.4, 11654.0], [15.5, 11655.0], [15.6, 11657.0], [15.7, 11665.0], [15.8, 11667.0], [15.9, 11698.0], [16.0, 11698.0], [16.1, 11702.0], [16.2, 11707.0], [16.3, 11721.0], [16.4, 11743.0], [16.5, 11745.0], [16.6, 11758.0], [16.7, 11764.0], [16.8, 11770.0], [16.9, 11777.0], [17.0, 11799.0], [17.1, 11807.0], [17.2, 11808.0], [17.3, 11812.0], [17.4, 11813.0], [17.5, 11817.0], [17.6, 11826.0], [17.7, 11829.0], [17.8, 11840.0], [17.9, 11845.0], [18.0, 11869.0], [18.1, 11870.0], [18.2, 11883.0], [18.3, 11892.0], [18.4, 11896.0], [18.5, 11898.0], [18.6, 11902.0], [18.7, 11905.0], [18.8, 11909.0], [18.9, 11909.0], [19.0, 11917.0], [19.1, 11918.0], [19.2, 11922.0], [19.3, 11934.0], [19.4, 11941.0], [19.5, 11958.0], [19.6, 11959.0], [19.7, 11960.0], [19.8, 11975.0], [19.9, 11984.0], [20.0, 11992.0], [20.1, 11992.0], [20.2, 12007.0], [20.3, 12009.0], [20.4, 12044.0], [20.5, 12057.0], [20.6, 12062.0], [20.7, 12062.0], [20.8, 12065.0], [20.9, 12069.0], [21.0, 12090.0], [21.1, 12091.0], [21.2, 12125.0], [21.3, 12138.0], [21.4, 12142.0], [21.5, 12142.0], [21.6, 12158.0], [21.7, 12160.0], [21.8, 12163.0], [21.9, 12173.0], [22.0, 12174.0], [22.1, 12192.0], [22.2, 12214.0], [22.3, 12225.0], [22.4, 12265.0], [22.5, 12283.0], [22.6, 12310.0], [22.7, 12319.0], [22.8, 12321.0], [22.9, 12324.0], [23.0, 12328.0], [23.1, 12330.0], [23.2, 12340.0], [23.3, 12341.0], [23.4, 12342.0], [23.5, 12387.0], [23.6, 12418.0], [23.7, 12434.0], [23.8, 12435.0], [23.9, 12439.0], [24.0, 12443.0], [24.1, 12444.0], [24.2, 12446.0], [24.3, 12451.0], [24.4, 12452.0], [24.5, 12466.0], [24.6, 12466.0], [24.7, 12469.0], [24.8, 12470.0], [24.9, 12471.0], [25.0, 12471.0], [25.1, 12478.0], [25.2, 12479.0], [25.3, 12489.0], [25.4, 12490.0], [25.5, 12491.0], [25.6, 12495.0], [25.7, 12498.0], [25.8, 12503.0], [25.9, 12503.0], [26.0, 12517.0], [26.1, 12524.0], [26.2, 12539.0], [26.3, 12543.0], [26.4, 12545.0], [26.5, 12550.0], [26.6, 12553.0], [26.7, 12557.0], [26.8, 12568.0], [26.9, 12577.0], [27.0, 12578.0], [27.1, 12595.0], [27.2, 12604.0], [27.3, 12608.0], [27.4, 12610.0], [27.5, 12611.0], [27.6, 12614.0], [27.7, 12622.0], [27.8, 12624.0], [27.9, 12638.0], [28.0, 12638.0], [28.1, 12640.0], [28.2, 12642.0], [28.3, 12644.0], [28.4, 12645.0], [28.5, 12655.0], [28.6, 12656.0], [28.7, 12659.0], [28.8, 12659.0], [28.9, 12667.0], [29.0, 12669.0], [29.1, 12669.0], [29.2, 12674.0], [29.3, 12676.0], [29.4, 12677.0], [29.5, 12685.0], [29.6, 12694.0], [29.7, 12699.0], [29.8, 12699.0], [29.9, 12705.0], [30.0, 12716.0], [30.1, 12716.0], [30.2, 12721.0], [30.3, 12741.0], [30.4, 12752.0], [30.5, 12764.0], [30.6, 12764.0], [30.7, 12765.0], [30.8, 12766.0], [30.9, 12779.0], [31.0, 12783.0], [31.1, 12792.0], [31.2, 12796.0], [31.3, 12801.0], [31.4, 12806.0], [31.5, 12811.0], [31.6, 12812.0], [31.7, 12814.0], [31.8, 12815.0], [31.9, 12819.0], [32.0, 12825.0], [32.1, 12829.0], [32.2, 12837.0], [32.3, 12838.0], [32.4, 12838.0], [32.5, 12840.0], [32.6, 12847.0], [32.7, 12847.0], [32.8, 12855.0], [32.9, 12861.0], [33.0, 12863.0], [33.1, 12873.0], [33.2, 12876.0], [33.3, 12890.0], [33.4, 12897.0], [33.5, 12902.0], [33.6, 12906.0], [33.7, 12907.0], [33.8, 12918.0], [33.9, 12922.0], [34.0, 12922.0], [34.1, 12923.0], [34.2, 12929.0], [34.3, 12935.0], [34.4, 12941.0], [34.5, 12944.0], [34.6, 12950.0], [34.7, 12953.0], [34.8, 12954.0], [34.9, 12956.0], [35.0, 12957.0], [35.1, 12959.0], [35.2, 12965.0], [35.3, 12966.0], [35.4, 12967.0], [35.5, 12978.0], [35.6, 12983.0], [35.7, 12983.0], [35.8, 12991.0], [35.9, 12992.0], [36.0, 13000.0], [36.1, 13010.0], [36.2, 13016.0], [36.3, 13017.0], [36.4, 13018.0], [36.5, 13019.0], [36.6, 13027.0], [36.7, 13041.0], [36.8, 13045.0], [36.9, 13045.0], [37.0, 13057.0], [37.1, 13058.0], [37.2, 13060.0], [37.3, 13060.0], [37.4, 13062.0], [37.5, 13066.0], [37.6, 13079.0], [37.7, 13083.0], [37.8, 13084.0], [37.9, 13084.0], [38.0, 13085.0], [38.1, 13089.0], [38.2, 13091.0], [38.3, 13096.0], [38.4, 13102.0], [38.5, 13108.0], [38.6, 13110.0], [38.7, 13114.0], [38.8, 13118.0], [38.9, 13118.0], [39.0, 13121.0], [39.1, 13124.0], [39.2, 13126.0], [39.3, 13128.0], [39.4, 13130.0], [39.5, 13161.0], [39.6, 13166.0], [39.7, 13173.0], [39.8, 13200.0], [39.9, 13200.0], [40.0, 13214.0], [40.1, 13225.0], [40.2, 13232.0], [40.3, 13233.0], [40.4, 13235.0], [40.5, 13250.0], [40.6, 13250.0], [40.7, 13266.0], [40.8, 13274.0], [40.9, 13279.0], [41.0, 13280.0], [41.1, 13280.0], [41.2, 13281.0], [41.3, 13284.0], [41.4, 13305.0], [41.5, 13307.0], [41.6, 13308.0], [41.7, 13316.0], [41.8, 13333.0], [41.9, 13337.0], [42.0, 13352.0], [42.1, 13383.0], [42.2, 13390.0], [42.3, 13391.0], [42.4, 13392.0], [42.5, 13404.0], [42.6, 13409.0], [42.7, 13411.0], [42.8, 13422.0], [42.9, 13426.0], [43.0, 13434.0], [43.1, 13441.0], [43.2, 13450.0], [43.3, 13458.0], [43.4, 13477.0], [43.5, 13486.0], [43.6, 13491.0], [43.7, 13508.0], [43.8, 13510.0], [43.9, 13516.0], [44.0, 13521.0], [44.1, 13528.0], [44.2, 13534.0], [44.3, 13549.0], [44.4, 13551.0], [44.5, 13568.0], [44.6, 13573.0], [44.7, 13574.0], [44.8, 13577.0], [44.9, 13585.0], [45.0, 13600.0], [45.1, 13607.0], [45.2, 13623.0], [45.3, 13640.0], [45.4, 13640.0], [45.5, 13657.0], [45.6, 13660.0], [45.7, 13661.0], [45.8, 13662.0], [45.9, 13667.0], [46.0, 13673.0], [46.1, 13682.0], [46.2, 13682.0], [46.3, 13686.0], [46.4, 13700.0], [46.5, 13707.0], [46.6, 13710.0], [46.7, 13712.0], [46.8, 13713.0], [46.9, 13719.0], [47.0, 13739.0], [47.1, 13749.0], [47.2, 13759.0], [47.3, 13762.0], [47.4, 13763.0], [47.5, 13777.0], [47.6, 13778.0], [47.7, 13787.0], [47.8, 13794.0], [47.9, 13796.0], [48.0, 13798.0], [48.1, 13798.0], [48.2, 13800.0], [48.3, 13801.0], [48.4, 13803.0], [48.5, 13809.0], [48.6, 13813.0], [48.7, 13818.0], [48.8, 13818.0], [48.9, 13822.0], [49.0, 13824.0], [49.1, 13828.0], [49.2, 13830.0], [49.3, 13832.0], [49.4, 13833.0], [49.5, 13835.0], [49.6, 13838.0], [49.7, 13843.0], [49.8, 13853.0], [49.9, 13877.0], [50.0, 13885.0], [50.1, 13888.0], [50.2, 13894.0], [50.3, 13896.0], [50.4, 13906.0], [50.5, 13908.0], [50.6, 13910.0], [50.7, 13916.0], [50.8, 13919.0], [50.9, 13920.0], [51.0, 13923.0], [51.1, 13925.0], [51.2, 13935.0], [51.3, 13940.0], [51.4, 13944.0], [51.5, 13954.0], [51.6, 13960.0], [51.7, 13962.0], [51.8, 13966.0], [51.9, 13967.0], [52.0, 13970.0], [52.1, 13974.0], [52.2, 13978.0], [52.3, 13981.0], [52.4, 13984.0], [52.5, 13991.0], [52.6, 13992.0], [52.7, 13999.0], [52.8, 14000.0], [52.9, 14001.0], [53.0, 14006.0], [53.1, 14009.0], [53.2, 14010.0], [53.3, 14012.0], [53.4, 14015.0], [53.5, 14023.0], [53.6, 14025.0], [53.7, 14025.0], [53.8, 14027.0], [53.9, 14027.0], [54.0, 14029.0], [54.1, 14029.0], [54.2, 14033.0], [54.3, 14037.0], [54.4, 14037.0], [54.5, 14039.0], [54.6, 14043.0], [54.7, 14044.0], [54.8, 14045.0], [54.9, 14046.0], [55.0, 14053.0], [55.1, 14054.0], [55.2, 14064.0], [55.3, 14065.0], [55.4, 14067.0], [55.5, 14068.0], [55.6, 14069.0], [55.7, 14074.0], [55.8, 14075.0], [55.9, 14075.0], [56.0, 14078.0], [56.1, 14081.0], [56.2, 14083.0], [56.3, 14084.0], [56.4, 14084.0], [56.5, 14090.0], [56.6, 14092.0], [56.7, 14096.0], [56.8, 14101.0], [56.9, 14101.0], [57.0, 14102.0], [57.1, 14103.0], [57.2, 14103.0], [57.3, 14104.0], [57.4, 14110.0], [57.5, 14114.0], [57.6, 14115.0], [57.7, 14120.0], [57.8, 14123.0], [57.9, 14123.0], [58.0, 14130.0], [58.1, 14131.0], [58.2, 14132.0], [58.3, 14132.0], [58.4, 14137.0], [58.5, 14138.0], [58.6, 14142.0], [58.7, 14145.0], [58.8, 14148.0], [58.9, 14152.0], [59.0, 14155.0], [59.1, 14162.0], [59.2, 14165.0], [59.3, 14173.0], [59.4, 14183.0], [59.5, 14183.0], [59.6, 14199.0], [59.7, 14208.0], [59.8, 14211.0], [59.9, 14239.0], [60.0, 14241.0], [60.1, 14247.0], [60.2, 14248.0], [60.3, 14260.0], [60.4, 14260.0], [60.5, 14262.0], [60.6, 14272.0], [60.7, 14282.0], [60.8, 14288.0], [60.9, 14290.0], [61.0, 14291.0], [61.1, 14296.0], [61.2, 14297.0], [61.3, 14298.0], [61.4, 14304.0], [61.5, 14304.0], [61.6, 14305.0], [61.7, 14307.0], [61.8, 14309.0], [61.9, 14310.0], [62.0, 14312.0], [62.1, 14317.0], [62.2, 14317.0], [62.3, 14323.0], [62.4, 14338.0], [62.5, 14339.0], [62.6, 14369.0], [62.7, 14370.0], [62.8, 14388.0], [62.9, 14389.0], [63.0, 14390.0], [63.1, 14396.0], [63.2, 14402.0], [63.3, 14410.0], [63.4, 14411.0], [63.5, 14414.0], [63.6, 14421.0], [63.7, 14426.0], [63.8, 14444.0], [63.9, 14445.0], [64.0, 14447.0], [64.1, 14460.0], [64.2, 14469.0], [64.3, 14472.0], [64.4, 14478.0], [64.5, 14486.0], [64.6, 14486.0], [64.7, 14488.0], [64.8, 14492.0], [64.9, 14496.0], [65.0, 14497.0], [65.1, 14499.0], [65.2, 14501.0], [65.3, 14504.0], [65.4, 14508.0], [65.5, 14515.0], [65.6, 14530.0], [65.7, 14530.0], [65.8, 14540.0], [65.9, 14544.0], [66.0, 14547.0], [66.1, 14550.0], [66.2, 14551.0], [66.3, 14555.0], [66.4, 14559.0], [66.5, 14563.0], [66.6, 14563.0], [66.7, 14568.0], [66.8, 14571.0], [66.9, 14572.0], [67.0, 14579.0], [67.1, 14581.0], [67.2, 14591.0], [67.3, 14591.0], [67.4, 14601.0], [67.5, 14603.0], [67.6, 14607.0], [67.7, 14610.0], [67.8, 14616.0], [67.9, 14621.0], [68.0, 14622.0], [68.1, 14623.0], [68.2, 14624.0], [68.3, 14642.0], [68.4, 14645.0], [68.5, 14660.0], [68.6, 14661.0], [68.7, 14676.0], [68.8, 14692.0], [68.9, 14694.0], [69.0, 14705.0], [69.1, 14705.0], [69.2, 14706.0], [69.3, 14717.0], [69.4, 14725.0], [69.5, 14728.0], [69.6, 14730.0], [69.7, 14741.0], [69.8, 14741.0], [69.9, 14749.0], [70.0, 14767.0], [70.1, 14774.0], [70.2, 14779.0], [70.3, 14783.0], [70.4, 14783.0], [70.5, 14789.0], [70.6, 14795.0], [70.7, 14803.0], [70.8, 14803.0], [70.9, 14806.0], [71.0, 14809.0], [71.1, 14809.0], [71.2, 14814.0], [71.3, 14829.0], [71.4, 14831.0], [71.5, 14838.0], [71.6, 14844.0], [71.7, 14844.0], [71.8, 14851.0], [71.9, 14856.0], [72.0, 14859.0], [72.1, 14862.0], [72.2, 14864.0], [72.3, 14889.0], [72.4, 14899.0], [72.5, 14901.0], [72.6, 14901.0], [72.7, 14902.0], [72.8, 14913.0], [72.9, 14913.0], [73.0, 14919.0], [73.1, 14923.0], [73.2, 14926.0], [73.3, 14967.0], [73.4, 14967.0], [73.5, 14971.0], [73.6, 14977.0], [73.7, 15025.0], [73.8, 15030.0], [73.9, 15043.0], [74.0, 15044.0], [74.1, 15049.0], [74.2, 15050.0], [74.3, 15057.0], [74.4, 15059.0], [74.5, 15060.0], [74.6, 15062.0], [74.7, 15063.0], [74.8, 15066.0], [74.9, 15069.0], [75.0, 15070.0], [75.1, 15074.0], [75.2, 15081.0], [75.3, 15089.0], [75.4, 15102.0], [75.5, 15122.0], [75.6, 15132.0], [75.7, 15147.0], [75.8, 15150.0], [75.9, 15171.0], [76.0, 15177.0], [76.1, 15181.0], [76.2, 15210.0], [76.3, 15213.0], [76.4, 15213.0], [76.5, 15217.0], [76.6, 15221.0], [76.7, 15237.0], [76.8, 15248.0], [76.9, 15248.0], [77.0, 15250.0], [77.1, 15260.0], [77.2, 15266.0], [77.3, 15267.0], [77.4, 15271.0], [77.5, 15294.0], [77.6, 15296.0], [77.7, 15298.0], [77.8, 15300.0], [77.9, 15304.0], [78.0, 15309.0], [78.1, 15310.0], [78.2, 15311.0], [78.3, 15311.0], [78.4, 15315.0], [78.5, 15321.0], [78.6, 15326.0], [78.7, 15327.0], [78.8, 15331.0], [78.9, 15333.0], [79.0, 15333.0], [79.1, 15335.0], [79.2, 15335.0], [79.3, 15336.0], [79.4, 15339.0], [79.5, 15342.0], [79.6, 15343.0], [79.7, 15343.0], [79.8, 15346.0], [79.9, 15349.0], [80.0, 15349.0], [80.1, 15349.0], [80.2, 15352.0], [80.3, 15360.0], [80.4, 15372.0], [80.5, 15376.0], [80.6, 15377.0], [80.7, 15389.0], [80.8, 15390.0], [80.9, 15394.0], [81.0, 15395.0], [81.1, 15398.0], [81.2, 15401.0], [81.3, 15403.0], [81.4, 15403.0], [81.5, 15403.0], [81.6, 15406.0], [81.7, 15407.0], [81.8, 15408.0], [81.9, 15423.0], [82.0, 15425.0], [82.1, 15428.0], [82.2, 15429.0], [82.3, 15433.0], [82.4, 15439.0], [82.5, 15443.0], [82.6, 15450.0], [82.7, 15453.0], [82.8, 15468.0], [82.9, 15479.0], [83.0, 15484.0], [83.1, 15522.0], [83.2, 15528.0], [83.3, 15546.0], [83.4, 15547.0], [83.5, 15557.0], [83.6, 15559.0], [83.7, 15564.0], [83.8, 15567.0], [83.9, 15581.0], [84.0, 15585.0], [84.1, 15591.0], [84.2, 15607.0], [84.3, 15608.0], [84.4, 15609.0], [84.5, 15615.0], [84.6, 15621.0], [84.7, 15626.0], [84.8, 15626.0], [84.9, 15630.0], [85.0, 15631.0], [85.1, 15647.0], [85.2, 15656.0], [85.3, 15657.0], [85.4, 15667.0], [85.5, 15683.0], [85.6, 15685.0], [85.7, 15692.0], [85.8, 15692.0], [85.9, 15695.0], [86.0, 15699.0], [86.1, 15700.0], [86.2, 15711.0], [86.3, 15714.0], [86.4, 15721.0], [86.5, 15723.0], [86.6, 15729.0], [86.7, 15747.0], [86.8, 15748.0], [86.9, 15758.0], [87.0, 15759.0], [87.1, 15761.0], [87.2, 15771.0], [87.3, 15779.0], [87.4, 15782.0], [87.5, 15784.0], [87.6, 15814.0], [87.7, 15823.0], [87.8, 15828.0], [87.9, 15828.0], [88.0, 15828.0], [88.1, 15829.0], [88.2, 15829.0], [88.3, 15830.0], [88.4, 15831.0], [88.5, 15835.0], [88.6, 15836.0], [88.7, 15849.0], [88.8, 15855.0], [88.9, 15866.0], [89.0, 15869.0], [89.1, 15876.0], [89.2, 15880.0], [89.3, 15892.0], [89.4, 15895.0], [89.5, 15896.0], [89.6, 15897.0], [89.7, 15899.0], [89.8, 15905.0], [89.9, 15910.0], [90.0, 15912.0], [90.1, 15917.0], [90.2, 15921.0], [90.3, 15936.0], [90.4, 15939.0], [90.5, 15947.0], [90.6, 15950.0], [90.7, 15951.0], [90.8, 15976.0], [90.9, 15989.0], [91.0, 15993.0], [91.1, 16004.0], [91.2, 16029.0], [91.3, 16029.0], [91.4, 16031.0], [91.5, 16038.0], [91.6, 16062.0], [91.7, 16067.0], [91.8, 16085.0], [91.9, 16085.0], [92.0, 16085.0], [92.1, 16091.0], [92.2, 16093.0], [92.3, 16093.0], [92.4, 16101.0], [92.5, 16127.0], [92.6, 16138.0], [92.7, 16160.0], [92.8, 16183.0], [92.9, 16186.0], [93.0, 16270.0], [93.1, 16274.0], [93.2, 16419.0], [93.3, 16428.0], [93.4, 16440.0], [93.5, 16505.0], [93.6, 16516.0], [93.7, 16517.0], [93.8, 16554.0], [93.9, 16554.0], [94.0, 16555.0], [94.1, 16590.0], [94.2, 16642.0], [94.3, 16667.0], [94.4, 16670.0], [94.5, 16681.0], [94.6, 16759.0], [94.7, 16825.0], [94.8, 16848.0], [94.9, 16888.0], [95.0, 16946.0], [95.1, 17015.0], [95.2, 17059.0], [95.3, 17075.0], [95.4, 17196.0], [95.5, 17265.0], [95.6, 17274.0], [95.7, 17274.0], [95.8, 17290.0], [95.9, 17303.0], [96.0, 17309.0], [96.1, 17346.0], [96.2, 17348.0], [96.3, 17353.0], [96.4, 17355.0], [96.5, 17359.0], [96.6, 17500.0], [96.7, 17716.0], [96.8, 17889.0], [96.9, 17903.0], [97.0, 17911.0], [97.1, 18975.0], [97.2, 19765.0], [97.3, 19824.0], [97.4, 19850.0], [97.5, 19869.0], [97.6, 20019.0], [97.7, 20236.0], [97.8, 20591.0], [97.9, 20751.0], [98.0, 21013.0], [98.1, 21049.0], [98.2, 21077.0], [98.3, 21079.0], [98.4, 21479.0], [98.5, 21485.0], [98.6, 21524.0], [98.7, 21582.0], [98.8, 21815.0], [98.9, 22002.0], [99.0, 22086.0], [99.1, 22369.0], [99.2, 22615.0], [99.3, 22682.0], [99.4, 22713.0], [99.5, 24984.0], [99.6, 24988.0], [99.7, 24994.0], [99.8, 25466.0], [99.9, 26898.0]], "isOverall": false, "label": "Search Video", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 8500.0, "maxY": 40.0, "series": [{"data": [[8600.0, 2.0], [8500.0, 8.0], [8700.0, 6.0], [9000.0, 8.0], [9100.0, 2.0], [8900.0, 11.0], [8800.0, 1.0], [9200.0, 1.0], [10100.0, 9.0], [10200.0, 13.0], [9900.0, 2.0], [10000.0, 2.0], [10500.0, 4.0], [10300.0, 13.0], [10400.0, 5.0], [10700.0, 7.0], [10600.0, 10.0], [11200.0, 7.0], [10800.0, 5.0], [11000.0, 5.0], [10900.0, 2.0], [11100.0, 4.0], [11700.0, 10.0], [11300.0, 6.0], [11500.0, 9.0], [11400.0, 5.0], [11600.0, 14.0], [11900.0, 15.0], [11800.0, 15.0], [12000.0, 10.0], [12100.0, 10.0], [12200.0, 4.0], [12600.0, 27.0], [12700.0, 14.0], [12400.0, 22.0], [12300.0, 10.0], [12500.0, 14.0], [12900.0, 25.0], [13000.0, 24.0], [13100.0, 14.0], [13300.0, 11.0], [13200.0, 16.0], [12800.0, 22.0], [13400.0, 12.0], [13600.0, 14.0], [13700.0, 18.0], [13500.0, 13.0], [13800.0, 22.0], [13900.0, 24.0], [14000.0, 40.0], [14100.0, 29.0], [14200.0, 17.0], [14300.0, 18.0], [14400.0, 20.0], [14500.0, 22.0], [14600.0, 16.0], [14700.0, 17.0], [14800.0, 18.0], [14900.0, 12.0], [15000.0, 17.0], [15100.0, 8.0], [15200.0, 16.0], [15300.0, 35.0], [15400.0, 19.0], [15500.0, 11.0], [15600.0, 19.0], [15700.0, 15.0], [15800.0, 22.0], [15900.0, 13.0], [16000.0, 13.0], [16100.0, 6.0], [16200.0, 2.0], [16500.0, 7.0], [16400.0, 3.0], [16600.0, 4.0], [16800.0, 3.0], [16900.0, 1.0], [17000.0, 3.0], [17200.0, 4.0], [17300.0, 7.0], [17100.0, 1.0], [16700.0, 1.0], [17500.0, 1.0], [17700.0, 1.0], [17900.0, 2.0], [17800.0, 1.0], [18900.0, 1.0], [19700.0, 1.0], [19800.0, 3.0], [20200.0, 1.0], [20000.0, 1.0], [21000.0, 4.0], [20700.0, 1.0], [21400.0, 2.0], [20500.0, 1.0], [21500.0, 2.0], [22000.0, 2.0], [22300.0, 1.0], [21800.0, 1.0], [22600.0, 2.0], [22700.0, 1.0], [24900.0, 3.0], [25400.0, 1.0], [26800.0, 1.0]], "isOverall": false, "label": "Search Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 26800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 511.1009999999997, "minX": 1.57138692E12, "maxY": 511.1009999999997, "series": [{"data": [[1.57138692E12, 511.1009999999997]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57138692E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 10106.438095238096, "minX": 1.0, "maxY": 26898.0, "series": [{"data": [[2.0, 26898.0], [5.0, 24988.666666666668], [6.0, 22002.0], [7.0, 21582.0], [8.0, 22713.0], [9.0, 21524.0], [10.0, 22682.0], [12.0, 20842.0], [13.0, 22369.0], [14.0, 22086.0], [15.0, 22615.0], [16.0, 20591.0], [17.0, 21485.0], [18.0, 21479.0], [19.0, 20019.0], [21.0, 21078.0], [22.0, 20236.0], [23.0, 19850.0], [24.0, 21049.0], [25.0, 19824.0], [26.0, 19765.0], [27.0, 20751.0], [28.0, 21013.0], [29.0, 17903.0], [30.0, 17889.0], [31.0, 18975.0], [33.0, 17716.0], [32.0, 17911.0], [34.0, 17075.0], [37.0, 16085.0], [36.0, 17085.0], [39.0, 17355.0], [38.0, 16067.0], [41.0, 17359.0], [40.0, 16270.0], [42.0, 15989.0], [44.0, 17328.0], [46.0, 17347.0], [48.0, 15919.0], [50.0, 15963.0], [52.0, 16669.0], [55.0, 17076.333333333332], [57.0, 17269.5], [59.0, 16922.5], [61.0, 16386.5], [63.0, 15031.0], [67.0, 16946.0], [66.0, 17059.0], [65.0, 14338.0], [64.0, 15849.0], [71.0, 14031.0], [69.0, 16825.0], [68.0, 16888.0], [74.0, 13944.0], [73.0, 16234.5], [78.0, 13843.0], [77.0, 15376.0], [76.0, 15487.0], [82.0, 15846.0], [81.0, 16681.0], [80.0, 16428.0], [87.0, 15226.0], [85.0, 13824.0], [84.0, 14876.5], [91.0, 13818.0], [88.0, 15782.0], [95.0, 14967.0], [94.0, 16667.0], [93.0, 15266.0], [92.0, 14273.0], [99.0, 13739.0], [98.0, 16553.0], [96.0, 13778.0], [103.0, 16554.0], [102.0, 13710.0], [101.0, 16554.0], [100.0, 15429.0], [107.0, 15321.0], [106.0, 15528.0], [105.0, 15721.0], [104.0, 16505.0], [111.0, 15271.0], [110.0, 16419.0], [109.0, 15667.0], [108.0, 16517.0], [115.0, 16440.0], [114.0, 16183.0], [113.0, 15248.0], [112.0, 13662.0], [119.0, 15102.0], [118.0, 14661.0], [117.0, 13551.0], [116.0, 15395.0], [123.0, 15177.0], [122.0, 13450.0], [121.0, 16186.0], [120.0, 16274.0], [127.0, 15298.0], [126.0, 15479.0], [125.0, 16160.0], [124.0, 13333.0], [135.0, 15393.333333333334], [132.0, 16101.0], [131.0, 14926.0], [130.0, 16127.0], [129.0, 16138.0], [128.0, 16093.0], [143.0, 16093.0], [142.0, 15097.0], [138.0, 16085.0], [137.0, 14859.0], [136.0, 13305.0], [151.0, 15304.0], [150.0, 16062.0], [149.0, 15494.0], [147.0, 14923.0], [146.0, 14803.0], [145.0, 16038.0], [144.0, 13280.0], [157.0, 15975.5], [155.0, 14530.0], [154.0, 13250.0], [153.0, 16031.0], [152.0, 15993.0], [165.0, 13124.75], [161.0, 15976.0], [160.0, 15039.333333333334], [175.0, 15223.0], [173.0, 15951.0], [172.0, 15541.5], [170.0, 14497.0], [169.0, 14563.0], [168.0, 14485.0], [183.0, 14508.0], [182.0, 13104.5], [180.0, 13113.0], [178.0, 13102.0], [177.0, 13828.5], [191.0, 15111.0], [189.0, 15910.0], [188.0, 15213.0], [187.0, 14521.0], [185.0, 13084.0], [184.0, 13084.0], [198.0, 15551.0], [197.0, 15626.0], [195.0, 15221.0], [194.0, 14874.666666666666], [207.0, 14370.0], [205.0, 14421.0], [204.0, 14479.5], [202.0, 13045.0], [201.0, 15074.0], [200.0, 14490.0], [215.0, 15590.0], [212.0, 15870.333333333334], [209.0, 14211.0], [223.0, 15855.0], [220.0, 15159.0], [218.0, 13765.5], [216.0, 13057.0], [229.0, 14049.5], [227.0, 15828.0], [226.0, 14423.0], [224.0, 13608.333333333334], [235.0, 15763.5], [233.0, 14421.0], [244.0, 15070.0], [243.0, 14239.0], [242.0, 15831.333333333334], [241.0, 14488.0], [240.0, 14368.333333333334], [255.0, 14162.0], [254.0, 13721.0], [252.0, 14192.8], [250.0, 15062.0], [248.0, 14659.0], [270.0, 15761.0], [271.0, 15711.0], [269.0, 13577.0], [267.0, 12936.0], [265.0, 15700.0], [264.0, 15170.0], [262.0, 14930.5], [260.0, 14768.25], [256.0, 14148.0], [275.0, 15748.0], [287.0, 12863.0], [286.0, 14937.666666666666], [274.0, 15068.5], [272.0, 14104.0], [283.0, 15692.0], [282.0, 12873.0], [281.0, 14345.5], [279.0, 15468.0], [278.0, 14078.0], [277.0, 15692.0], [276.0, 14478.0], [291.0, 15695.0], [301.0, 14472.0], [302.0, 14910.5], [300.0, 14997.5], [299.0, 14083.0], [294.0, 14339.0], [293.0, 14559.0], [292.0, 15699.0], [290.0, 14591.0], [289.0, 15723.0], [288.0, 12861.0], [318.0, 14298.0], [319.0, 12825.0], [317.0, 14439.5], [307.0, 15567.0], [306.0, 15591.0], [305.0, 15657.0], [304.0, 14829.0], [315.0, 15630.0], [314.0, 14165.0], [313.0, 14227.5], [311.0, 15581.0], [310.0, 12801.0], [309.0, 12840.0], [308.0, 15656.0], [334.0, 14886.0], [332.0, 13342.5], [330.0, 13589.0], [328.0, 14170.0], [326.0, 14864.5], [324.0, 14590.666666666666], [321.0, 12811.0], [320.0, 12814.0], [350.0, 14654.5], [351.0, 14012.0], [348.0, 14194.0], [339.0, 14131.0], [338.0, 14145.5], [336.0, 14929.5], [346.0, 14155.0], [345.0, 14152.0], [344.0, 14084.0], [343.0, 14241.0], [342.0, 15522.0], [341.0, 15546.0], [340.0, 12699.0], [365.0, 14090.0], [367.0, 12638.0], [364.0, 12665.0], [362.0, 13984.0], [361.0, 12655.0], [360.0, 12659.0], [358.0, 13115.333333333334], [355.0, 13351.5], [354.0, 12669.0], [353.0, 12677.0], [381.0, 14296.285714285714], [380.0, 14797.5], [372.0, 14042.5], [370.0, 12644.0], [369.0, 14445.0], [368.0, 14387.5], [428.0, 14388.0], [425.0, 15343.666666666666], [421.0, 14027.0], [420.0, 14587.594594594595], [418.0, 15428.0], [417.0, 12577.0], [462.0, 15332.333333333334], [477.0, 14075.204545454548], [467.0, 14917.0], [465.0, 15296.0], [495.0, 12466.0], [494.0, 12457.333333333334], [493.0, 13896.0], [492.0, 15250.0], [488.0, 14120.0], [487.0, 13730.8], [482.0, 14538.0], [505.0, 13607.0], [504.0, 14741.0], [503.0, 13121.5], [501.0, 15240.333333333334], [500.0, 15217.0], [499.0, 14102.0], [540.0, 14919.0], [536.0, 13032.0], [519.0, 13800.0], [518.0, 13877.0], [516.0, 13797.5], [514.0, 13824.0], [512.0, 12324.0], [534.0, 13657.0], [533.0, 13693.0], [531.0, 14116.333333333334], [528.0, 13622.4], [526.0, 14971.0], [525.0, 13409.0], [521.0, 13458.0], [520.0, 14164.285714285714], [569.0, 13585.0], [574.0, 13412.333333333334], [568.0, 14841.0], [551.0, 13573.0], [550.0, 13769.25], [547.0, 14501.0], [567.0, 14836.5], [566.0, 14540.0], [563.0, 13922.666666666666], [561.0, 13379.0], [558.0, 12720.333333333334], [556.0, 14455.0], [553.0, 13667.0], [552.0, 14542.0], [594.0, 13894.0], [605.0, 14624.0], [604.0, 11910.0], [602.0, 13970.0], [601.0, 13329.5], [591.0, 14767.0], [577.0, 13653.0], [579.0, 14783.0], [578.0, 13981.0], [590.0, 13161.0], [589.0, 13200.0], [588.0, 14217.5], [586.0, 14570.4], [585.0, 14814.0], [584.0, 14803.0], [599.0, 13308.0], [597.0, 14705.0], [596.0, 13292.5], [593.0, 14320.0], [636.0, 13232.0], [628.0, 11807.0], [637.0, 14501.0], [624.0, 14607.0], [635.0, 13831.25], [615.0, 11892.0], [614.0, 13404.0], [613.0, 11936.5], [611.0, 11883.0], [610.0, 11905.0], [609.0, 13304.5], [608.0, 13306.5], [623.0, 14017.0], [621.0, 14568.0], [620.0, 13833.0], [619.0, 14579.0], [618.0, 14630.5], [617.0, 11845.0], [631.0, 11764.0], [630.0, 13568.0], [629.0, 13574.0], [627.0, 12404.5], [625.0, 14603.0], [667.0, 13510.0], [668.0, 11582.0], [666.0, 11632.0], [665.0, 11628.0], [664.0, 12950.0], [646.0, 13308.0], [645.0, 12449.0], [644.0, 13225.0], [642.0, 11702.0], [641.0, 13383.75], [663.0, 11635.0], [662.0, 12678.6], [659.0, 12278.0], [655.0, 11646.0], [654.0, 12966.0], [653.0, 11654.0], [652.0, 11659.666666666666], [650.0, 13095.0], [649.0, 11707.0], [696.0, 13462.25], [692.0, 12565.5], [690.0, 13513.5], [689.0, 13318.0], [686.0, 14114.0], [672.0, 12248.75], [674.0, 14044.0], [673.0, 14288.0], [679.0, 13083.0], [678.0, 12839.5], [685.0, 12721.0], [684.0, 12855.0], [683.0, 13000.0], [682.0, 11381.5], [680.0, 12638.0], [733.0, 14025.0], [735.0, 13469.5], [724.0, 12740.75], [720.0, 12703.333333333334], [732.0, 13383.0], [731.0, 14046.0], [730.0, 13235.0], [729.0, 13787.0], [728.0, 14043.0], [708.0, 14101.0], [707.0, 13585.625000000002], [705.0, 12685.5], [704.0, 12941.0], [717.0, 13077.0], [715.0, 12555.666666666668], [713.0, 12838.0], [727.0, 14027.0], [725.0, 11286.0], [765.0, 12265.0], [755.0, 13214.0], [766.0, 12225.0], [752.0, 13954.0], [754.0, 13966.0], [753.0, 13916.0], [764.0, 11015.0], [763.0, 13084.0], [761.0, 13291.0], [743.0, 13521.0], [742.0, 13999.0], [741.0, 12160.0], [739.0, 12939.5], [737.0, 11165.0], [736.0, 14023.0], [751.0, 13962.0], [750.0, 13150.5], [748.0, 13972.5], [746.0, 11174.0], [745.0, 14000.0], [744.0, 11186.0], [759.0, 13853.0], [758.0, 11077.0], [757.0, 13921.5], [795.0, 13682.0], [786.0, 13422.0], [797.0, 13661.0], [799.0, 12334.0], [785.0, 12466.0], [784.0, 13091.5], [796.0, 12174.0], [794.0, 11660.6], [774.0, 13549.0], [773.0, 13809.0], [772.0, 13803.0], [771.0, 12498.0], [770.0, 11030.0], [769.0, 13822.0], [768.0, 12708.5], [782.0, 13762.0], [781.0, 10937.0], [780.0, 10926.0], [779.0, 13516.0], [778.0, 13719.0], [777.0, 12568.0], [776.0, 13777.5], [789.0, 12387.0], [788.0, 13707.0], [787.0, 12550.0], [824.0, 13027.0], [828.0, 13426.0], [831.0, 11829.0], [817.0, 13486.0], [816.0, 12495.0], [821.0, 10670.0], [820.0, 12328.333333333334], [830.0, 12983.0], [829.0, 10626.0], [827.0, 13441.0], [826.0, 10643.0], [825.0, 13434.0], [815.0, 13018.5], [801.0, 13640.0], [800.0, 13114.0], [803.0, 12142.0], [802.0, 10800.0], [805.0, 10791.0], [804.0, 12192.0], [807.0, 12545.0], [806.0, 12342.0], [813.0, 12831.0], [811.0, 10715.0], [810.0, 13280.0], [809.0, 13600.0], [808.0, 12330.0], [823.0, 12578.0], [822.0, 10665.0], [859.0, 13066.0], [851.0, 10301.0], [860.0, 10242.0], [858.0, 11337.333333333334], [839.0, 10477.0], [838.0, 13291.0], [836.0, 13281.0], [835.0, 11984.0], [834.0, 13089.0], [833.0, 12819.0], [832.0, 12319.0], [846.0, 11817.0], [845.0, 11840.0], [844.0, 13173.0], [843.0, 11869.0], [842.0, 12310.0], [841.0, 12069.0], [840.0, 10462.0], [855.0, 10891.0], [853.0, 11698.0], [852.0, 10287.0], [850.0, 10320.0], [849.0, 10339.0], [848.0, 10355.5], [894.0, 10185.5], [887.0, 10195.0], [876.0, 12439.0], [896.0, 12055.583333333332], [1000.0, 10106.438095238096], [999.0, 12243.315789473685], [1.0, 25466.0]], "isOverall": false, "label": "Search Video", "isController": false}, {"data": [[511.1009999999997, 13764.915999999988]], "isOverall": false, "label": "Search Video-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5100.0, "minX": 1.57138692E12, "maxY": 133263.53333333333, "series": [{"data": [[1.57138692E12, 133263.53333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57138692E12, 5100.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57138692E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 13764.915999999988, "minX": 1.57138692E12, "maxY": 13764.915999999988, "series": [{"data": [[1.57138692E12, 13764.915999999988]], "isOverall": false, "label": "Search Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57138692E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 11241.867000000007, "minX": 1.57138692E12, "maxY": 11241.867000000007, "series": [{"data": [[1.57138692E12, 11241.867000000007]], "isOverall": false, "label": "Search Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57138692E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7670.1370000000015, "minX": 1.57138692E12, "maxY": 7670.1370000000015, "series": [{"data": [[1.57138692E12, 7670.1370000000015]], "isOverall": false, "label": "Search Video", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57138692E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8548.0, "minX": 1.57138692E12, "maxY": 26898.0, "series": [{"data": [[1.57138692E12, 26898.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57138692E12, 8548.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57138692E12, 15911.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57138692E12, 22085.16]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57138692E12, 16943.099999999995]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57138692E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10710.0, "minX": 1000.0, "maxY": 14307.0, "series": [{"data": [[9000.0, 14307.0], [5000.0, 13800.0], [10000.0, 12152.0], [6000.0, 10710.0], [3000.0, 14130.0], [7000.0, 12983.0], [1000.0, 13778.0], [8000.0, 11957.0], [4000.0, 13807.0], [2000.0, 14041.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 10000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 9992.5, "minX": 1000.0, "maxY": 11546.0, "series": [{"data": [[9000.0, 11546.0], [5000.0, 10997.0], [10000.0, 11463.0], [6000.0, 10482.5], [3000.0, 11493.5], [7000.0, 10863.0], [1000.0, 11380.0], [8000.0, 9992.5], [4000.0, 11431.5], [2000.0, 11490.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 10000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57138692E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57138692E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57138692E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57138692E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57138692E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57138692E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57138692E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57138692E12, 16.666666666666668]], "isOverall": false, "label": "Search Video-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57138692E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57138692E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57138692E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57138692E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

