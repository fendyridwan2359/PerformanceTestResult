/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8820.0, "minX": 0.0, "maxY": 224279.0, "series": [{"data": [[0.0, 8820.0], [0.1, 8968.0], [0.2, 8973.0], [0.3, 8973.0], [0.4, 8974.0], [0.5, 8978.0], [0.6, 8980.0], [0.7, 8980.0], [0.8, 8981.0], [0.9, 8985.0], [1.0, 8987.0], [1.1, 8989.0], [1.2, 8989.0], [1.3, 8993.0], [1.4, 8999.0], [1.5, 9006.0], [1.6, 9009.0], [1.7, 9018.0], [1.8, 9031.0], [1.9, 9031.0], [2.0, 9043.0], [2.1, 9084.0], [2.2, 9093.0], [2.3, 9098.0], [2.4, 9113.0], [2.5, 9113.0], [2.6, 9122.0], [2.7, 9126.0], [2.8, 9127.0], [2.9, 9129.0], [3.0, 9129.0], [3.1, 9130.0], [3.2, 9133.0], [3.3, 9136.0], [3.4, 9140.0], [3.5, 9144.0], [3.6, 9145.0], [3.7, 9153.0], [3.8, 9154.0], [3.9, 9157.0], [4.0, 9158.0], [4.1, 9160.0], [4.2, 9165.0], [4.3, 9173.0], [4.4, 9175.0], [4.5, 9175.0], [4.6, 9175.0], [4.7, 9184.0], [4.8, 9185.0], [4.9, 9185.0], [5.0, 9196.0], [5.1, 9196.0], [5.2, 9197.0], [5.3, 9199.0], [5.4, 9200.0], [5.5, 9201.0], [5.6, 9204.0], [5.7, 9209.0], [5.8, 9213.0], [5.9, 9227.0], [6.0, 9250.0], [6.1, 9254.0], [6.2, 9264.0], [6.3, 9307.0], [6.4, 9340.0], [6.5, 9345.0], [6.6, 9354.0], [6.7, 9355.0], [6.8, 9358.0], [6.9, 9371.0], [7.0, 9380.0], [7.1, 9382.0], [7.2, 9398.0], [7.3, 9410.0], [7.4, 9411.0], [7.5, 9441.0], [7.6, 9444.0], [7.7, 9450.0], [7.8, 9485.0], [7.9, 9533.0], [8.0, 9536.0], [8.1, 9592.0], [8.2, 9605.0], [8.3, 9608.0], [8.4, 9647.0], [8.5, 9662.0], [8.6, 9672.0], [8.7, 9675.0], [8.8, 9676.0], [8.9, 9678.0], [9.0, 9680.0], [9.1, 9682.0], [9.2, 9682.0], [9.3, 9682.0], [9.4, 9683.0], [9.5, 9684.0], [9.6, 9686.0], [9.7, 9686.0], [9.8, 9687.0], [9.9, 9689.0], [10.0, 9689.0], [10.1, 9690.0], [10.2, 9693.0], [10.3, 9695.0], [10.4, 9696.0], [10.5, 9696.0], [10.6, 9696.0], [10.7, 9698.0], [10.8, 9699.0], [10.9, 9699.0], [11.0, 9702.0], [11.1, 9704.0], [11.2, 9704.0], [11.3, 9705.0], [11.4, 9706.0], [11.5, 9707.0], [11.6, 9707.0], [11.7, 9708.0], [11.8, 9713.0], [11.9, 9715.0], [12.0, 9725.0], [12.1, 9832.0], [12.2, 9833.0], [12.3, 9834.0], [12.4, 9834.0], [12.5, 9838.0], [12.6, 9838.0], [12.7, 9838.0], [12.8, 9842.0], [12.9, 9843.0], [13.0, 9845.0], [13.1, 9846.0], [13.2, 9846.0], [13.3, 9846.0], [13.4, 9846.0], [13.5, 9847.0], [13.6, 9848.0], [13.7, 9848.0], [13.8, 9849.0], [13.9, 9850.0], [14.0, 9850.0], [14.1, 9851.0], [14.2, 9853.0], [14.3, 9854.0], [14.4, 9854.0], [14.5, 9857.0], [14.6, 9857.0], [14.7, 9858.0], [14.8, 9858.0], [14.9, 9860.0], [15.0, 9860.0], [15.1, 9860.0], [15.2, 9861.0], [15.3, 9861.0], [15.4, 9862.0], [15.5, 9863.0], [15.6, 9864.0], [15.7, 9864.0], [15.8, 9864.0], [15.9, 9865.0], [16.0, 9865.0], [16.1, 9868.0], [16.2, 9868.0], [16.3, 9869.0], [16.4, 9871.0], [16.5, 9872.0], [16.6, 9875.0], [16.7, 9879.0], [16.8, 9879.0], [16.9, 9883.0], [17.0, 9884.0], [17.1, 9886.0], [17.2, 9888.0], [17.3, 9892.0], [17.4, 9894.0], [17.5, 9897.0], [17.6, 9903.0], [17.7, 9904.0], [17.8, 9905.0], [17.9, 9908.0], [18.0, 18057.0], [18.1, 19116.0], [18.2, 19236.0], [18.3, 19469.0], [18.4, 19863.0], [18.5, 19866.0], [18.6, 19869.0], [18.7, 19869.0], [18.8, 19916.0], [18.9, 19919.0], [19.0, 20004.0], [19.1, 20023.0], [19.2, 20036.0], [19.3, 20076.0], [19.4, 20099.0], [19.5, 20466.0], [19.6, 20562.0], [19.7, 20563.0], [19.8, 20566.0], [19.9, 20574.0], [20.0, 20577.0], [20.1, 20578.0], [20.2, 20586.0], [20.3, 20588.0], [20.4, 20611.0], [20.5, 20611.0], [20.6, 20615.0], [20.7, 20616.0], [20.8, 20626.0], [20.9, 20632.0], [21.0, 20634.0], [21.1, 20665.0], [21.2, 21349.0], [21.3, 21451.0], [21.4, 66777.0], [21.5, 67426.0], [21.6, 78845.0], [21.7, 84722.0], [21.8, 91568.0], [21.9, 91828.0], [22.0, 92036.0], [22.1, 92059.0], [22.2, 92114.0], [22.3, 92195.0], [22.4, 92205.0], [22.5, 92371.0], [22.6, 92840.0], [22.7, 92912.0], [22.8, 96649.0], [22.9, 96719.0], [23.0, 97417.0], [23.1, 97846.0], [23.2, 98004.0], [23.3, 98047.0], [23.4, 98259.0], [23.5, 98299.0], [23.6, 98464.0], [23.7, 98478.0], [23.8, 98649.0], [23.9, 98705.0], [24.0, 98761.0], [24.1, 98850.0], [24.2, 98936.0], [24.3, 99111.0], [24.4, 99188.0], [24.5, 99228.0], [24.6, 99290.0], [24.7, 99291.0], [24.8, 99348.0], [24.9, 99370.0], [25.0, 99438.0], [25.1, 99687.0], [25.2, 99732.0], [25.3, 99800.0], [25.4, 99814.0], [25.5, 99816.0], [25.6, 99818.0], [25.7, 99829.0], [25.8, 99830.0], [25.9, 99834.0], [26.0, 99836.0], [26.1, 99852.0], [26.2, 99872.0], [26.3, 99913.0], [26.4, 99917.0], [26.5, 99956.0], [26.6, 100069.0], [26.7, 100097.0], [26.8, 100126.0], [26.9, 100151.0], [27.0, 100172.0], [27.1, 100196.0], [27.2, 100243.0], [27.3, 100256.0], [27.4, 100258.0], [27.5, 100281.0], [27.6, 100298.0], [27.7, 100316.0], [27.8, 100334.0], [27.9, 100336.0], [28.0, 100398.0], [28.1, 100405.0], [28.2, 100407.0], [28.3, 100411.0], [28.4, 100473.0], [28.5, 100514.0], [28.6, 100569.0], [28.7, 100580.0], [28.8, 100588.0], [28.9, 100617.0], [29.0, 100629.0], [29.1, 100640.0], [29.2, 100648.0], [29.3, 100651.0], [29.4, 100653.0], [29.5, 100656.0], [29.6, 100658.0], [29.7, 100676.0], [29.8, 100700.0], [29.9, 100753.0], [30.0, 100766.0], [30.1, 100766.0], [30.2, 100770.0], [30.3, 100805.0], [30.4, 100902.0], [30.5, 100933.0], [30.6, 100948.0], [30.7, 100999.0], [30.8, 101020.0], [30.9, 101140.0], [31.0, 101562.0], [31.1, 102932.0], [31.2, 103246.0], [31.3, 103268.0], [31.4, 103310.0], [31.5, 103349.0], [31.6, 103392.0], [31.7, 103611.0], [31.8, 103643.0], [31.9, 103658.0], [32.0, 103704.0], [32.1, 103704.0], [32.2, 103717.0], [32.3, 103730.0], [32.4, 103732.0], [32.5, 103734.0], [32.6, 103748.0], [32.7, 103753.0], [32.8, 103758.0], [32.9, 103760.0], [33.0, 103762.0], [33.1, 103775.0], [33.2, 103780.0], [33.3, 103794.0], [33.4, 103816.0], [33.5, 103838.0], [33.6, 103838.0], [33.7, 103839.0], [33.8, 103846.0], [33.9, 103850.0], [34.0, 103852.0], [34.1, 103853.0], [34.2, 103869.0], [34.3, 103871.0], [34.4, 103883.0], [34.5, 103885.0], [34.6, 103898.0], [34.7, 103902.0], [34.8, 103904.0], [34.9, 103915.0], [35.0, 103919.0], [35.1, 103925.0], [35.2, 103926.0], [35.3, 103950.0], [35.4, 103955.0], [35.5, 104020.0], [35.6, 104021.0], [35.7, 104032.0], [35.8, 104054.0], [35.9, 104064.0], [36.0, 104070.0], [36.1, 104075.0], [36.2, 104087.0], [36.3, 104115.0], [36.4, 104119.0], [36.5, 104123.0], [36.6, 104127.0], [36.7, 104187.0], [36.8, 104188.0], [36.9, 104193.0], [37.0, 104196.0], [37.1, 104215.0], [37.2, 104216.0], [37.3, 104225.0], [37.4, 104229.0], [37.5, 104243.0], [37.6, 104244.0], [37.7, 104272.0], [37.8, 104296.0], [37.9, 104305.0], [38.0, 104482.0], [38.1, 104547.0], [38.2, 104568.0], [38.3, 104572.0], [38.4, 104574.0], [38.5, 104577.0], [38.6, 104592.0], [38.7, 104605.0], [38.8, 104640.0], [38.9, 104646.0], [39.0, 104668.0], [39.1, 104717.0], [39.2, 104733.0], [39.3, 104743.0], [39.4, 104752.0], [39.5, 104781.0], [39.6, 104788.0], [39.7, 104794.0], [39.8, 104794.0], [39.9, 104800.0], [40.0, 104803.0], [40.1, 104804.0], [40.2, 104828.0], [40.3, 104829.0], [40.4, 104837.0], [40.5, 104839.0], [40.6, 104853.0], [40.7, 104867.0], [40.8, 104886.0], [40.9, 104894.0], [41.0, 104894.0], [41.1, 104957.0], [41.2, 105039.0], [41.3, 105054.0], [41.4, 105057.0], [41.5, 105074.0], [41.6, 105096.0], [41.7, 105127.0], [41.8, 105138.0], [41.9, 105142.0], [42.0, 105179.0], [42.1, 105179.0], [42.2, 105187.0], [42.3, 105300.0], [42.4, 105326.0], [42.5, 105390.0], [42.6, 105395.0], [42.7, 105402.0], [42.8, 105632.0], [42.9, 105640.0], [43.0, 105673.0], [43.1, 105711.0], [43.2, 105735.0], [43.3, 105772.0], [43.4, 105776.0], [43.5, 105795.0], [43.6, 105823.0], [43.7, 105830.0], [43.8, 105830.0], [43.9, 105849.0], [44.0, 105849.0], [44.1, 105856.0], [44.2, 105858.0], [44.3, 105861.0], [44.4, 105865.0], [44.5, 105866.0], [44.6, 105867.0], [44.7, 105872.0], [44.8, 105874.0], [44.9, 105875.0], [45.0, 105877.0], [45.1, 105885.0], [45.2, 105891.0], [45.3, 105894.0], [45.4, 105927.0], [45.5, 105934.0], [45.6, 105943.0], [45.7, 105977.0], [45.8, 105995.0], [45.9, 105997.0], [46.0, 106003.0], [46.1, 106044.0], [46.2, 106054.0], [46.3, 106055.0], [46.4, 106061.0], [46.5, 106068.0], [46.6, 106098.0], [46.7, 106192.0], [46.8, 106329.0], [46.9, 106425.0], [47.0, 106462.0], [47.1, 106619.0], [47.2, 106645.0], [47.3, 107563.0], [47.4, 107600.0], [47.5, 109106.0], [47.6, 110928.0], [47.7, 111874.0], [47.8, 112453.0], [47.9, 112573.0], [48.0, 112857.0], [48.1, 113335.0], [48.2, 113385.0], [48.3, 115048.0], [48.4, 115634.0], [48.5, 117472.0], [48.6, 118022.0], [48.7, 118241.0], [48.8, 118241.0], [48.9, 118493.0], [49.0, 118655.0], [49.1, 119731.0], [49.2, 121398.0], [49.3, 121583.0], [49.4, 122368.0], [49.5, 122412.0], [49.6, 122478.0], [49.7, 122556.0], [49.8, 122642.0], [49.9, 123103.0], [50.0, 123722.0], [50.1, 124205.0], [50.2, 125076.0], [50.3, 125130.0], [50.4, 125133.0], [50.5, 125213.0], [50.6, 125216.0], [50.7, 125442.0], [50.8, 142515.0], [50.9, 145683.0], [51.0, 146690.0], [51.1, 147478.0], [51.2, 147809.0], [51.3, 150234.0], [51.4, 150547.0], [51.5, 150644.0], [51.6, 150646.0], [51.7, 150740.0], [51.8, 150751.0], [51.9, 150769.0], [52.0, 150811.0], [52.1, 150816.0], [52.2, 150880.0], [52.3, 150907.0], [52.4, 150929.0], [52.5, 150960.0], [52.6, 151094.0], [52.7, 151099.0], [52.8, 151101.0], [52.9, 151138.0], [53.0, 151141.0], [53.1, 151147.0], [53.2, 151161.0], [53.3, 151174.0], [53.4, 151212.0], [53.5, 151230.0], [53.6, 151232.0], [53.7, 151242.0], [53.8, 151251.0], [53.9, 151251.0], [54.0, 151253.0], [54.1, 151257.0], [54.2, 151257.0], [54.3, 151265.0], [54.4, 151269.0], [54.5, 151270.0], [54.6, 151275.0], [54.7, 151278.0], [54.8, 151291.0], [54.9, 151329.0], [55.0, 151330.0], [55.1, 151350.0], [55.2, 151352.0], [55.3, 151387.0], [55.4, 151401.0], [55.5, 151408.0], [55.6, 151411.0], [55.7, 151421.0], [55.8, 151430.0], [55.9, 151431.0], [56.0, 151446.0], [56.1, 151454.0], [56.2, 151464.0], [56.3, 151472.0], [56.4, 151474.0], [56.5, 151482.0], [56.6, 151483.0], [56.7, 151483.0], [56.8, 151493.0], [56.9, 151519.0], [57.0, 151519.0], [57.1, 151522.0], [57.2, 151590.0], [57.3, 151602.0], [57.4, 151628.0], [57.5, 151636.0], [57.6, 151663.0], [57.7, 151671.0], [57.8, 151849.0], [57.9, 152037.0], [58.0, 152046.0], [58.1, 152085.0], [58.2, 152092.0], [58.3, 152096.0], [58.4, 152105.0], [58.5, 152117.0], [58.6, 152139.0], [58.7, 152260.0], [58.8, 152357.0], [58.9, 152409.0], [59.0, 152412.0], [59.1, 152602.0], [59.2, 152610.0], [59.3, 152643.0], [59.4, 152646.0], [59.5, 152650.0], [59.6, 152656.0], [59.7, 152662.0], [59.8, 152679.0], [59.9, 152686.0], [60.0, 152687.0], [60.1, 152707.0], [60.2, 152716.0], [60.3, 152803.0], [60.4, 153412.0], [60.5, 153449.0], [60.6, 153475.0], [60.7, 153529.0], [60.8, 153592.0], [60.9, 153595.0], [61.0, 153623.0], [61.1, 153744.0], [61.2, 153750.0], [61.3, 153810.0], [61.4, 153812.0], [61.5, 153853.0], [61.6, 153957.0], [61.7, 154063.0], [61.8, 154076.0], [61.9, 154192.0], [62.0, 154207.0], [62.1, 154209.0], [62.2, 154225.0], [62.3, 154272.0], [62.4, 154299.0], [62.5, 154311.0], [62.6, 154323.0], [62.7, 154326.0], [62.8, 154340.0], [62.9, 154347.0], [63.0, 154359.0], [63.1, 154394.0], [63.2, 154452.0], [63.3, 154518.0], [63.4, 154543.0], [63.5, 154545.0], [63.6, 154595.0], [63.7, 154616.0], [63.8, 154647.0], [63.9, 154664.0], [64.0, 154739.0], [64.1, 154752.0], [64.2, 154804.0], [64.3, 154809.0], [64.4, 154826.0], [64.5, 154833.0], [64.6, 154839.0], [64.7, 154840.0], [64.8, 154846.0], [64.9, 154851.0], [65.0, 154863.0], [65.1, 154864.0], [65.2, 154868.0], [65.3, 154879.0], [65.4, 154897.0], [65.5, 154904.0], [65.6, 154932.0], [65.7, 154975.0], [65.8, 154984.0], [65.9, 155016.0], [66.0, 155058.0], [66.1, 155060.0], [66.2, 155063.0], [66.3, 155151.0], [66.4, 155377.0], [66.5, 155423.0], [66.6, 155505.0], [66.7, 155543.0], [66.8, 155565.0], [66.9, 158080.0], [67.0, 158089.0], [67.1, 158195.0], [67.2, 158806.0], [67.3, 158860.0], [67.4, 158974.0], [67.5, 159123.0], [67.6, 159187.0], [67.7, 159249.0], [67.8, 159255.0], [67.9, 159371.0], [68.0, 159434.0], [68.1, 159607.0], [68.2, 159728.0], [68.3, 159858.0], [68.4, 160042.0], [68.5, 160056.0], [68.6, 160062.0], [68.7, 160067.0], [68.8, 160070.0], [68.9, 160085.0], [69.0, 160105.0], [69.1, 160107.0], [69.2, 160112.0], [69.3, 160115.0], [69.4, 160145.0], [69.5, 160281.0], [69.6, 160410.0], [69.7, 160633.0], [69.8, 160896.0], [69.9, 161208.0], [70.0, 161395.0], [70.1, 161526.0], [70.2, 161894.0], [70.3, 161960.0], [70.4, 162134.0], [70.5, 162144.0], [70.6, 162172.0], [70.7, 162226.0], [70.8, 162332.0], [70.9, 162367.0], [71.0, 162731.0], [71.1, 163494.0], [71.2, 163546.0], [71.3, 163589.0], [71.4, 163653.0], [71.5, 163655.0], [71.6, 163733.0], [71.7, 163735.0], [71.8, 163772.0], [71.9, 163809.0], [72.0, 163844.0], [72.1, 163888.0], [72.2, 163923.0], [72.3, 164065.0], [72.4, 164104.0], [72.5, 164132.0], [72.6, 164166.0], [72.7, 164191.0], [72.8, 164269.0], [72.9, 164278.0], [73.0, 164287.0], [73.1, 164289.0], [73.2, 164291.0], [73.3, 164293.0], [73.4, 164303.0], [73.5, 164333.0], [73.6, 164345.0], [73.7, 164352.0], [73.8, 164354.0], [73.9, 164356.0], [74.0, 164376.0], [74.1, 164382.0], [74.2, 164393.0], [74.3, 164491.0], [74.4, 164540.0], [74.5, 164585.0], [74.6, 164628.0], [74.7, 164652.0], [74.8, 164679.0], [74.9, 164704.0], [75.0, 164735.0], [75.1, 164737.0], [75.2, 164775.0], [75.3, 164794.0], [75.4, 164823.0], [75.5, 164824.0], [75.6, 164857.0], [75.7, 164861.0], [75.8, 164874.0], [75.9, 164903.0], [76.0, 165024.0], [76.1, 165028.0], [76.2, 165050.0], [76.3, 165098.0], [76.4, 165173.0], [76.5, 165192.0], [76.6, 165201.0], [76.7, 165228.0], [76.8, 165231.0], [76.9, 165232.0], [77.0, 165252.0], [77.1, 165252.0], [77.2, 165254.0], [77.3, 165256.0], [77.4, 165264.0], [77.5, 165266.0], [77.6, 165278.0], [77.7, 165283.0], [77.8, 165294.0], [77.9, 165296.0], [78.0, 165297.0], [78.1, 165297.0], [78.2, 165297.0], [78.3, 165301.0], [78.4, 165306.0], [78.5, 165309.0], [78.6, 165311.0], [78.7, 165313.0], [78.8, 165317.0], [78.9, 165318.0], [79.0, 165324.0], [79.1, 165326.0], [79.2, 165332.0], [79.3, 165344.0], [79.4, 165359.0], [79.5, 165371.0], [79.6, 165385.0], [79.7, 165386.0], [79.8, 165408.0], [79.9, 165416.0], [80.0, 165420.0], [80.1, 165422.0], [80.2, 165424.0], [80.3, 165471.0], [80.4, 165472.0], [80.5, 165474.0], [80.6, 165487.0], [80.7, 165493.0], [80.8, 165512.0], [80.9, 165515.0], [81.0, 165530.0], [81.1, 165534.0], [81.2, 165549.0], [81.3, 165576.0], [81.4, 165644.0], [81.5, 165646.0], [81.6, 165647.0], [81.7, 165648.0], [81.8, 165652.0], [81.9, 165655.0], [82.0, 165660.0], [82.1, 165678.0], [82.2, 165698.0], [82.3, 165699.0], [82.4, 165723.0], [82.5, 165751.0], [82.6, 165762.0], [82.7, 165763.0], [82.8, 165770.0], [82.9, 165808.0], [83.0, 165810.0], [83.1, 165811.0], [83.2, 165817.0], [83.3, 165861.0], [83.4, 165909.0], [83.5, 165929.0], [83.6, 165948.0], [83.7, 166006.0], [83.8, 166026.0], [83.9, 166047.0], [84.0, 166056.0], [84.1, 166057.0], [84.2, 166062.0], [84.3, 166066.0], [84.4, 166071.0], [84.5, 166077.0], [84.6, 166101.0], [84.7, 166113.0], [84.8, 166121.0], [84.9, 166195.0], [85.0, 166195.0], [85.1, 166201.0], [85.2, 166210.0], [85.3, 166216.0], [85.4, 166216.0], [85.5, 166225.0], [85.6, 166228.0], [85.7, 166234.0], [85.8, 166236.0], [85.9, 166270.0], [86.0, 166281.0], [86.1, 166296.0], [86.2, 166322.0], [86.3, 166326.0], [86.4, 166328.0], [86.5, 166331.0], [86.6, 166337.0], [86.7, 166338.0], [86.8, 166346.0], [86.9, 166355.0], [87.0, 166363.0], [87.1, 166364.0], [87.2, 166369.0], [87.3, 166584.0], [87.4, 166615.0], [87.5, 166624.0], [87.6, 166634.0], [87.7, 166634.0], [87.8, 166645.0], [87.9, 166645.0], [88.0, 166652.0], [88.1, 166653.0], [88.2, 166661.0], [88.3, 166674.0], [88.4, 166695.0], [88.5, 166776.0], [88.6, 166798.0], [88.7, 166810.0], [88.8, 166826.0], [88.9, 166828.0], [89.0, 166836.0], [89.1, 166839.0], [89.2, 166841.0], [89.3, 166874.0], [89.4, 166888.0], [89.5, 166929.0], [89.6, 166933.0], [89.7, 166967.0], [89.8, 167026.0], [89.9, 167026.0], [90.0, 167035.0], [90.1, 167038.0], [90.2, 167044.0], [90.3, 167075.0], [90.4, 167121.0], [90.5, 167133.0], [90.6, 167136.0], [90.7, 167151.0], [90.8, 167158.0], [90.9, 167159.0], [91.0, 167173.0], [91.1, 167190.0], [91.2, 167196.0], [91.3, 167196.0], [91.4, 167204.0], [91.5, 167207.0], [91.6, 167213.0], [91.7, 167223.0], [91.8, 167228.0], [91.9, 167237.0], [92.0, 167263.0], [92.1, 167266.0], [92.2, 167277.0], [92.3, 167278.0], [92.4, 167311.0], [92.5, 167330.0], [92.6, 167337.0], [92.7, 167339.0], [92.8, 167343.0], [92.9, 167345.0], [93.0, 167345.0], [93.1, 167351.0], [93.2, 167360.0], [93.3, 167386.0], [93.4, 167411.0], [93.5, 167427.0], [93.6, 167429.0], [93.7, 167451.0], [93.8, 167453.0], [93.9, 167465.0], [94.0, 167469.0], [94.1, 167471.0], [94.2, 167475.0], [94.3, 167476.0], [94.4, 167482.0], [94.5, 167486.0], [94.6, 167487.0], [94.7, 167490.0], [94.8, 167492.0], [94.9, 167493.0], [95.0, 167496.0], [95.1, 167497.0], [95.2, 167497.0], [95.3, 167501.0], [95.4, 167510.0], [95.5, 167524.0], [95.6, 167538.0], [95.7, 167538.0], [95.8, 167540.0], [95.9, 167541.0], [96.0, 167544.0], [96.1, 167546.0], [96.2, 167548.0], [96.3, 167548.0], [96.4, 167551.0], [96.5, 167558.0], [96.6, 167561.0], [96.7, 167564.0], [96.8, 167564.0], [96.9, 167565.0], [97.0, 167566.0], [97.1, 167567.0], [97.2, 167570.0], [97.3, 167571.0], [97.4, 167572.0], [97.5, 167580.0], [97.6, 167581.0], [97.7, 167583.0], [97.8, 167617.0], [97.9, 167621.0], [98.0, 167626.0], [98.1, 167628.0], [98.2, 167630.0], [98.3, 167639.0], [98.4, 167643.0], [98.5, 167644.0], [98.6, 167645.0], [98.7, 167672.0], [98.8, 167679.0], [98.9, 167682.0], [99.0, 167684.0], [99.1, 167692.0], [99.2, 167701.0], [99.3, 167705.0], [99.4, 167722.0], [99.5, 167729.0], [99.6, 167766.0], [99.7, 167875.0], [99.8, 168067.0], [99.9, 224279.0]], "isOverall": false, "label": "Access Detail Movie", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 8800.0, "maxY": 55.0, "series": [{"data": [[151200.0, 15.0], [152800.0, 1.0], [154400.0, 1.0], [159200.0, 2.0], [160800.0, 1.0], [164000.0, 1.0], [165600.0, 10.0], [167200.0, 10.0], [142500.0, 1.0], [150500.0, 1.0], [152100.0, 3.0], [153700.0, 2.0], [155300.0, 1.0], [160100.0, 5.0], [164900.0, 1.0], [166500.0, 1.0], [66700.0, 1.0], [91500.0, 1.0], [92300.0, 1.0], [98700.0, 2.0], [100300.0, 4.0], [101100.0, 1.0], [105900.0, 6.0], [104300.0, 1.0], [105100.0, 6.0], [107500.0, 1.0], [109100.0, 1.0], [125100.0, 2.0], [146600.0, 1.0], [151400.0, 15.0], [154600.0, 3.0], [159400.0, 1.0], [164200.0, 6.0], [165800.0, 5.0], [167400.0, 19.0], [150700.0, 3.0], [152300.0, 1.0], [153900.0, 1.0], [155500.0, 3.0], [161900.0, 1.0], [163500.0, 2.0], [165100.0, 2.0], [166700.0, 2.0], [67400.0, 1.0], [92200.0, 1.0], [97800.0, 1.0], [98600.0, 1.0], [100200.0, 5.0], [99400.0, 1.0], [101000.0, 1.0], [104200.0, 8.0], [105800.0, 18.0], [105000.0, 5.0], [106600.0, 2.0], [118600.0, 1.0], [122600.0, 1.0], [124200.0, 1.0], [125000.0, 1.0], [151600.0, 5.0], [154800.0, 13.0], [158000.0, 2.0], [159600.0, 1.0], [161200.0, 1.0], [164400.0, 1.0], [166000.0, 9.0], [167600.0, 14.0], [150900.0, 3.0], [154100.0, 1.0], [158900.0, 1.0], [162100.0, 3.0], [163700.0, 3.0], [165300.0, 15.0], [166900.0, 3.0], [92100.0, 2.0], [92900.0, 1.0], [99300.0, 2.0], [100100.0, 4.0], [100900.0, 4.0], [103300.0, 3.0], [105700.0, 5.0], [104100.0, 8.0], [104900.0, 1.0], [122500.0, 1.0], [9200.0, 9.0], [8800.0, 1.0], [8900.0, 13.0], [9000.0, 9.0], [9100.0, 31.0], [9700.0, 11.0], [9600.0, 28.0], [9500.0, 3.0], [9300.0, 10.0], [9400.0, 6.0], [155000.0, 4.0], [150200.0, 1.0], [151800.0, 1.0], [153400.0, 3.0], [9800.0, 55.0], [9900.0, 4.0], [159800.0, 1.0], [164600.0, 3.0], [166200.0, 11.0], [167800.0, 1.0], [18000.0, 1.0], [19200.0, 1.0], [19400.0, 1.0], [19800.0, 3.0], [20000.0, 5.0], [20400.0, 1.0], [20600.0, 8.0], [21400.0, 1.0], [151100.0, 6.0], [152700.0, 2.0], [154300.0, 7.0], [159100.0, 2.0], [162300.0, 2.0], [163900.0, 1.0], [165500.0, 6.0], [167100.0, 10.0], [92000.0, 2.0], [92800.0, 1.0], [98400.0, 2.0], [99200.0, 3.0], [100000.0, 2.0], [100800.0, 1.0], [103200.0, 2.0], [104000.0, 8.0], [106400.0, 2.0], [105600.0, 3.0], [104800.0, 12.0], [112800.0, 1.0], [118400.0, 1.0], [122400.0, 2.0], [145600.0, 1.0], [152000.0, 5.0], [153600.0, 1.0], [160000.0, 6.0], [164800.0, 5.0], [168000.0, 1.0], [151300.0, 5.0], [154500.0, 4.0], [159300.0, 1.0], [164100.0, 4.0], [165700.0, 5.0], [167300.0, 10.0], [84700.0, 1.0], [96700.0, 1.0], [99100.0, 2.0], [101500.0, 1.0], [99900.0, 3.0], [100700.0, 5.0], [106300.0, 1.0], [103900.0, 8.0], [104700.0, 8.0], [121500.0, 1.0], [122300.0, 1.0], [123100.0, 1.0], [147400.0, 1.0], [150600.0, 2.0], [152200.0, 1.0], [153800.0, 3.0], [155400.0, 1.0], [160200.0, 1.0], [161800.0, 1.0], [163400.0, 1.0], [165000.0, 4.0], [166600.0, 11.0], [224200.0, 1.0], [151500.0, 4.0], [154700.0, 2.0], [162700.0, 1.0], [164300.0, 9.0], [165900.0, 3.0], [167500.0, 25.0], [91800.0, 1.0], [96600.0, 1.0], [97400.0, 1.0], [98200.0, 2.0], [99800.0, 10.0], [100600.0, 9.0], [104600.0, 4.0], [103800.0, 13.0], [105400.0, 1.0], [111800.0, 1.0], [115000.0, 1.0], [117400.0, 1.0], [118200.0, 2.0], [125400.0, 1.0], [150800.0, 3.0], [152400.0, 2.0], [154000.0, 2.0], [158800.0, 2.0], [160400.0, 1.0], [163600.0, 2.0], [165200.0, 17.0], [166800.0, 8.0], [154900.0, 4.0], [158100.0, 1.0], [159700.0, 1.0], [161300.0, 1.0], [164500.0, 2.0], [166100.0, 5.0], [167700.0, 5.0], [98900.0, 1.0], [99700.0, 1.0], [100500.0, 4.0], [102900.0, 1.0], [106100.0, 1.0], [103700.0, 14.0], [104500.0, 6.0], [105300.0, 4.0], [110900.0, 1.0], [112500.0, 1.0], [113300.0, 2.0], [119700.0, 1.0], [121300.0, 1.0], [123700.0, 1.0], [151000.0, 2.0], [147800.0, 1.0], [154200.0, 5.0], [152600.0, 10.0], [160600.0, 1.0], [162200.0, 1.0], [163800.0, 3.0], [165400.0, 10.0], [167000.0, 6.0], [19100.0, 1.0], [19900.0, 2.0], [20500.0, 8.0], [21300.0, 1.0], [153500.0, 3.0], [155100.0, 1.0], [161500.0, 1.0], [164700.0, 6.0], [166300.0, 11.0], [78800.0, 1.0], [98000.0, 2.0], [98800.0, 1.0], [99600.0, 1.0], [100400.0, 4.0], [104400.0, 1.0], [106000.0, 7.0], [103600.0, 3.0], [107600.0, 1.0], [112400.0, 1.0], [115600.0, 1.0], [118000.0, 1.0], [125200.0, 2.0]], "isOverall": false, "label": "Access Detail Movie", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 224200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.57141038E12, "maxY": 969.7558685446006, "series": [{"data": [[1.57141056E12, 238.6561181434601], [1.57141062E12, 1.0], [1.57141044E12, 785.5], [1.5714105E12, 629.6071428571432], [1.57141038E12, 969.7558685446006]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57141062E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9513.566666666666, "minX": 1.0, "maxY": 224279.0, "series": [{"data": [[3.0, 167631.5], [4.0, 167766.0], [5.0, 167875.0], [6.0, 167692.0], [7.0, 167158.0], [9.0, 166834.5], [10.0, 166839.0], [12.0, 167523.5], [13.0, 167026.0], [15.0, 167377.5], [16.0, 167228.0], [17.0, 167548.0], [18.0, 167705.0], [19.0, 167722.0], [20.0, 167701.0], [21.0, 166810.0], [22.0, 166933.0], [23.0, 167159.0], [24.0, 167679.0], [26.0, 167682.0], [27.0, 167678.0], [28.0, 166967.0], [29.0, 166929.0], [30.0, 167266.0], [31.0, 167493.0], [33.0, 166776.0], [32.0, 167497.0], [35.0, 167427.0], [34.0, 167645.0], [37.0, 167628.0], [36.0, 167644.0], [39.0, 167630.0], [38.0, 167643.0], [41.0, 167617.0], [40.0, 167639.0], [43.0, 167621.0], [42.0, 167626.0], [45.0, 167386.0], [44.0, 167190.0], [47.0, 167581.5], [49.0, 167044.0], [48.0, 167581.0], [51.0, 167570.0], [50.0, 167572.0], [53.0, 167571.0], [55.0, 167035.0], [54.0, 167456.0], [57.0, 167551.0], [56.0, 167558.0], [59.0, 167562.5], [61.0, 167548.0], [60.0, 167566.0], [63.0, 166874.0], [62.0, 167541.0], [66.0, 167544.0], [65.0, 167075.0], [64.0, 167564.0], [71.0, 167538.0], [70.0, 167524.0], [69.0, 167538.0], [68.0, 167186.0], [74.0, 166653.0], [73.0, 167540.0], [72.0, 166661.0], [78.0, 166645.0], [77.0, 167510.0], [76.0, 166991.0], [83.0, 167207.33333333334], [80.0, 167073.0], [87.0, 167497.0], [86.0, 166624.0], [85.0, 167486.0], [84.0, 167490.0], [91.0, 167476.0], [90.0, 167341.0], [88.0, 166615.0], [95.0, 167453.0], [94.0, 167475.0], [93.0, 167471.0], [92.0, 167487.0], [99.0, 167223.0], [98.0, 167017.5], [96.0, 167465.0], [103.0, 167121.0], [102.0, 167207.0], [101.0, 167411.0], [100.0, 167429.0], [106.0, 166997.0], [104.0, 166888.0], [111.0, 167337.0], [110.0, 167136.0], [109.0, 167345.0], [108.0, 167345.0], [115.0, 167038.0], [114.0, 167277.0], [113.0, 167311.0], [112.0, 167343.0], [118.0, 167237.0], [117.0, 167263.0], [116.0, 167278.0], [123.0, 167068.33333333334], [120.0, 166939.0], [127.0, 166006.0], [126.0, 166798.0], [125.0, 167142.0], [135.0, 166362.0], [133.0, 165474.0], [132.0, 166363.0], [131.0, 166364.0], [130.0, 166695.0], [129.0, 166195.0], [128.0, 166195.0], [143.0, 166338.0], [142.0, 166071.0], [141.0, 166113.0], [140.0, 166331.0], [139.0, 166337.0], [138.0, 166346.0], [137.0, 165811.0], [136.0, 165762.0], [151.0, 166296.0], [150.0, 165576.0], [149.0, 166056.0], [148.0, 165408.0], [147.0, 165875.0], [145.0, 166328.0], [144.0, 166322.0], [158.0, 166228.0], [157.0, 166225.0], [156.0, 165699.0], [155.0, 166236.0], [154.0, 165808.0], [153.0, 166270.0], [152.0, 166281.0], [167.0, 166121.0], [166.0, 166216.0], [165.0, 165660.0], [164.0, 166201.0], [163.0, 165870.0], [161.0, 166216.0], [160.0, 165783.0], [175.0, 165861.0], [174.0, 166061.5], [172.0, 165359.0], [171.0, 166062.0], [170.0, 166077.0], [169.0, 166101.0], [168.0, 165534.0], [183.0, 165024.0], [182.0, 165909.0], [181.0, 165192.0], [180.0, 165929.0], [179.0, 165948.0], [178.0, 165770.0], [177.0, 166036.5], [191.0, 164874.0], [190.0, 165512.0], [189.0, 165757.0], [187.0, 165810.0], [186.0, 165817.0], [185.0, 165256.0], [184.0, 165646.0], [199.0, 165648.0], [198.0, 165652.0], [197.0, 165678.0], [196.0, 164824.0], [195.0, 165698.0], [194.0, 165723.0], [193.0, 165138.5], [207.0, 165385.0], [206.0, 165018.0], [204.0, 165655.0], [203.0, 165644.0], [202.0, 165173.0], [201.0, 165647.0], [200.0, 165422.0], [215.0, 165515.0], [214.0, 165479.5], [212.0, 165493.0], [211.0, 164962.0], [209.0, 165114.0], [222.0, 165324.0], [221.0, 164491.0], [220.0, 165371.0], [219.0, 165232.0], [218.0, 165386.0], [217.0, 165420.0], [216.0, 165471.0], [231.0, 165306.0], [230.0, 165297.0], [229.0, 165301.0], [228.0, 165317.0], [227.0, 165311.0], [226.0, 165322.0], [224.0, 165069.0], [239.0, 165264.0], [238.0, 165098.0], [237.0, 165283.0], [236.0, 165028.0], [235.0, 165309.0], [234.0, 165305.0], [232.0, 165297.0], [247.0, 165228.0], [246.0, 164979.0], [244.0, 165252.0], [243.0, 165252.0], [242.0, 165272.0], [240.0, 164735.0], [255.0, 164737.0], [254.0, 164775.0], [253.0, 164823.0], [252.0, 164857.0], [251.0, 164903.0], [250.0, 165050.0], [249.0, 165201.0], [248.0, 165231.0], [270.0, 164345.0], [271.0, 164333.0], [269.0, 164104.0], [268.0, 164354.0], [267.0, 164356.0], [266.0, 164352.0], [265.0, 164376.0], [264.0, 163655.0], [263.0, 164382.0], [257.0, 163888.0], [256.0, 164652.0], [259.0, 164585.0], [258.0, 164065.0], [262.0, 164393.0], [261.0, 163809.0], [260.0, 164540.0], [275.0, 163772.0], [285.0, 163733.0], [287.0, 163842.5], [284.0, 163844.0], [274.0, 164291.0], [273.0, 163589.0], [272.0, 163653.0], [283.0, 164296.0], [281.0, 164282.5], [279.0, 163735.0], [278.0, 164269.0], [277.0, 164293.0], [276.0, 164132.0], [302.0, 161894.0], [303.0, 160896.0], [301.0, 161208.0], [300.0, 161395.0], [299.0, 162144.0], [298.0, 161526.0], [297.0, 162226.0], [296.0, 162332.0], [295.0, 162367.0], [289.0, 163923.0], [288.0, 164166.0], [291.0, 162134.0], [290.0, 163546.0], [294.0, 162172.0], [293.0, 161960.0], [292.0, 162731.0], [318.0, 160063.0], [319.0, 160062.0], [316.0, 160042.0], [307.0, 160145.0], [306.0, 160281.0], [305.0, 160410.0], [304.0, 160633.0], [315.0, 160067.0], [314.0, 160085.0], [313.0, 160112.0], [312.0, 160107.0], [311.0, 160115.0], [310.0, 160105.0], [309.0, 159858.0], [308.0, 159255.0], [334.0, 155565.0], [335.0, 155505.0], [333.0, 155543.0], [332.0, 158084.5], [330.0, 158195.0], [329.0, 158974.0], [328.0, 159187.0], [327.0, 159249.0], [321.0, 159607.0], [320.0, 159728.0], [323.0, 159434.0], [322.0, 159123.0], [326.0, 158806.0], [325.0, 159371.0], [324.0, 158860.0], [350.0, 154326.0], [351.0, 154347.0], [349.0, 154932.0], [348.0, 154975.0], [347.0, 154984.0], [346.0, 155016.0], [345.0, 154452.0], [344.0, 154833.0], [343.0, 155063.0], [337.0, 155423.0], [336.0, 155060.0], [339.0, 155151.0], [338.0, 155377.0], [342.0, 154864.0], [341.0, 155058.0], [340.0, 154752.0], [366.0, 154839.0], [367.0, 154826.0], [365.0, 154846.0], [364.0, 154590.0], [362.0, 154863.0], [361.0, 154851.0], [360.0, 154311.0], [359.0, 154868.0], [354.0, 154739.0], [353.0, 154891.5], [358.0, 154469.5], [356.0, 154707.5], [382.0, 153595.0], [383.0, 153592.0], [381.0, 153810.0], [380.0, 154299.0], [379.0, 154076.0], [378.0, 154192.0], [377.0, 154394.0], [376.0, 154359.0], [375.0, 154595.0], [369.0, 154543.0], [368.0, 154809.0], [371.0, 154545.0], [370.0, 154804.0], [374.0, 154063.0], [373.0, 154647.0], [372.0, 154664.0], [398.0, 152803.0], [399.0, 152716.0], [397.0, 153812.0], [396.0, 153475.0], [395.0, 153449.0], [394.0, 153623.0], [393.0, 153853.0], [392.0, 153412.0], [391.0, 153744.0], [384.0, 154272.0], [387.0, 153877.0], [385.0, 153750.0], [390.0, 153957.0], [389.0, 154207.0], [388.0, 154209.0], [414.0, 152646.0], [415.0, 152260.0], [413.0, 152529.5], [403.0, 152117.0], [402.0, 152662.0], [401.0, 152679.0], [400.0, 152707.0], [411.0, 151874.0], [409.0, 152092.0], [408.0, 152096.0], [407.0, 152643.0], [406.0, 152671.5], [404.0, 152686.0], [428.0, 151632.0], [430.0, 151590.0], [431.0, 151275.0], [429.0, 151602.0], [426.0, 151462.0], [424.0, 152037.0], [423.0, 152130.5], [419.0, 152200.33333333334], [417.0, 152610.0], [421.0, 152602.0], [420.0, 152046.0], [444.0, 151145.33333333334], [446.0, 151101.0], [447.0, 151472.0], [445.0, 150751.0], [441.0, 151483.0], [440.0, 151483.0], [439.0, 151483.5], [432.0, 151519.0], [435.0, 151520.5], [433.0, 150816.0], [437.0, 151329.0], [436.0, 151482.0], [461.0, 151257.0], [462.0, 151257.0], [460.0, 151421.0], [451.0, 151454.0], [450.0, 151212.0], [449.0, 151105.5], [459.0, 151420.5], [457.0, 151431.0], [456.0, 151278.0], [455.0, 151174.0], [454.0, 151161.0], [453.0, 151107.5], [478.0, 151291.0], [479.0, 151265.0], [477.0, 151270.0], [476.0, 150234.0], [475.0, 151138.0], [474.0, 151141.0], [473.0, 151330.0], [472.0, 151350.0], [471.0, 151352.0], [464.0, 151251.0], [467.0, 151394.0], [465.0, 151157.5], [470.0, 151147.0], [469.0, 151061.0], [494.0, 125442.0], [495.0, 125130.0], [493.0, 142515.0], [492.0, 145683.0], [491.0, 146690.0], [490.0, 147478.0], [489.0, 147809.0], [488.0, 150644.0], [487.0, 150646.0], [481.0, 151099.0], [480.0, 151269.0], [483.0, 151094.0], [482.0, 151230.0], [486.0, 150811.0], [485.0, 150929.0], [484.0, 150547.0], [509.0, 121398.0], [510.0, 119731.0], [508.0, 121583.0], [499.0, 125133.0], [498.0, 125216.0], [497.0, 125213.0], [496.0, 125076.0], [507.0, 122412.0], [506.0, 122368.0], [505.0, 122478.0], [504.0, 122556.0], [503.0, 123103.0], [502.0, 122642.0], [501.0, 123722.0], [500.0, 124205.0], [540.0, 106055.0], [543.0, 106054.0], [528.0, 107600.0], [530.0, 106003.0], [529.0, 106425.0], [533.0, 106462.0], [532.0, 106632.0], [542.0, 106068.0], [541.0, 106061.0], [539.0, 106044.0], [538.0, 105934.0], [537.0, 105640.0], [536.0, 106098.0], [527.0, 107563.0], [513.0, 118463.0], [515.0, 118022.0], [514.0, 118241.0], [517.0, 115634.0], [516.0, 117472.0], [519.0, 113335.0], [518.0, 115048.0], [526.0, 109106.0], [525.0, 110928.0], [524.0, 111874.0], [523.0, 112573.0], [522.0, 112453.0], [521.0, 112857.0], [520.0, 113385.0], [535.0, 106192.0], [534.0, 106329.0], [569.0, 105849.0], [574.0, 105795.0], [575.0, 105711.0], [561.0, 105874.0], [560.0, 105877.0], [563.0, 105390.0], [562.0, 105885.0], [573.0, 105830.0], [572.0, 105810.5], [570.0, 105823.0], [568.0, 105865.0], [551.0, 105977.0], [550.0, 105861.0], [549.0, 105995.0], [548.0, 105865.0], [547.0, 105776.0], [546.0, 105867.0], [545.0, 105875.0], [544.0, 105894.0], [559.0, 105891.0], [558.0, 105632.0], [557.0, 105673.0], [556.0, 105943.0], [555.0, 105927.0], [554.0, 105735.0], [553.0, 105997.0], [552.0, 105830.0], [566.0, 105625.5], [564.0, 105866.0], [601.0, 104075.0], [605.0, 104305.0], [606.0, 104296.0], [592.0, 105096.0], [595.0, 104087.0], [594.0, 104563.5], [597.0, 104115.0], [596.0, 104127.0], [604.0, 103902.0], [603.0, 103915.0], [602.0, 103950.0], [600.0, 104032.0], [583.0, 105142.0], [582.0, 105300.0], [581.0, 105074.0], [580.0, 105054.0], [579.0, 105326.0], [578.0, 105179.0], [577.0, 105138.0], [576.0, 105402.0], [591.0, 104510.5], [589.0, 105127.0], [588.0, 105179.0], [587.0, 104706.0], [585.0, 104196.0], [584.0, 105039.0], [599.0, 104574.0], [598.0, 104123.0], [632.0, 103852.0], [636.0, 104804.0], [638.0, 104320.0], [624.0, 103860.5], [626.0, 104837.0], [625.0, 103898.0], [635.0, 103853.0], [634.0, 104829.0], [633.0, 104568.0], [622.0, 103838.0], [608.0, 103886.5], [611.0, 103926.0], [610.0, 104098.5], [613.0, 103883.0], [612.0, 104894.0], [615.0, 104867.0], [614.0, 104894.0], [621.0, 104291.0], [619.0, 104853.0], [618.0, 103885.0], [617.0, 104886.0], [616.0, 103838.0], [631.0, 104828.0], [630.0, 104229.0], [629.0, 104839.0], [628.0, 104215.5], [666.0, 104187.0], [670.0, 103643.0], [671.0, 104646.0], [656.0, 103732.0], [660.0, 103735.0], [658.0, 104218.5], [669.0, 104668.0], [668.0, 103658.0], [667.0, 104054.0], [665.0, 104225.5], [647.0, 104592.0], [646.0, 104297.0], [644.0, 104788.0], [643.0, 103760.0], [642.0, 104547.0], [641.0, 103780.0], [640.0, 104798.5], [655.0, 103758.0], [654.0, 104752.0], [653.0, 104572.0], [652.0, 103775.0], [651.0, 103816.0], [650.0, 103748.0], [649.0, 104781.0], [648.0, 104577.0], [663.0, 103733.0], [662.0, 103730.0], [698.0, 100948.0], [702.0, 100933.0], [703.0, 100256.0], [689.0, 103392.0], [688.0, 102932.0], [691.0, 101562.0], [690.0, 103349.0], [693.0, 100569.0], [692.0, 101140.0], [701.0, 100902.0], [700.0, 99913.0], [699.0, 100805.0], [697.0, 100145.0], [679.0, 104244.0], [678.0, 104243.0], [677.0, 103246.0], [676.0, 104188.0], [675.0, 104482.0], [674.0, 104605.0], [673.0, 104125.5], [687.0, 103919.0], [686.0, 103310.0], [685.0, 103268.0], [684.0, 103955.0], [683.0, 104020.0], [682.0, 104119.0], [681.0, 104193.0], [680.0, 104021.0], [695.0, 100999.0], [694.0, 101020.0], [728.0, 100650.5], [734.0, 100628.5], [735.0, 100126.0], [722.0, 100243.0], [721.0, 100642.0], [732.0, 100518.0], [730.0, 100658.0], [729.0, 100405.0], [719.0, 100753.0], [706.0, 99894.5], [704.0, 100651.0], [708.0, 99836.0], [707.0, 100258.0], [710.0, 99816.0], [709.0, 100656.0], [718.0, 100766.0], [717.0, 100766.0], [716.0, 100281.0], [715.0, 99829.0], [714.0, 100298.0], [713.0, 99834.0], [712.0, 100083.0], [726.0, 100411.0], [725.0, 100676.0], [724.0, 100196.0], [723.0, 100700.0], [761.0, 99188.0], [766.0, 98936.0], [767.0, 98259.0], [753.0, 98761.0], [752.0, 99438.0], [755.0, 99370.0], [754.0, 98705.0], [757.0, 99348.0], [756.0, 98850.0], [765.0, 98299.0], [764.0, 98880.0], [762.0, 98478.0], [760.0, 98464.0], [743.0, 100097.0], [742.0, 100161.5], [740.0, 100398.0], [739.0, 100473.0], [738.0, 100316.0], [737.0, 100588.0], [736.0, 100580.0], [751.0, 99687.0], [750.0, 99732.0], [749.0, 99800.0], [748.0, 99814.0], [747.0, 99818.0], [746.0, 99852.0], [745.0, 99291.0], [744.0, 100069.0], [759.0, 99228.0], [758.0, 99290.0], [797.0, 20263.5], [787.0, 67426.0], [798.0, 20334.0], [784.0, 84722.0], [795.0, 20634.0], [792.0, 19919.0], [783.0, 91568.0], [769.0, 98004.0], [768.0, 98047.0], [771.0, 97417.0], [770.0, 97846.0], [773.0, 96719.0], [772.0, 96649.0], [775.0, 92840.0], [774.0, 92912.0], [782.0, 92059.0], [781.0, 92114.0], [780.0, 92195.0], [779.0, 92205.0], [778.0, 91828.0], [777.0, 92036.0], [776.0, 92371.0], [791.0, 20334.5], [789.0, 21349.0], [788.0, 21451.0], [786.0, 66777.0], [785.0, 78845.0], [817.0, 19869.0], [820.0, 18057.0], [819.0, 19236.0], [818.0, 19116.0], [816.0, 19469.0], [815.0, 19969.5], [813.0, 20339.0], [811.0, 20563.0], [809.0, 20577.0], [808.0, 20570.0], [805.0, 20586.0], [804.0, 20615.0], [803.0, 20357.5], [801.0, 20567.666666666668], [800.0, 20023.0], [1000.0, 9513.566666666666], [1.0, 224279.0]], "isOverall": false, "label": "Access Detail Movie", "isController": false}, {"data": [[516.7429999999998, 112553.90400000007]], "isOverall": false, "label": "Access Detail Movie-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4.333333333333333, "minX": 1.57141038E12, "maxY": 51926.7, "series": [{"data": [[1.57141056E12, 51926.7], [1.57141062E12, 109.55], [1.57141044E12, 438.2], [1.5714105E12, 33741.4], [1.57141038E12, 23334.15]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57141056E12, 2054.0], [1.57141062E12, 4.333333333333333], [1.57141044E12, 17.333333333333332], [1.5714105E12, 1334.6666666666667], [1.57141038E12, 923.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57141062E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 11177.751173708915, "minX": 1.57141038E12, "maxY": 224279.0, "series": [{"data": [[1.57141056E12, 161660.56540084395], [1.57141062E12, 224279.0], [1.57141044E12, 74442.5], [1.5714105E12, 107220.40909090906], [1.57141038E12, 11177.751173708915]], "isOverall": false, "label": "Access Detail Movie", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57141062E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 9489.920187793423, "minX": 1.57141038E12, "maxY": 160084.0, "series": [{"data": [[1.57141056E12, 73398.50000000003], [1.57141062E12, 160084.0], [1.57141044E12, 10597.0], [1.5714105E12, 29944.43181818183], [1.57141038E12, 9489.920187793423]], "isOverall": false, "label": "Access Detail Movie", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57141062E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7031.633802816904, "minX": 1.57141038E12, "maxY": 8847.0, "series": [{"data": [[1.57141056E12, 7689.985232067509], [1.57141062E12, 8847.0], [1.57141044E12, 7061.0], [1.5714105E12, 7197.100649350652], [1.57141038E12, 7031.633802816904]], "isOverall": false, "label": "Access Detail Movie", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57141062E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8820.0, "minX": 1.57141038E12, "maxY": 224279.0, "series": [{"data": [[1.57141056E12, 168067.0], [1.57141062E12, 224279.0], [1.57141044E12, 84722.0], [1.5714105E12, 151291.0], [1.57141038E12, 21451.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57141056E12, 150740.0], [1.57141062E12, 224279.0], [1.57141044E12, 66777.0], [1.5714105E12, 91568.0], [1.57141038E12, 8820.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57141056E12, 167497.0], [1.57141062E12, 224279.0], [1.57141044E12, 84722.0], [1.5714105E12, 122418.6], [1.57141038E12, 20060.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57141056E12, 167723.75], [1.57141062E12, 224279.0], [1.57141044E12, 84722.0], [1.5714105E12, 151268.64], [1.57141038E12, 21253.23999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57141056E12, 167580.25], [1.57141062E12, 224279.0], [1.57141044E12, 84722.0], [1.5714105E12, 147123.40000000002], [1.57141038E12, 20594.899999999998]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57141062E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 9679.0, "minX": 1.0, "maxY": 167473.0, "series": [{"data": [[2.0, 110467.5], [8.0, 158099.0], [36.0, 166337.5], [10.0, 98563.5], [42.0, 164562.5], [180.0, 9679.0], [44.0, 154655.5], [3.0, 118493.0], [49.0, 103097.0], [12.0, 164044.5], [13.0, 152351.5], [52.0, 151351.0], [14.0, 103937.0], [1.0, 113461.0], [4.0, 94780.5], [18.0, 99709.5], [5.0, 124089.5], [21.0, 160056.0], [85.0, 165515.0], [93.0, 104188.0], [6.0, 106443.5], [26.0, 86164.0], [114.0, 167473.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 180.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 9554.0, "minX": 1.0, "maxY": 91753.0, "series": [{"data": [[2.0, 36860.5], [8.0, 62343.5], [36.0, 91350.5], [10.0, 18698.0], [42.0, 84381.5], [180.0, 9554.0], [44.0, 55752.0], [3.0, 39205.0], [49.0, 27497.5], [12.0, 80111.5], [13.0, 50333.0], [52.0, 54645.5], [14.0, 21946.5], [1.0, 37417.0], [4.0, 15865.5], [18.0, 19611.0], [5.0, 39717.5], [21.0, 58444.0], [85.0, 87142.0], [93.0, 32739.0], [6.0, 35693.0], [26.0, 9870.5], [114.0, 91753.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 180.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.57141038E12, "maxY": 16.666666666666668, "series": [{"data": [[1.57141038E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57141038E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.57141038E12, "maxY": 7.9, "series": [{"data": [[1.57141056E12, 7.9], [1.57141062E12, 0.016666666666666666], [1.57141044E12, 0.06666666666666667], [1.5714105E12, 5.133333333333334], [1.57141038E12, 3.55]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57141062E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.57141038E12, "maxY": 7.9, "series": [{"data": [[1.57141056E12, 7.9], [1.57141062E12, 0.016666666666666666], [1.57141044E12, 0.06666666666666667], [1.5714105E12, 5.133333333333334], [1.57141038E12, 3.55]], "isOverall": false, "label": "Access Detail Movie-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57141062E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.57141038E12, "maxY": 7.9, "series": [{"data": [[1.57141056E12, 7.9], [1.57141062E12, 0.016666666666666666], [1.57141044E12, 0.06666666666666667], [1.5714105E12, 5.133333333333334], [1.57141038E12, 3.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57141062E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

